<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2048小游戏</title>
    <url>/2022/02/27/2048/</url>
    <content><![CDATA[<p>先移动，将arr数组中的数据进行合并</p>
<p>再判断游戏是否结束</p>
<p>再更新界面（包括更新div中的innerHTML和更新分数）</p>
<p>这是我制作的第一个小游戏🙆‍♀️</p>
<p>自学了HTML，CSS，和JS的一点皮毛🤦‍♀️</p>
<p>只能说一个这个有些稚嫩的成果，基本啥都没有，简单的界面和逻辑，唯一的优点是它确实能跑，缺点是“能跑”的补集😅</p>
<p>这个游戏的思路：<br>首先创建一个类</p>
<p>类中有以下东西：</p>
<p>①成员变量：</p>
<ul>
<li>一个二维数组，负责记录当前位置的分数（对应就是屏幕上的16个块）</li>
<li>当前的分数</li>
<li>当前游戏的状态，运行（1）or已经结束（0）</li>
</ul>
<p>②成员函数</p>
<ul>
<li>游戏的初始化</li>
</ul>
<ol>
<li>分数初始化为0</li>
<li>对16个方格对应的值进行赋值为0</li>
<li>当前的游戏状态设为1（正在运行）</li>
<li>调用生成随机数函数两次，生成两个随机数</li>
<li>调用更新视图函数，</li>
</ol>
<ul>
<li>生成随机数</li>
</ul>
<ol>
<li>分别随机生成行和列</li>
<li>如果对应的元素为0的话，就说明这个位置是可以的</li>
<li>则在随机生成2或者4，这里用到了Math.random()，是令系统随机选取大于等于 0.0 且小于 1.0 的伪随机 double 值，所以我们要以均等的概率生成2或4，代码就是<code>var num = Math.random()&gt;0.5?2:4;</code></li>
</ol>
<ul>
<li>更新当前界面（JS与HTML链接的地方）</li>
</ul>
<ol>
<li>两层for循环遍历data数组，通过getElementById来获取[i][j]位置上的方格,赋值给变量div</li>
<li>如果data[i][j]的值不为0 通过div.innerHTML把格子显示的数值改成data[i][j]（更新数据），通过div.className将格子代表的数值也进行更新</li>
<li>如果data[i][j]的值为0，格子内什么也不显示，对应设置div.innerHTML&#x3D;’’，div.className&#x3D;’grid’</li>
</ol>
<ul>
<li>更新屏幕上的分数</li>
</ul>
<p>通过getElementById来获得score01（当前分数）的标签，将其中的innerHTML改为当前的分数（this.score）</p>
<ul>
<li>检测游戏状态</li>
</ul>
<ol>
<li>如果this.status&#x3D;&#x3D;0(游戏结束）将this.score赋值给score02(结束时的分数）的innerHTML</li>
</ol>
<ul>
<li>判断游戏是否结束（没结束返回false，结束返回true）</li>
</ul>
<p>没有结束的三种情况：</p>
<ol>
<li>两层循环遍历data ，如果data[i][j]为零，返回false（① 数组中还有0）</li>
<li>在遍历中，如果j&lt;3并且data[i][j]等于data[i][j+1]，返回false（②左右相邻的还有相同的）</li>
<li>在遍历中，如果i&lt;3并且data[i][j]等于data[i+1][j]，返回false（③上下相邻的还有相同的）</li>
<li>如果遍历完都没有返回，说明游戏结束了，返回true</li>
</ol>
<ul>
<li>方格向左移动</li>
</ul>
<ol>
<li>用String函数将变动前的data二维数组转化成一个字符串before，以便变动之后与变动后的data数组比较。</li>
<li>遍历每一行，调用左移一行的函数</li>
<li>用String函数将变动后的data二维数组转化成一个字符串after，比较before和after</li>
<li>如果不相等，说明布局变化了，需要判断游戏是否结束，如果游戏结束，则将游戏状态status设为0，如果游戏没有结束，调用更新当前界面函数</li>
</ol>
<ul>
<li>左移一行的函数：</li>
</ul>
<ol>
<li><p>遍历当前行的所有列，得到当前元素[i][j]的右边不为0的第一个位置[i][nextj]</p>
</li>
<li><p>如果当前元素为0，左移之后直接会覆盖，所以就让当前元素等于data[i][nextj]，并把data[i][nextj]置0，让j–（要从当前位置继续遍历）</p>
</li>
<li><p>如果当前元素不为0且等于它右边不为0的第一个元素，则左移以后两个方块会合并为一个，并将data<em>2，所以this.data[i][j]</em>&#x3D;2；并将分数加上。</p>
</li>
</ol>
<p>下面是我做的时候写的思维导图，希望对你有帮助：</p>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/2048-16462039259381.png" alt="2048"></p>
<p>里面用到的函数：</p>
<ol>
<li>更新当前视图</li>
</ol>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE.png" alt="更新视图"></p>
<ol start="2">
<li><p>移动本行（这里以向左移动为例）</p>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE(1).png" alt="更新视图(1)"></p>
</li>
<li><p>生成随机位置</p>
</li>
</ol>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE(2).png" alt="更新视图(2)"></p>
<p>链接如下，要不点进去看看，哎喂看看我的配色也行啊！</p>
<p><a href="https://zhiruozzy.cn/Web/">2048小游戏</a></p>
<h3 id="下面是代码部分："><a href="#下面是代码部分：" class="headerlink" title="下面是代码部分："></a>下面是代码部分：</h3><h4 id="HTML部分："><a href="#HTML部分：" class="headerlink" title="HTML部分："></a>HTML部分：</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.2048.org/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>2048<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 游戏标题 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>2048<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 当herf链接会空时会刷新页面，也就达到了remake的目的 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> <span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>newgamebutton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grade<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分数：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>999999999<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c00<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c03<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c13<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c23<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c31<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c32<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c33<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gameover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
            游戏结束！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span> 分数：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>999999999<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>再来一次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./js/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">;</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">header</span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">10</span>px auto<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 设置“2048”的字体 */</span>
<span class="token selector">header h1</span><span class="token punctuation">{</span>
    
    <span class="token property">font-family</span><span class="token punctuation">:</span> Arial, Helvetica, sans-serif<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">45</span>px<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 字体加粗 */</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/*设置游戏按钮 */</span>
<span class="token selector">header <span class="token id">#newgamebutton</span></span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">8</span>px auto<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">130</span>px<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 背景颜色 */</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#8f7a66</span><span class="token punctuation">;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> Arial, Helvetica, sans-serif<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 字体颜色 */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 字体垂直居中 */</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 设置圆角 */</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 去除下划线 */</span>
    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 设置鼠标悬浮样式 */</span>
<span class="token selector">header <span class="token id">#newgamebutton</span><span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#9f8b77</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">body </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FAF8EF</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.grade</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#776E65</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.all</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#BBADA0</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.cell</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc0b3</span><span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#776E65</span><span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n2</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">237</span>, <span class="token number">229</span>, <span class="token number">218</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n4</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">235</span>, <span class="token number">216</span>, <span class="token number">191</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n8</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">242</span>, <span class="token number">177</span>, <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n16</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">246</span>, <span class="token number">147</span>, <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n32</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">242</span>, <span class="token number">116</span>, <span class="token number">86</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n64</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">243</span>, <span class="token number">81</span>, <span class="token number">46</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n128</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">255</span>, <span class="token number">210</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n256</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">230</span>, <span class="token number">209</span>, <span class="token number">81</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n512</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">204</span>, <span class="token number">164</span>, <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n1024</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">143</span>, <span class="token number">75</span>, <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n2048</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">142</span>, <span class="token number">62</span>, <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n4096</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">106</span>, <span class="token number">52</span>, <span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.n8192</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">110</span>, <span class="token number">107</span>, <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.gameover</span> </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.gameover</span> p </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">150</span>px<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px black<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.gameover</span> p a </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#8F7A66</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="JS部分（核心）："><a href="#JS部分（核心）：" class="headerlink" title="JS部分（核心）："></a>JS部分（核心）：</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> game <span class="token operator">=</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//存放数据</span>
    score<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//分数</span>
    status<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前状态，时刻的监听，时刻的需要改变      游戏运行中的状态，结束的状态</span>
    gameover<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    gamerunning<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>


    <span class="token comment" spellcheck="true">// 开始游戏的方法</span>
    start<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token punctuation">]</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gamerunning<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dataView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 随机数的方法</span>
    randomNum<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> c <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 更新的视图</span>
    dataView<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'c'</span> <span class="token operator">+</span> r <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'cell n'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span>
                    div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'cell'</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'score01'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置游戏分数</span>

        <span class="token comment" spellcheck="true">// 监测游戏状态</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameover<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'score02'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>
            document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'gameover'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'gameover'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 判断游戏是否结束的方法   游戏没结束返回false 结束返回true</span>
    isgameover<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 没有结束，三种情况：：1.数组中还有0 2.左右相邻的有相同的  3.上下相邻有相同的</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//表示游戏已经结束</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment" spellcheck="true">// 左移动</span>
    moveLeft<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> before <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//移动之前</span>
            <span class="token comment" spellcheck="true">//处理移动的逻辑</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveLeftInRow</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">var</span> after <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//移动之后</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>before <span class="token operator">!=</span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isgameover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameover<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dataView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    moveLeftInRow<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//单独处理每一行的逻辑</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> nextc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNextInRow</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>nextc<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>nextc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    c<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>nextc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>nextc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    getNextInRow<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> i
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment" spellcheck="true">// 右移动</span>
    moveRight<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> before <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//移动之前</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveRightInRow</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> after <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//移动之后</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>before <span class="token operator">!=</span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isgameover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameover<span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dataView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    moveRightInRow<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//单独处理每一行的逻辑</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> c <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> c<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> nextc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNextInRowa</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>nextc<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>nextc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    c<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>nextc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>nextc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    getNextInRowa<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> i
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 上移动</span>
    moveTop<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> before <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//移动之前</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveTopInRow</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> after <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//移动之后</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>before <span class="token operator">!=</span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isgameover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameover<span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dataView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    moveTopInRow<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//单独处理每一列的逻辑</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> nextr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNextInRowaa</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextr <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>nextr<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>nextr<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    r<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>nextr<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>nextr<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    getNextInRowaa<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> i
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 下移动</span>
    moveButtom<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> before <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//移动之前</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> c <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> c<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">moveButtomInRow</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> after <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//移动之后</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>before <span class="token operator">!=</span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">randomNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isgameover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameover<span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dataView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    moveButtomInRow<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//单独处理每一列的逻辑</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> r<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> nextr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNextInRowaaa</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextr <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>nextr<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>nextr<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    r<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>nextr<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>nextr<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    getNextInRowaaa<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> i
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token punctuation">}</span>


game<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>



document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">37</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        game<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">39</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        game<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">38</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        game<span class="token punctuation">.</span><span class="token function">moveTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        game<span class="token punctuation">.</span><span class="token function">moveButtom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>自制</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajex</title>
    <url>/2022/03/27/Ajex/</url>
    <content><![CDATA[<p>XML是一种可扩展标记语言，被设计用来传输和存储数据，比如将结果返回给客户端。HTML是呈现数据的。HTML中都是预定义标签（提前已经有标准，定义好的），而XML中没有预定义标签，全是自己定义的。</p>
<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><p>同步任务：在主线程上排队执行的任务，只有前一个任务执行完之后，才能执行下一个任务</p>
<p>异步任务：不进入主线程，而是进入任务队列的任务，只有任务队列通知主线程某个异步任务可以执行了，这个任务才可以进入主线程执行</p>
<p>比如：网络图片的请求就是一个异步任务，谁先请求完成就让谁先显示出来。</p>
<p>常见异步的场景：</p>
<ol>
<li>定时器：setTimeout (经过指定时间之后执行该函数，一次执行) 、setinterval（反复执行）</li>
<li>事件的绑定函数，比如按钮绑定点击事件，用户只有点击了按钮才会执行，所以是异步</li>
<li>网络请求：ajax请求（前端发送Ajax请求向后端请求数据，然后等待一段时间才能拿到这个数据，所以这个请求过程就是异步任务），网络图片加载</li>
<li>ES6中的Promise</li>
</ol>
<h2 id="异步任务举例"><a href="#异步任务举例" class="headerlink" title="异步任务举例"></a>异步任务举例</h2><h4 id="预加载图片"><a href="#预加载图片" class="headerlink" title="预加载图片"></a>预加载图片</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">

<span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个Image对象，实现图片的预下载</span>
    img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>img<span class="token punctuation">.</span>complete<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果图片已经存在于浏览器缓存，直接调用回调函数</span>
     callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span> 
     <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接返回，不用再处理onload事件</span>
    <span class="token punctuation">}</span>

    img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//图片下载完毕时异步调用callback函数。</span>
      callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将回调函数的this替换为Image对象</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//被回调的方法</span>
<span class="token keyword">function</span> <span class="token function">imgLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loadImage<span class="token punctuation">"</span></span> <span class="token attr-name">οnclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loadImag(<span class="token punctuation">'</span>xxx.jpg<span class="token punctuation">'</span>,imgLoaded)<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>理解一下这段代码。</p>
<ul>
<li><p>首先先看HTML中给表单绑定了一个单击响应函数，函数的名字是loadImage，第一个参数是一个图片，第二个参数是一个函数（回调函数）</p>
</li>
<li><p>再看script中的loadImage函数</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个Image对象，实现图片的预下载</span>
    img<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>img<span class="token punctuation">.</span>complete<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果图片已经存在于浏览器缓存，直接调用回调函数，即调用imgLoaded,并将this指向改成了img</span>
     callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span> 
     <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接返回，不用再处理onload事件</span>
    <span class="token punctuation">}</span>

    img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//图片下载完毕时异步调用callback函数。</span>
      callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将回调函数的this替换为Image对象</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>要理解这个函数，必须知道以下知识：</p>
<p>image 的 **onload ** 事件     </p>
<p>&#x3D;&gt;onload事件在图片加载完成之后立即执行代码</p>
<p>语法：onload&#x3D;”<em>JavaScriptCode</em>“</p>
<p>image 的 <strong>complete</strong> 属性</p>
<p>&#x3D;&gt;可返回浏览器是否完成对图像的加载，如果加载完成，则返回true，否则返回false</p>
<p>语法：imageObject.complete</p>
<p><strong>callback.call</strong></p>
<p>callback是一种函数，为回调函数，一般来说，函数A的参数是函数B，那么就发生了回调。</p>
<p><strong>call()方法</strong>：可以调用一个函数，并改变这个函数内部的this指向。</p>
<p>语法：function1.call(你想要this指向哪里，function1的实参1，function1的实参2…)</p>
<p>如：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    nickName<span class="token punctuation">:</span> <span class="token string">'zhizhi'</span><span class="token punctuation">,</span>
    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nickName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

fn1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先将 this 指向 obj1，然后执行 fn1() 函数</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>最后看一下回调函数</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//被回调的方法</span>
<span class="token keyword">function</span> <span class="token function">imgLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>即调用这个函数后，会弹出this指向的对象的宽度</p>
</li>
</ul>
<h2 id="全局刷新和局部刷新"><a href="#全局刷新和局部刷新" class="headerlink" title="全局刷新和局部刷新"></a>全局刷新和局部刷新</h2><ol>
<li><p>全局刷新</p>
<ul>
<li><p>用表单form、herf等发起的请求是全局刷新，用户发起请求，视图发生了改变，页面发生跳转。</p>
</li>
<li><p>缺点：渲染新的页面需要时间，占用了网络带宽。如果数据量很大，那么耗时将很长，用户体验性不好。</p>
</li>
</ul>
</li>
<li><p>局部刷新</p>
<ul>
<li><p>在当前页面中发送请求，获取数据，更新当前页面的dom对象，对视图部分刷新。</p>
</li>
<li><p>比如访问微博的时候，点击底部的加载更多，会自动帮我们加载更多的微博，同时页面并不会整体刷新。</p>
</li>
<li><p>优点：①只获取少量数据，速度传输更快。</p>
<p>​            ②部分更新页面，速度很快。</p>
<p>​            ③在一个页面中，可以做多个局部刷新</p>
</li>
</ul>
</li>
</ol>
<h2 id="异步对象"><a href="#异步对象" class="headerlink" title="异步对象"></a>异步对象</h2><p>创建方法：<br><code>var xhr = new XMLHttpRequest();</code></p>
<p>使用异步对象主要负责发起请求，传递请求的参数，并从服务器接收数据</p>
<p> 局部刷新需要使用的技术：</p>
<ol>
<li>JavaScript：创建异步对象，调用它的属性和方法</li>
<li>dom：处理dom来更新数据</li>
<li>css：处理视图，美化</li>
<li>servlet：服务器端技术</li>
<li>json</li>
</ol>
<p>把以上这些技术综合应用就叫做Ajax，他不是新的编程语言，而是多种技术的综合应用。AJax全称为asynchronous JavaScript and XML（异步的JavaScript和XML）。我们使用Ajax来实现局部刷新</p>
<h2 id="异步对象的属性和方法"><a href="#异步对象的属性和方法" class="headerlink" title="异步对象的属性和方法"></a>异步对象的属性和方法</h2><ol>
<li><p>创建异步对象</p>
<p><code>var xhr = new XMLHttpRequest(); </code>  </p>
</li>
<li><p>异步对象的方法</p>
<ul>
<li><p>open（请求方式，服务器端的访问地址，是否为异步方式），用来建立http请求</p>
<p>例如：<code>xhr.open(&quot;GET&quot;,url,true);</code></p>
<p>注意：请求方式大小写不敏感，是否为异步方式默认为true</p>
</li>
<li><p>send ( body ), 用于建立链接后发送请求</p>
</li>
</ul>
</li>
<li><p>异步对象的属性</p>
<ul>
<li><p><strong>readyState</strong>：表示请求的状态</p>
<p>0：创建异步对象时（new对象）</p>
<p>1：建立请求时（执行open方法）</p>
<p>2：使用send方法发送请求时</p>
<p>3：使用异步对象从服务端接收了数据</p>
<p>4：异步对象接受并处理完数据</p>
</li>
<li><p><strong>status</strong>：表示网络的状态，和http的状态码对应</p>
<p>如：200 请求成功| 404服务器资源没有找到</p>
</li>
<li><p><strong>responseText</strong>: 获得字符串形式的响应数据</p>
<p>如：<code>var data = xhr.responseText</code></p>
</li>
<li><p><strong>responseXML</strong>：获得XML形式的响应数据</p>
</li>
</ul>
</li>
</ol>
<h2 id="异步对象的使用步骤"><a href="#异步对象的使用步骤" class="headerlink" title="异步对象的使用步骤"></a>异步对象的使用步骤</h2><ol>
<li><p>使用JS创建异步对象，即XMLHttpRequest对象</p>
<p>var xhr &#x3D; new XMLHttpRequest();</p>
</li>
<li><p>使用open()方法设置请求参数。open(method,url,true&#x2F;false);</p>
</li>
<li><p>发送请求，执行send()函数</p>
</li>
<li><p>给异步对象绑定事件，事件名称onreadystatechange，状态改变时就会调用</p>
<pre class="line-numbers language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">onreadystatechange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    当状态改变时执行的代码
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果在数据完整并且请求回来的时候才调用的话，需要在绑定的函数中用if语句来加以判断，例子如下：</p>
<pre class="line-numbers language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">onreadystatechange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">//从服务器中获取了数据</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">var</span> data <span class="token operator">=</span> xhr<span class="token punctuation">.</span>reponseText<span class="token punctuation">;</span>
     <span class="token comment" spellcheck="true">//更新dom对象</span>
     document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mydiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>服务端响应，获取返回的数据</p>
</li>
</ol>
<h2 id="发送请求的方式是POST"><a href="#发送请求的方式是POST" class="headerlink" title="发送请求的方式是POST"></a>发送请求的方式是POST</h2><p>方法：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当method时POST请求时要注意，如果想像form表单提交数据那样使用POST请求，需要使用<strong>XMLHttpRequest</strong> 对象的**setRequestHeader()**来添加HTTP头，并在send（）方法中添加想要发送的数据。</p>
<p>例如：</p>
<pre class="line-numbers language-js"><code class="language-js">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'ajax_test.php'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

xmlhttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//请求头是数据的类型，application/x-www-form-urlencoded：表单发送默认格式</span>

xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'name=smyhvae&amp;age=27'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>setRequestHeader(header, value)    header字符串:http请求头   value 字符串:值。</p>
<h4 id="常见请求头"><a href="#常见请求头" class="headerlink" title="常见请求头"></a>常见请求头</h4><table>
<thead>
<tr>
<th>请求头字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Accept</td>
<td>客户端可接受的MIME类型</td>
</tr>
<tr>
<td>Content-Type</td>
<td>数据属于什么类型，如js,c++,html,text格式</td>
</tr>
<tr>
<td>User-Agent</td>
<td>发出请求的用户信息，如用户使用的什么客户端</td>
</tr>
<tr>
<td>Cookie</td>
<td>客户端保存服务器返回的数据，如保存用户身份信息</td>
</tr>
<tr>
<td>Connection</td>
<td>表示处理完这次请求后是否断开链接</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2022/03/27/HTTP/</url>
    <content><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>协议规定了两部分的内容，分别是请求报文和响应报文</p>
<h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>请求报文的的格式为：<strong>请求行  － 请求头 －空行 - 请求数据</strong></p>
<h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>由<strong>请求方法字段</strong>，<strong>URL字段</strong>和<strong>HTTP协议版本字段</strong>  三个字段构成</p>
<ul>
<li>请求方法：常见的有GET(请求指定的页面，服务器返回具体的内容数据）、POST（提交数据，如提交表单）、PUT（更新和修改数据）等，浏览器在向服务器发送请求的时候必须指明请求类型</li>
<li>URL：表示请求所针对的资源</li>
<li>协议版本：让发送方指示消息的格式和理解后续HTTP通信的能力</li>
</ul>
<p>示例：<code>GET http://www/w3/org/pub.html HTTP/1.1</code></p>
<h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><table>
<thead>
<tr>
<th>请求头字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Accept</td>
<td>客户端可接受的MIME类型</td>
</tr>
<tr>
<td>Content-Type</td>
<td>数据属于什么类型，如js,c++,html,text格式</td>
</tr>
<tr>
<td>User-Agent</td>
<td>发出请求的用户信息，如用户使用的什么客户端</td>
</tr>
<tr>
<td>Cookie</td>
<td>客户端保存服务器返回的数据，如保存用户身份信息</td>
</tr>
<tr>
<td>Connection</td>
<td>表示处理完这次请求后是否断开链接</td>
</tr>
</tbody></table>
<h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p>若方法字段是GET，则此项为空，没有数据。若方法字段是POST，则放的是提交的数据。</p>
<p>示例：<code>user=admin&amp;password=123456</code></p>
<p>请求行 － 通用信息头 － 请求头 － 实体头 － 报文主体</p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p><strong>1. GET</strong></p>
<pre><code>//请求行

GET /hello/index.jsp HTTP/1.1

//请求头部

Host: localhost
User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0
Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-cn,zh;q=0.5
Accept-Encoding: gzip, deflate
Accept-Charset: GB2312,utf-8;q=0.7,*;q=0.7
Connection: keep-alive
Cookie: JSESSIONID=369766FDF6220F7803433C0B2DE36D98

//空行

//因为GET没有正文，所以下面为空
</code></pre>
<p><strong>2.POST</strong></p>
<pre><code>// 请求行

POST /hello/index.jsp HTTP/1.1

//请求头

Host: localhost
User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:5.0) Gecko/20100101 Firefox/5.0
Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-cn,zh;q=0.5
Accept-Encoding: gzip, deflate
Accept-Charset: GB2312,utf-8;q=0.7,*;q=0.7
Connection: keep-alive
Referer: http://localhost/hello/index.jsp
Cookie: JSESSIONID=369766FDF6220F7803433C0B2DE36D98
Content-Type: application/x-www-form-urlencoded 
Content-Length: 14 

// 这里是空行

//POST有请求正文

username=hello
</code></pre>
<h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p>响应报文的的格式为:状态行 －  响应头 － 空行  -  响应正文</p>
<h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>状态行由协议版本。状态码，原因短语构成，每个元素由空格分隔</p>
<p>示例：<code>HTTP/1.1 200 OK</code></p>
<ul>
<li><p>协议版本：让发送方指示消息的格式和理解后续HTTP通信的能力</p>
</li>
<li><p>状态码：一个3位整数结果码，用于向用户返回操作结果</p>
<p>常见状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码说明</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1XX</td>
<td>请求被接收</td>
<td>100 Continue</td>
<td>请求被接收，继续执行</td>
</tr>
<tr>
<td>2XX</td>
<td>请求成功</td>
<td>200 OK</td>
<td>成功，有响应消息体</td>
</tr>
<tr>
<td></td>
<td></td>
<td>201 Created</td>
<td>资源创建成功</td>
</tr>
<tr>
<td></td>
<td></td>
<td>204 No Content</td>
<td>成功，没有响应的消息体</td>
</tr>
<tr>
<td>3XX</td>
<td>进一步操作需要被执行</td>
<td>301 Moved Permanently</td>
<td>目标资源被分配进新的URL</td>
</tr>
<tr>
<td>4XX</td>
<td>请求错误</td>
<td>400 Bad Request</td>
<td>请求消息体错误，消息体中有错误描述</td>
</tr>
<tr>
<td></td>
<td></td>
<td>401 Unauthorized</td>
<td>授权失败，如证书不匹配</td>
</tr>
<tr>
<td></td>
<td></td>
<td>403 Forbidden</td>
<td>禁止访问</td>
</tr>
<tr>
<td></td>
<td></td>
<td>404 Not Found</td>
<td>找不到请求的梓员</td>
</tr>
<tr>
<td>5XX</td>
<td>服务端错误</td>
<td>500 Internal Server Error</td>
<td>服务器内部错误</td>
</tr>
<tr>
<td></td>
<td></td>
<td>501 Not Implement</td>
<td>功能未实现</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><table>
<thead>
<tr>
<th>响应头字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Content-Encoding</td>
<td>文档的编码（Encode）方法</td>
</tr>
<tr>
<td>Allow</td>
<td>服务器支持哪些请求方法（如GET、POST等）。</td>
</tr>
<tr>
<td>Content-Length</td>
<td>表示内容长度</td>
</tr>
<tr>
<td>Content-Type</td>
<td>表示后面的文档属于什么MIME类型</td>
</tr>
<tr>
<td>Date</td>
<td>当前的GMT时间</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>文档的最后改动时间</td>
</tr>
</tbody></table>
<h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>端口</p>
<p>端口分为物理端口和软件端口</p>
<p><strong>物理端口</strong>：如交换机和路由器上面插网线的口就叫做物理端口</p>
<p><img src="/../img/HTTP/image-20220327104852899.png" alt="image-20220327104852899"></p>
<p><strong>软件端口</strong>：指软件与服务器的接口，是操作系统模拟出来的。端口相当于身份证，保证了信息不会发错。分为了服务器端口和用户端的端口</p>
<p><strong>查看端口号</strong>：</p>
<p>在检查-网络中可以查看</p>
<p><img src="/../img/HTTP/image-20220327105318272.png" alt="image-20220327105318272"></p>
<p>HTTP服务器，默认的端口号为80</p>
<p>HTTPS服务器，默认的端口号为443</p>
<p>HTTP是应用层协议，是建立在传输层TCP协议之上的</p>
<p><img src="/../img/HTTP/image-20220327140133597.png" alt="image-20220327140133597"></p>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p>请求方法一共有9种</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">GET</td>
<td align="left">请求指定的页面信息，并返回实体主体。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">HEAD</td>
<td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">POST</td>
<td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">PUT</td>
<td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">DELETE</td>
<td align="left">请求服务器删除指定的页面。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">CONNECT</td>
<td align="left">HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">OPTIONS</td>
<td align="left">允许客户端查看服务器的性能。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">TRACE</td>
<td align="left">回显服务器收到的请求，主要用于测试或诊断。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">PATCH</td>
<td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td>
</tr>
</tbody></table>
<p>直接在浏览器的地址栏中输入网址，默认属于get请求</p>
<p>一般使用表单提交请求，默认属于post请求</p>
<p>GET和POST的区别：</p>
<ol>
<li><p>get是用来从服务器上获得数据的，而post是向服务器上传递数据的</p>
</li>
<li><p>get会将请求的数据会附在URL之后，即把数据放在HTTP协议头中，用？来分割URL和传输数据，用&amp;来分隔各个参数。如下面这个链接：</p>
<p><a href="https://search.bilibili.com/all?keyword=http%EF%BF%BD&amp;from_source=webtop_search&amp;spm_id_from=333.788&amp;page=3">https://search.bilibili.com/all?keyword=http%E5%8D&amp;from_source=webtop_search&amp;spm_id_from=333.788&amp;page=3</a></p>
<p>如果数据是英文或者英文字母，则原样显示，如果是空格，则以+显示，如果是中文或其他字符，则将字符串用BASE64编码。即如果用GET提交数据，用户名和密码将会以明文出现在URL中。</p>
<p>post将表单中的数据放在form的数据体中，按照变量和值的对应方式，传递到action所指向的URL中</p>
</li>
<li><p>get的请求可被缓存，可被保留在浏览器的历史记录中，可被收藏为书签，而post不会，所以get的安全性差，因为发送的数据是URL的一部分</p>
</li>
<li><p>因为get是向URL中添加数据，而URL的长度是有限的（最大2048个字符），多以get的数据长度是有限的，而post的数据不限长度</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>JS学习笔记</title>
    <url>/2022/03/05/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<p>自学的时候做的笔记，以供之后回来查阅，估计会有很多表述不准确甚至出错的地方，随着学习的加深会慢慢修正补充知识的。</p>
<p>​                                                     ——2022.03.05</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件，就是发生的事情，比如点击某个元素，将鼠标移动到某个元素的上方，按下键盘上的某个键</p>
<h3 id="拖拽box元素"><a href="#拖拽box元素" class="headerlink" title="拖拽box元素"></a>拖拽box元素</h3><p>需要进行三个步骤（其实就是对应了三个事件）</p>
<ol>
<li>当鼠标在被拖拽元素上按下（不是点一下）时，开始拖拽 ：onmousedown</li>
<li>当鼠标移动时，被拖拽元素随鼠标移动 : onmousemove</li>
<li>当鼠标松开时，被拖拽元素固定在当前位置: onmouseup</li>
</ol>
<pre><code>//拖谁给谁绑定响应函数，本题拖拽的时box1，所以给box1绑定
var box1 
</code></pre>
<h2 id="JS的常用书写方式"><a href="#JS的常用书写方式" class="headerlink" title="JS的常用书写方式"></a>JS的常用书写方式</h2><ol>
<li><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><ul>
<li><p>在HTML的<code>&lt;body&gt;</code>标签中放入<code>&lt;script type=&quot;text/javascipt&quot;&gt; &lt;/script&gt;</code>标签对中，并在<code>&lt;script&gt;</code>标签对里书写代码</p>
</li>
<li><p>如果要将JS代码写在<code>&lt;head&gt;</code>中，就需要用window.onload&#x3D;function(){  }包裹起来</p>
</li>
</ul>
</li>
<li><h3 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h3><p>在HTML的<code>&lt;body&gt;</code>标签中放入<code>&lt;script src=&quot;相对路径&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ol>
<h2 id="JS输出语句"><a href="#JS输出语句" class="headerlink" title="JS输出语句"></a>JS输出语句</h2><ol>
<li>弹窗输出 <code>alert();</code> 弹窗处alert中的内容</li>
<li>弹窗确认 <code>confirm(); </code> 弹窗出confirm中的内容，弹窗上有“确认”和“取消”两个按钮</li>
<li>网页内容区输出：<code>document.write()</code>  直接输出在网页页面上</li>
<li>控制台输出：<code>console.log()</code> 输出在控制台</li>
</ol>
<h2 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h2><ul>
<li>基本数据类型（参数赋值的时候，传数值） ：String字符串，Number数值，Brglnt大型数值，Boolean布尔值，Null空值，Undefined 未定义，Symbol</li>
<li>引用数据类型（参数赋值的时候，传地址）：Object对象（只有这一种）</li>
</ul>
<h2 id="JS的字符串拼接"><a href="#JS的字符串拼接" class="headerlink" title="JS的字符串拼接"></a>JS的字符串拼接</h2><p>JS中字符串可以拼接，用“+”就可以拼接，</p>
<h3 id="拼接语法："><a href="#拼接语法：" class="headerlink" title="拼接语法："></a>拼接语法：</h3><pre class="line-numbers language-markdown"><code class="language-markdown">字符串 + 任意数据类型 = 拼接后的新字符串；
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="拼接规则："><a href="#拼接规则：" class="headerlink" title="拼接规则："></a>拼接规则：</h3><p>拼接前，会把与字符串相加的数据类型转化为字符串，然后再拼接成一个新的字符串。</p>
<h3 id="代码举例："><a href="#代码举例：" class="headerlink" title="代码举例："></a>代码举例：</h3><pre class="line-numbers language-js"><code class="language-js">                                               输出结果
<span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">"长安"</span><span class="token operator">+</span><span class="token string">"归故里"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//字符串+字符串类型    长安归故里</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"长安"</span><span class="token operator">+</span><span class="token number">666</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//字符串+数值类型          长安666           </span>
<span class="token keyword">var</span> str3 <span class="token operator">=</span> <span class="token string">"长安"</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符串+布尔类型          长安true</span>
<span class="token keyword">var</span> str4 <span class="token operator">=</span> <span class="token string">"长安"</span><span class="token operator">+</span><span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符串+空类型            长安null</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'芷若'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str5 <span class="token operator">=</span> <span class="token string">"长安"</span><span class="token operator">+</span>obj<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//字符串+object类型     长安[object Object] </span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是一种复合的数据类型，在对象中可以保存多个不同的数据类型的属性</p>
<h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><ol>
<li><p>内置对象：<br>由ES标准中定义的对象，比如：Object、Math、Date、Function等。</p>
</li>
<li><p>宿主对象：</p>
<p>由JS的运行环境（浏览器）提供的对象，比如：BOM，DOM</p>
</li>
<li><p>自定义对象：</p>
<p>由开发人员自己创建出来的对象</p>
</li>
</ol>
<p>注意：通过new关键字创建出来的对象实例，都是对象类型</p>
<h3 id="对象的创建方法"><a href="#对象的创建方法" class="headerlink" title="对象的创建方法"></a>对象的创建方法</h3><ol>
<li><p>使用<strong>内置</strong>的构造函数创建对象（工厂模式）</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
student<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"芷若"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>弊端：使用的构造函数都是Object，所以创建的对象都是Object这个类型，导致无法区分多种不同类型的对象</p>
</li>
<li><p>使用对象字面量创建对象</p>
<p>字面量：为变量赋值时的常数量</p>
<p>对象字面量：封闭在花括号对{}中的对象的零个或多个“属性名：值”的列表。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//多个“属性名：值”</span>
<span class="token keyword">var</span> student <span class="token operator">=</span><span class="token punctuation">{</span>
      name<span class="token punctuation">:</span><span class="token string">"芷若"</span><span class="token punctuation">;</span>
      age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//零个</span>
<span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>利用构造函数创建对象</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//先自己创建一个构造函数</span>
<span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sing<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//再用自建的构造函数创建对象</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"双笙"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"林俊杰"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person1<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
person2<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="对象的赋值和修改"><a href="#对象的赋值和修改" class="headerlink" title="对象的赋值和修改"></a>对象的赋值和修改</h3><ul>
<li>这是基本数据类型：</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> name1 <span class="token operator">=</span> <span class="token string">"长安"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> name2 <span class="token operator">=</span> name1<span class="token punctuation">;</span>
name2 <span class="token operator">=</span> <span class="token string">"故里"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出结果：长安</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出结果：故里</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>这是object类型（对象）：</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"长安"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"故里"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出结果：故里</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出结果：故里</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>object类型赋值后竟然会改变本体。这里的object就相当于C语言中的一个指针指向的内容，而将obj1赋值给obj2就相当于让obj2也指向了这块内容，所以修改obj2所指向的内容后，自然也就修改了obj1</p>
<p>JS中的对象和C++中的对象相似之处：</p>
<ol>
<li><p>作用都是封装信息，比如一个student类中可以封装学生的姓名，年龄。成绩</p>
</li>
<li><p>C++中的对象有成员函数和成员变量。JS中的对象也是如此，不过叫的是特征（属性）和行为（方法）</p>
</li>
</ol>
<h4 id="获取对象中的属性："><a href="#获取对象中的属性：" class="headerlink" title="获取对象中的属性："></a>获取对象中的属性：</h4><p><strong>方式1</strong>：<code>对象.属性名</code></p>
<h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><h3 id="三个基本包装类："><a href="#三个基本包装类：" class="headerlink" title="三个基本包装类："></a>三个基本包装类：</h3><ul>
<li><p>String():将基本数据类型的字符串，转换为String对象</p>
</li>
<li><p>Number():将基本数据类型的数字，转化为Number对象</p>
</li>
<li><p>Boolean():将基本数据类型的布尔值，转化为Boolean对象</p>
</li>
</ul>
<h3 id="转换方法："><a href="#转换方法：" class="headerlink" title="转换方法："></a>转换方法：</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">'qianguyihao'</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'qianguyihao'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>str2，num, bool的类型都是object</p>
<p>将基本数据类型转化为对象后，就可以绑定属性和方法了</p>
<h3 id="String-对象常用方法"><a href="#String-对象常用方法" class="headerlink" title="String()对象常用方法"></a>String()对象常用方法</h3><ol>
<li><p>indexOf()&#x2F;lastIndexOf():获取字符串中指定内容（字符或字符串）的索引</p>
<ul>
<li><p>语法一：</p>
<pre class="line-numbers language-js"><code class="language-js">索引值 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>查询的字符或者字符串<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>indexOf() 是从前向后查找，lastIndexOf()是从后向前查找，如果找到了，返回第一次出现的索引，如果没有找到，返回-1</p>
</li>
<li><p>语法二：</p>
<pre><code>索引值 = str.indexOf(查询的字符串，起始的下标位置)
</code></pre>
</li>
</ul>
</li>
<li><p>charAt(index)获取指定位置的字符</p>
<p>str.charAt(index)和str[index]等价</p>
</li>
</ol>
<h3 id="Number-对象常用方法"><a href="#Number-对象常用方法" class="headerlink" title="Number()对象常用方法"></a>Number()对象常用方法</h3><ol>
<li><p>Number.isInteger()判断是否为整数</p>
<p>语法：<code>布尔值 = Number。isInteger(数字);</code></p>
</li>
<li><p>toFixed()小数点后面保留几位</p>
<p>语法：<code>字符串 = myNum.toFixed(num);</code></p>
<p>解释：将对象myNum的小数点后面保留num位小数（四舍五入），不会改变原数字，返回的是字符串</p>
</li>
</ol>
<h3 id="Math-对象的方法"><a href="#Math-对象的方法" class="headerlink" title="Math()对象的方法"></a>Math()对象的方法</h3><p><strong>注意：调用Math对象的方法时，不需要创建对象，即不需要通过new来调用，直接使用即可</strong></p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.6</span><span class="token punctuation">;</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取绝对值</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//向下取整，向小取</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//向上取整，向大取</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//四舍五入取整（正数四舍五入，负数五舍六入）</span>

 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成0-1之间的随机数</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组中可以存放<strong>任意对象</strong>的数据，比如：字符串，数字，布尔值，甚至是对象</p>
<h3 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h3><ol>
<li><p>和C语言一样的创建方法</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个空的数组</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建并初始化数组</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>特有：用构造函数创建数组</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Arrat</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>如果参数为空，则表示创建一个空数组，如果参数是一个数值，表示创建的数组的长度，如果有多个参数，表示数组中的元素</p>
</li>
<li><p>举例：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数为空</span>
<span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数为一个数值</span>
<span class="token keyword">var</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数为多个数值</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>打印结果：</p>
<pre class="line-numbers language-js"><code class="language-js">arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>函数也是一个对象</li>
<li>使用typeof 检查一个函数对象时，会返回一个function</li>
</ul>
<h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><ol>
<li><p>利用函数关键字自定义函数</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数明</span><span class="token punctuation">(</span>形参<span class="token number">1</span>，形参<span class="token number">2</span><span class="token operator">...</span>形参n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    语句<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>举例：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>利用函数表达式（匿名函数）</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>形参<span class="token number">1</span>，形参<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span>形参n<span class="token punctuation">)</span><span class="token punctuation">{</span>
     语句<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意这里有个分号，表示赋值语句结束</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>举例：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> fun2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是匿名函数中的代码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//这里调用的时候有两种等价的写法</span>
<span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不推荐这样写</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意：</strong></p>
<ul>
<li>fun2是变量名，不是函数名</li>
<li>函数表达式实际就是将匿名函数赋值给一个变量</li>
</ul>
</li>
</ol>
<h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><ol>
<li><p>普通函数的调用</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者</p>
<pre><code>函数名.call();
</code></pre>
<p>举例：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是函数体里面的内容1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是函数体里面的内容2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span>

fn2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用函数</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>通过对象的方式调用</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义一个类</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"圣米歇尔山"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//注意这里是逗号</span>
  draw<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"圣米歇尔山在哪里捏？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//调用对象的函数</span>
obj<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>立即执行函数</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'为什么立即执行函数这么多括号？！！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>举例：</p>
<pre class="line-numbers language-js"><code class="language-js">    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a = "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：立即执行函数在定义之后就会自动调用，这种函数通常只执行一次，因为没有变量保存它，执行完就找不到了（昙花一现）</p>
</li>
<li><p>用构造函数来调用</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hobby <span class="token operator">=</span> hobby<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'basketball'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token string">'dancing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>构造函数：专门来生成对象的函数，它提供模板，描述对象的基本结构，一个构造函数可以通过new来生成多个对象，这些对象都有相同的结构。</p>
</li>
<li><p>绑定事件函数</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
            <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//2.绑定事件</span>
            btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击按钮后，弹出了我'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>给点击这个操作绑定了事件（弹窗）</p>
</li>
</ol>
<h3 id="函数的传参"><a href="#函数的传参" class="headerlink" title="函数的传参"></a>函数的传参</h3><p>JS允许传入任意个参数而不影响调用，因此，传入的参数比定义的参数多没有问题（即使函数内部不需要这些参数），传入的参数比定义的少也没有问题。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'nalabala'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回19</span>
<span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'haha'</span><span class="token punctuation">,</span><span class="token string">'hehe'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回9</span>
<span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回NaN</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="调用函数和获取函数的区别"><a href="#调用函数和获取函数的区别" class="headerlink" title="调用函数和获取函数的区别"></a>调用函数和获取函数的区别</h3><p>获取方法与调用方法</p>
<p>C语言中只能调用方法，不能获取方法，而JS可以，如下例：</p>
<pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'smyhvae'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//没加括号，就是获取方法</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//加了括号，就是调用方法。即：执行函数内容，并执行函数体的内容</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code> console.log(obj.sayName);</code>执行结果：  </p>
<pre class="line-numbers language-js"><code class="language-js">ƒ <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'smyhvae'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//直接把方法整s</span>
                <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>console.log(obj.sayName()); </code>执行结果：</p>
<pre class="line-numbers language-js"><code class="language-js">smyhvae <span class="token comment" spellcheck="true">//首先调用函数，执行函数内容</span>
undefined   <span class="token comment" spellcheck="true">//又因为该方法没有返回值，所以输出undefined</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>总结：</p>
<ul>
<li><code>fun()</code>：调用函数。调用之后，还获取了函数的返回值</li>
<li><code>fun</code>：获取函数。相当于直接获取了整个函数对象</li>
</ul>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p><strong>构造函数</strong>主要用来初始化对象，即为对象成员赋初值，总是与new一起使用，在ES6之前由于没有<strong>类</strong>的概念，所以常把对象的一些公共属性和方法抽取出来。然后封装到构造函数中。</p>
<h4 id="构造函数和普通函数"><a href="#构造函数和普通函数" class="headerlink" title="构造函数和普通函数"></a>构造函数和普通函数</h4><ol>
<li>构造函数的创建方法和普通函数没有区别，都是<code>function 函数名()&#123;  &#125;</code>，不同的是构造函数习惯首字母大写</li>
<li>两者的调用方式不同。普通函数直接调用，而构造函数需要用new关键字来调用</li>
<li>二者this的指向不同。普通函数调用时，如果普通调用，this指向的是window，如果以方法的形式调用，this是调用方法的那个对象。 当以构造函数的形式调用时，this是新创建的实例化对象</li>
<li>返回值：普通函数可以有返回值，也可以没有返回值，但是构造函数没有返回值（不用写return），“new一个构造函数的流程” 会解释为什么不需要返回值</li>
</ol>
<h4 id="书写规范："><a href="#书写规范：" class="headerlink" title="书写规范："></a>书写规范：</h4><ol>
<li><p>使用构造函数创建某一类对象的时候，<strong>首字母要大写</strong>（与普通函数区别开）</p>
</li>
<li><p>构造函数内部使用了<strong>this</strong>关键字，代表了要生成的对象实例</p>
</li>
<li><p>构造函数生成对象的时候，必须要用new指令</p>
<p>举例：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//先自己创建一个构造函数</span>
<span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sing<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//再用自建的构造函数创建对象</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"双笙"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"林俊杰"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person1<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
person2<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h4 id="New一个构造函数的流程"><a href="#New一个构造函数的流程" class="headerlink" title="New一个构造函数的流程"></a>New一个构造函数的流程</h4><ol>
<li>开辟内存空间，在内存中创建新的空对象</li>
<li>让this指向这个新的空对象</li>
<li>执行构造函数里的代码，为这个新对象添加属性和方法</li>
<li>返回这个新对象（所以构造函数里面不需要return）</li>
</ol>
<h4 id="实例成员和动态成员"><a href="#实例成员和动态成员" class="headerlink" title="实例成员和动态成员"></a>实例成员和动态成员</h4><p><strong>成员</strong>:成员包括构造函数中的属性和方法</p>
<p>JS的构造函数中可以添加一些成员。添加方法有两种：①在构造函数本身上添加②在构造函数内部的this上添加</p>
<p><strong>实例成员</strong>：构造函数中用this添加的成员，实例成员只能通过实例化对象来访问。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//用this来添加实例成员，下面的name,age,sing都是实例成员</span>
<span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sing<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会唱歌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//实例成员只能通过实例化对象访问</span>
<span class="token comment" spellcheck="true">//正确访问方法：</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"双笙"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person1<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment" spellcheck="true">//错误访问方法（不可以通过构造函数来访问实例成员）</span>
Star<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>静态成员</strong>：在构造函数本身上面添加的成员，只能通过构造函数来访问</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"双笙"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//在构造函数本身上面添加成员</span>
Star<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"女"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//正确访问方法：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Star<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//错误访问方法：</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>概念：一个函数A作为另一个函数B的： 1.参数 2.返回值时，我们称函数B为高阶函数。简单来说，高阶函数是 <strong>对其他函数进行操作</strong> 的函数</p>
<p><strong>类型1</strong>：把其他函数作为参数（这个例子我现在还不太理解）</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是最后执行的函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>试着理解一下吧：</p>
<ol>
<li><code>callback &amp;&amp; callback();</code></li>
</ol>
<ul>
<li><p>callback是回调的意思（call back,回我电话），指当执行栈中的同步任务执行完毕后再执行回调的内容</p>
</li>
<li><p>callback也可以作为函数A的形参，所对应的实参一般是另一个函数B。即执行完了函数A的所有同步任务之后，会执行函数B</p>
</li>
<li><p>callback &amp;&amp; callback();要理解这句话，首先要理解&amp;&amp;逻辑与，先执行左边，如果左边为真，就会执行右边，如果左边为假，就不执行右边。所以A&amp;&amp;B就等价为<code>if(A) &#123;  B &#125;</code> ，因此<code>callback&amp;&amp;callback.call()</code> 就是 <code>if(callback) callback.call()</code>，即如果调用的时候传入了callback所对应的实参，就执行回调函数这个操作，如果没有传入所对应的参数（JS中函数的参数可以缺省），就不执行回调函数这个操作。</p>
</li>
</ul>
<ol start="2">
<li></li>
</ol>
<pre class="line-numbers language-js"><code class="language-js"><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是最后执行的函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>   虽然很优雅的写法，但我第一眼没看出来这是干啥的…..，写成下面这个形式好理解一些<br><code>fn1(10, 20,   function () &#123;console.log(&#39;我是最后执行的函数&#39;);&#125;  );</code><br>   这其实是fn1函数的调用，第三个参数是一个函数，它是作为callback的实参传过去的。</p>
<ol start="3">
<li><p>执行步骤</p>
<p>调用函数，先执行 fn1中的内容：<code>console.log(a + b);</code>，执行完毕后执行回调函数中的内容： <code>console.log(&#39;我是最后执行的函数&#39;);</code></p>
</li>
</ol>
<p><strong>类型二</strong>：把函数作为返回值（常结合闭包）</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//将函数作为返回值返回</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行 fn1() 之后，会得到一个返回值。这个返回值是函数</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="作用域："><a href="#作用域：" class="headerlink" title="作用域："></a>作用域：</h2><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><p>全局作用域和局部作用域</p>
<h3 id="访问关系："><a href="#访问关系：" class="headerlink" title="访问关系："></a>访问关系：</h3><ul>
<li>内部作用域可以访问到外部作用域的变量，但在外部作用域无法访问到内部作用域的变量</li>
<li>如果局部作用域和全局作用域的变量重名的话，在局部修改局部作用域的变量的值并不会改变全局作用域的变量的值。</li>
<li>JS的函数在查找变量时从自身函数定义开始，由”内“向”外“查找。如果内部函数定义了域外部函数重名的变量。则内部函数的变量将”屏蔽“外部函数的变量</li>
</ul>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p><strong>概念</strong>：指有权访问另一个函数作用域中变量的<strong>函数</strong>。 (closure)</p>
<p>由上面的定义我们知道，闭包是一种函数，如果A函数访问到了B函数内的变量，那么称函数B为闭包函数</p>
<h3 id="常规情况下："><a href="#常规情况下：" class="headerlink" title="常规情况下："></a>常规情况下：</h3><ul>
<li>函数内部可以访问全局变量和局部变量</li>
<li>函数外部只能访问全局变量，不能访问局部变量</li>
<li>当函数执行完毕后，本作用域内的局部变量会被销毁</li>
</ul>
<p>比如下面这样的代码：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义函数</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//调用函数</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印报错：Uncaught ReferenceError: a is not defined</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原因：a是函数内的局部变量，外部无法访问。当调用完foo函数之后，a变量已经被销毁了，所以a无法访问。</p>
<h3 id="闭包函数中："><a href="#闭包函数中：" class="headerlink" title="闭包函数中："></a>闭包函数中：</h3><p>我靠，从这个例子我才发现原来JS中函数可以嵌套定义？！！</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//在</span>
   <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 上面这个例子也可以这么写：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
     
     <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//fn1的返回值是一个函数</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用foo</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 输出结果：10</p>
<ul>
<li>函数fn2只能在fn1中调用，如果在fn1外面调用，将会报错</li>
<li>如果嵌套的内层函数使用了外层函数的变量或参数，即fn2中使用了fn1中的变量a，这个嵌套函数就形成了一个闭包，将fn1成为闭包函数</li>
<li>闭包能在它fn1执行完之后仍然能够访问fn1里的变量和参数</li>
</ul>
<h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><p>在上面那个例子中，本来fn1执行完毕后，它里面的变量a会立即销毁，但此时由于产生了闭包，fn1中的变量不会立即销毁，因为fn2函数还要继续调用变量a。</p>
<p>并且，在全局中通过foo()承接fn1的返回值,达到了在全局作用域中也可以访问局部作用域中的变量a</p>
<p>可见，<strong>闭包延伸了变量的作用范围</strong></p>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>解析器在调用函数时每次都会像函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象</p>
<p>这个对象我们称为函数执行的上下文对象</p>
<p>根据函数<strong>调用</strong>方式的不同，this会指向不同的对象</p>
<p>以函数形式调用，this的对象是window。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this.window"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接调用函数，this指向window全局</span>
等价于：window<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
输出结果：object Window
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以对象的方式调用，this指向调用方法的对象</p>
<pre class="line-numbers language-js"><code class="language-js"> 
 <span class="token comment" spellcheck="true">//把obj的一个属性设置成了函数func1</span>
 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
   sayname<span class="token punctuation">:</span>func1
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">sayname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以方法的形式调用函数</span>

输出结果：object Object
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总结：</p>
<ol>
<li><strong>普通函数，立即执行函数</strong>调用时，this的指向时window（全局）</li>
<li><strong>以方法的形式</strong>调用时，this指向调用方法的那个对象</li>
<li>以<strong>构造函数</strong>的形式调用时，this指向new出来的对象</li>
<li>以<strong>事件绑定函数</strong>的形式调用时，this指向绑定事件的对象</li>
<li>用<strong>call和apply</strong>调用时，this指向指定的（括号里面的第一个参数）那个对象</li>
</ol>
<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><h3 id="JS是单线程"><a href="#JS是单线程" class="headerlink" title="JS是单线程"></a>JS是单线程</h3><p>即同一个时间只能做一件事，比如某个DOM元素进行添加和删除的操作时，不能同时进行，应该先添加，之后再删除。</p>
<p>单线程意味着，所有任务都需要排队，即前一个任务结束，才会执行后一个任务，这样导致的问题是：JS执行的时间过长，页面渲染加载会有阻塞</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>知乎上一篇文章讲的很好，附上链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/326902537">10张图理解回调函数</a></p>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>前一个任务结束后再执行后一个任务，程序的执行顺序和任务的排列顺序是一致的。比如做饭的同步做法：烧水煮饭（10分钟之后），再去切菜，炒菜。</p>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>在做这件事情同时，还可以去处理其他事情。比如做饭的异步做法：在烧水的同时，利用这10分钟，去切菜，炒菜。</p>
<p>比如下列代码：</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果：1   2   3</p>
<p>因为 等待函数要等待2秒钟才执行，所以会先执行console.log(2);</p>
<p>可是如果把时间换成0，即：</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出结果依旧是： 1 2 3，为了解决这个问题，我们需要了解</p>
<h3 id="JS的执行机制"><a href="#JS的执行机制" class="headerlink" title="JS的执行机制"></a>JS的执行机制</h3><ol>
<li>先执行执行栈中的同步任务</li>
<li>如果遇到异步任务，将其放入任务队列中，先不执行</li>
<li>当执行栈中的所有同步任务执行完毕后，系统会根据次序读取任务队列中的异步任务，依次执行</li>
</ol>
<h3 id="同步任务："><a href="#同步任务：" class="headerlink" title="同步任务："></a>同步任务：</h3><p>同步任务都在主线程上执行，形成一个执行线</p>
<h3 id="异步任务："><a href="#异步任务：" class="headerlink" title="异步任务："></a>异步任务：</h3><p>异步任务是指不进入主线程，而进入“任务队列”，只有主线程任务执行完毕后，“任务队列”才开始通知主线程请求执行任务，该任务才会进入主线程执行。</p>
<p>异步任务是通过回调函数实现的。有以下三个种类：</p>
<ol>
<li>普通事件，如onclick,resize等</li>
<li>资源加载，如load，error等</li>
<li>定时器，如setInterval,setTimeout等</li>
</ol>
<h2 id="JS和C语言的不同之处："><a href="#JS和C语言的不同之处：" class="headerlink" title="JS和C语言的不同之处："></a>JS和C语言的不同之处：</h2><ol>
<li><p>JS中声明变量用的是let或者var,它是一种弱类型语言（动态语言），不用声明变量的类型，并且变量的数据类型是可以变化的，比如：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span><span class="token string">"zhiruo"</span><span class="token punctuation">;</span>
name <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里强制将字符串类型转化为了数值类型</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>并且，JS中变量可以不用声明直接赋值  </p>
</li>
<li><p>JS中没有字符类型，只有字符串类型，并且字符串既可以用双引号引起来，也可以用单引号引起来</p>
</li>
<li><p>JS中字符串的长度用的是<code>str.length;</code>而C++中字符串的长度用的是<code>str.length()</code></p>
</li>
<li><p>+号</p>
</li>
</ol>
<p>在C语言中，+号就是加号，而在JS中”+“有可能是加号（数值相加），也有可能是连字符（字符串拼接），类似C++中的运算符重载。要区分清楚以下几种情况：</p>
<pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我"</span> <span class="token operator">+</span> <span class="token string">"爱"</span> <span class="token operator">+</span> <span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连字符，把三个独立的汉字，连接在一起了</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我+爱+你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//原样输出</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//输出6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">+</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">-</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出：</p>
<pre><code>我爱你
我+爱+你
6
53
2
</code></pre>
<p>总结：</p>
<ul>
<li>如果加号两边都是Number类型，那么就是数字相加，否则，就是连字符相加</li>
<li>如果符号是减号，除号，乘号，取模运算符，计算机会帮忙进行隐式转换，即5-’3‘的运算结果是2</li>
</ul>
<ol start="5">
<li><p>JS中的函数可以嵌套定义,c语言不可以</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//fn1中嵌套定义了fn2</span>
    <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//调用fn2</span>
    <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>函数fn2只能在fn1中调用，如果在fn1外面调用，将会报错</li>
<li>如果嵌套的内层函数使用了外层函数的变量或参数，即fn2中使用了fn1中的变量a，这个嵌套函数就形成了一个闭包</li>
<li>闭包能在它fn1执行完之后仍然能够访问fn1里的变量和参数</li>
</ul>
</li>
<li><p>JS是<strong>基于对象（object-based）的语言</strong>。 但是，它又不是一种真正的面向对象编程语言，因为它的语法中没有C++中的class（类）（在es6以前）。在C++中，“类”就是对象的模板，对象就是“类”的实例。JS不是基于类的，二十基于构造函数和原型链的。</p>
<p>即：JS使用构造函数来作为对象的模板，构造函数就是专门生成实例对象的函数</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>flex布局</title>
    <url>/2022/03/23/flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="布局原理"><a href="#布局原理" class="headerlink" title="布局原理"></a>布局原理</h2><p>flex是flexible Box 的缩写，是弹性布局的意思。</p>
<ul>
<li>块级元素和行内元素可以指定为flex布局</li>
<li>将父元素设置为flex布局后，子元素的浮动，清除浮动，vertical-align的属性都会失效</li>
<li>父元素称为“容器”，子元素称为“项目”，子元素可以横向排列也可以纵向排列</li>
</ul>
<p>通过给父元素增加flex属性来控制子元素的位置和排列方式</p>
<p><strong>注意</strong>：</p>
<p>以下所有属性的演示都是基于以下HTML</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector">div</span><span class="token punctuation">{</span>
        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> 
        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">800</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#74c0fc</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token selector">div span</span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#1c7ed6</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>初始界面：</strong></p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323213110551.png" alt="image-20220323213110551"></p>
<ul>
<li><p>设置主轴方向：flex-direction</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>主轴方向</th>
</tr>
</thead>
<tbody><tr>
<td>row</td>
<td>系统<strong>默认值</strong>，从左到右</td>
</tr>
<tr>
<td>row-reverse</td>
<td>从右到左</td>
</tr>
<tr>
<td>column</td>
<td>从上到下</td>
</tr>
<tr>
<td>column-reverse</td>
<td>从下到上</td>
</tr>
</tbody></table>
</li>
<li><p>设置主轴上子元素的排列方式: justify-content </p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>子元素的排列方式</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>系统<strong>默认值</strong>，从头开始，如果主轴为x轴，则从左到右</td>
</tr>
<tr>
<td>flex-end</td>
<td>从尾部开始排列</td>
</tr>
<tr>
<td>center</td>
<td>从主轴居中对齐（若主轴是x轴则元素水平居中）</td>
</tr>
<tr>
<td>space-around</td>
<td>平分剩余空间</td>
</tr>
<tr>
<td>space-between</td>
<td>两边贴边，再平分剩余空间</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="父项属性"><a href="#父项属性" class="headerlink" title="父项属性"></a>父项属性</h2><h3 id="设置主轴的方向：flex-direction"><a href="#设置主轴的方向：flex-direction" class="headerlink" title="设置主轴的方向：flex-direction"></a>设置主轴的方向：flex-direction</h3><p>子元素跟着主轴来排列</p>
<p><code>flex-direction:row; </code> 默认，子元素从左到右排列</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323213728101.png" alt="image-20220323213728101"></p>
<p><code>flex-direction:row-reverse;</code>   子元素从右到左排列</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323213753046.png" alt="image-20220323213753046"></p>
<p><code>flex-direction:column; </code> 子元素从上到下排列</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323213813801.png" alt="image-20220323213813801"><code>flex-direction:column-reverse；</code>子元素从下向上排列</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323213905360.png" alt="image-20220323213905360"></p>
<h3 id="设置主轴上子元素的排列方式-justify-content"><a href="#设置主轴上子元素的排列方式-justify-content" class="headerlink" title="设置主轴上子元素的排列方式: justify-content"></a>设置主轴上子元素的排列方式: justify-content</h3><p><code>justify-content ：flex-start</code></p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323214852302.png" alt="image-20220323214852302"><code>justify-content ：flex-end</code></p>
<p>这里注意区分与<code>flex-direction:row-reverse;</code>的区别，这个的元素依旧是从左向右的方向的，只不过靠右紧贴</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323215031321.png" alt="image-20220323215031321"></p>
<p><code>justify-content :center</code></p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323215241090.png" alt="image-20220323215241090"></p>
<p><code>justify-content ：space-around</code></p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323215351121.png" alt="image-20220323215351121"></p>
<p><code>justify-content ：space-between</code></p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323215414603.png" alt="image-20220323215414603"></p>
<h3 id="设置侧轴上的子元素的排列方式：align-items（单行）"><a href="#设置侧轴上的子元素的排列方式：align-items（单行）" class="headerlink" title="设置侧轴上的子元素的排列方式：align-items（单行）"></a>设置侧轴上的子元素的排列方式：align-items（单行）</h3><p><strong>注意</strong>，该属性只能在子元素只有单行的时候才可以</p>
<p>控制子元素在侧轴（默认是y轴）上的排列方式</p>
<p><code>align-items:flex-start</code>:默认值，从上到下排列</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323220839174.png" alt="image-20220323220839174"></p>
<p><code>align-items:center</code>:居中</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323221003410.png" alt="image-20220323221003410"></p>
<p><code>align-items:flex-end</code>:从下到上排列</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323221028283.png" alt="image-20220323221028283"></p>
<h3 id="设置侧轴上的子元素的排列方式：align-content（多行）"><a href="#设置侧轴上的子元素的排列方式：align-content（多行）" class="headerlink" title="设置侧轴上的子元素的排列方式：align-content（多行）"></a>设置侧轴上的子元素的排列方式：align-content（多行）</h3><p><strong>注意</strong>：该属性只有在子元素换行的时候才可以使用，即使用该属性首先要<code>flex-wrap:wrap</code>.</p>
<p><code>align-content:flex-start;</code>默认值，从侧轴的头部开始排列</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323222102413.png" alt="image-20220323222102413"></p>
<p><code>align-content:center;</code>默认值，从侧轴的中间显示</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323222144296.png" alt="image-20220323222144296"></p>
<p><code>align-content:space-around;</code>子元素在侧轴评分剩余元素</p>
<p><code>align-content:space-between;</code>子元素在侧轴先分布在两头，在平分剩余空间</p>
<p><code>align-content:stretch</code>:子元素不设置高度，子严肃的高度评分父元素高度</p>
<h3 id="设置子元素是否换行-：flex-wrap"><a href="#设置子元素是否换行-：flex-wrap" class="headerlink" title="设置子元素是否换行 ：flex-wrap"></a>设置子元素是否换行 ：flex-wrap</h3><p>在演示这个属性，为了清楚，我给子元素增加了左外边距</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323215951913.png" alt="image-20220323215951913"></p>
<p>我又增加了3个子元素</p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323220019157.png" alt="image-20220323220019157"></p>
<p><code>flex-wrap:nowrap</code>(默认不换行，如果父元素一行内子元素放不下，会自动缩小子元素的宽度)</p>
<p>可以发现，增加了子元素之后一行明显放不下了，所以系统默认将子元素的宽度缩小了。</p>
<p><code>flex-wrap:wrap</code></p>
<p><img src="/../img/flex%E5%B8%83%E5%B1%80/image-20220323220132789.png" alt="image-20220323220132789"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/02/25/hello-world/</url>
    <content><![CDATA[<p>这里芷若</p>
<p>无论做什么事都喜欢和自己较劲</p>
<p>身处这个快节奏的时代，强烈感觉自己的语言表达水平在不断的退化</p>
<p>趁着寒假有时间 也是学校的一个活动 自己便搭建了这个博客</p>
<p>以后不定期的会更新一些生活小记和学习笔记</p>
<p>欢迎你的到访~</p>
]]></content>
  </entry>
  <entry>
    <title>也茫然 还好有勇敢</title>
    <url>/2022/02/26/%E4%B9%9F%E8%8C%AB%E7%84%B6-%E8%BF%98%E5%A5%BD%E6%9C%89%E5%8B%87%E6%95%A2/</url>
    <content><![CDATA[<h3 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h3><p>　　一直都是一个只有三分钟热度的人</p>
<p>　　对所有好玩的事情都投以极大的热情，一刻也等待不了，但一旦细究其实现的方法和难度，便会败下阵来。</p>
<p>　　所以，这个博客的诞生对我来说简直就是一个奇迹。进入计算机专业，有时查找资料时无意访问到别人的博客，心生羡慕，便立即涌现出自己也制作一个的冲动，可自己上手，才发现原来绚丽的页面的搭建，不仅需要学习HTML，CSS，还需要学习JavaScript，命令行操作。</p>
<p>　　在蓝图的孵化器的项目中，趁着寒假的闲暇时间，我才慢慢的学习，搭建了这个博客，并自制了2048小游戏。当完成了之后回望自己的学习历程，不禁感慨万千，故写下这篇小记。　　</p>
<hr>
<h3 id="贰"><a href="#贰" class="headerlink" title="贰"></a>贰</h3><p>　　都说计算机专业是活到老学到老，可在高中都是老师手把手教授，什么做题方法、知识串联，老师都不厌其烦的进行讲解，做这次任务，才明白，我总要学会，自己去面对所有的难。</p>
<p>　　还没有进入大学时，总是想象着，课堂上教授的谈笑风生，一切的知识都是那么新奇而又有趣，可当我步入校园，才发现理论和现实的鸿沟。上课听的云里雾里，作业也不太会做，课后又得自己找教程再次学习，刚开始的时候，我特别不适应这样超负荷的生活，一想到自己捉襟见肘的生活，眼泪就止不住地往下掉（真是个爱哭鬼）。</p>
<p>　　两周下来，我有些开窍。我以前曾无比渴望在受伤难过时、孤独无依时，得到其他人的回应、理解和陪伴。于是一emo就打开聊天框寻求安慰。可朋友能给我一时的安慰和鼓励，但这毕竟都是有限的，大家都有自己的事情要做，怎么能整天麻烦别人。我总要面对没人帮忙、没人支持、没人嘘寒问暖的日子，最终解决问题还是要靠自己。每个人的生活，无论酸甜苦辣，都要自己去品尝。每个人的道路，无论顺遂还是曲折，都要自己去行走。</p>
<p>　　后来，我渐渐找到了平衡的方法，课前要先预习，这样上课就可以跟上老师的步伐，大学，真就是大不了自己学，累的时候就少说闲话、少想乱七八糟的事，困的时候就早睡不熬夜，心里感觉苦了，赶紧拿颗糖塞嘴里。我不断给自己打气说，小周小周冲冲冲。</p>
<p>　　我曾害怕面对一切艰难险阻，直到生活给了我一道道坎，才教会了我如何在挫折和痛苦中一步一步变强。　　</p>
<hr>
<h3 id="叁"><a href="#叁" class="headerlink" title="叁"></a>叁</h3><p>　　蓝图的第一个任务就是部署自己的网页，并自学HTML，CSS，JavaScript制作2048小游戏。前一周，我兴冲冲的打开HTML和CSS的教程，心想：不过如此嘛。可拧巴又好强的我不想只部署一个网站，我想把网站做成博客，把小游戏嵌到里面。可真正到了部署自己的博客的时候才发现，原来很多事情并不是在界面化的界面做的，而是要涉及到那个黑框框样子的命令行，里面复杂的指令和只要随便输错一点点就会乱七八糟弹出来一大堆不认识的英文，真是让我这个从未接触过命令行的小白头大。</p>
<p>　　在网上大海捞针般的搜索云开发和静态网站托管的知识，了解其中的机理和命令行的内容，我坐在电脑前就忘了时间。</p>
<p>　　开始是，出了错误但不知道错哪了，只能删除自己之前已经部署了大部分的网站，推到重来，有放不下的吧，毕竟是自己费了好大功夫才做好的，可如果不重来，依照现在自己这个水平也修不好它呀（有点对不起那些“胎死腹中”的网页哈哈哈）。</p>
<p>　　当时就想起了曾经在书上看到的一个故事：一个人上火车时不小心掉了一只新鞋，等火车开动了他才发现。这时，他毫不犹豫地把另一只鞋也从窗口扔了出去。其他乘客很不理解，他解释说，那双鞋不论多么昂贵，对他而言都已经失去作用了，而捡到这双鞋的人就不同了。所以，与其留一只对自己无用的鞋，倒不如选择放弃，或许会成全另一个人呢？</p>
<p>　　一次次的推倒重来，在不断的试错中，我的内心独白常常是：</p>
<p>　　“怎么又错了！这次又是哪里不对”</p>
<p>　　“为什么我本地预览出来都在好着呢，推送到终端就不行了”</p>
<p>　　”原来我找了二十分钟的错误是冒号后少了一个空格 ！“</p>
<p>　　可渐渐的，我的命令敲得越来越顺了，我的操作也越来越熟悉了，面对错误，我可以不用推到重来（因为我已经能大概看懂命令行的提示了），甚至英语都有所进步（命令行里都是英文，教程也好多都是英文）。</p>
<p>　　原来啊，只要努力坚持下去，真的有可能看到光明。</p>
<p>　　原来啊，如果我只想看到结果再出发，那我将永远不会知道结果在哪儿。</p>
<hr>
<h3 id="肆"><a href="#肆" class="headerlink" title="肆"></a>肆</h3><p>　　又又又坐在电脑前捣鼓了一下午，乱七八糟的命令行错误真是让人头大，搭建一个网站真的对我这种小白真的太不容易了。回忆下来，这两周我竟然捣鼓了这么多东西，先在云开发中先搭建了个博客，又因为不好访问把把博客迁移到了GitHub，顺便学会了搭梯子（感谢lyx的北大梯子🙆‍♀️），但因为GitHub网页每次更新不及时，我又买服务器，买域名，给域名备案，给服务器备案，申请SSL证书，买COS资源包，部署SSL证书，在云服务器用Linux命令行指示。这一路对我来说很艰难，虽然不属于算法题那种烧脑类型的，但里面涉及到的全都是我从未涉足的知识，终于终于，终于部署完成了！真的整个人都瘫在沙发上。天生拧巴的人终于和自己硬刚了一次。</p>
<p>　　最后，以一句我很喜欢的话结尾吧。</p>
<blockquote>
<p>我与我周旋久，宁作我。</p>
</blockquote>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>一些好用的网站</title>
    <url>/2022/02/28/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>下面是自己最近冲浪看到的一些很好的网站，分享给你：</p>
<ul>
<li><p>可以提高图片分辨率的网站：</p>
<p><a href="https://bigjpg.com/">https://bigjpg.com/</a></p>
</li>
<li><p>超喜欢的练习打字网站（小白的我从练习打字开始）</p>
<p><a href="https://www.typing.com/">https://www.typing.com/</a></p>
</li>
<li><p>网道，简洁舒适的编程教程（阮一峰前辈yyds)：</p>
<p><a href="https://wangdoc.com/">https://wangdoc.com/</a></p>
</li>
<li><p>STL超全工具书，方便查询：</p>
<p><a href="https://blog.csdn.net/weixin_45761327/article/details/107561697">https://blog.csdn.net/weixin_45761327/article/details/107561697</a></p>
</li>
<li><p>adobe全家桶（2020年的）：</p>
<p><a href="https://www.yuque.com/books/share/205ec53c-5013-4bdb-ad02-ac96cc761203/nnun78">https://www.yuque.com/books/share/205ec53c-5013-4bdb-ad02-ac96cc761203/nnun78</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝与浅拷贝</title>
    <url>/2022/03/26/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h2 id="两种数据类型："><a href="#两种数据类型：" class="headerlink" title="两种数据类型："></a>两种数据类型：</h2><h3 id="基础类型：数值、字符串、布尔、null、undefined"><a href="#基础类型：数值、字符串、布尔、null、undefined" class="headerlink" title="基础类型：数值、字符串、布尔、null、undefined"></a>基础类型：数值、字符串、布尔、null、undefined</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//100</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>基础类型，遇到 &#x3D; 时，就是值的复制，存储地方在栈中</p>
<p><img src="/../img/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/image-20220326185934901.png" alt="image-20220326185934901"></p>
<h3 id="引用类型：统称为Object类型，细分有Object类型，Array类型，Date类型，Function类型等。"><a href="#引用类型：统称为Object类型，细分有Object类型，Array类型，Date类型，Function类型等。" class="headerlink" title="引用类型：统称为Object类型，细分有Object类型，Array类型，Date类型，Function类型等。"></a>引用类型：统称为Object类型，细分有Object类型，Array类型，Date类型，Function类型等。</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>
   a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对象类型，遇到 &#x3D; 时，是内存地址的复制，所以改变obj2的值，obj1也会跟着该表</p>
<p><img src="/../img/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/image-20220326203505155.png" alt="image-20220326203505155"></p>
<h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><p><strong>浅拷贝</strong>：复制了地址，原来的变量和新建的变量指向了堆区的同一处地方，彼此会相互影响</p>
<p><strong>深拷贝</strong>：在堆区中重新分配内存，原来的变量和新的变量指向不同的地址，虽然值现在相同，但是互不影响</p>
<h4 id="浅拷贝的实现方法："><a href="#浅拷贝的实现方法：" class="headerlink" title="浅拷贝的实现方法："></a>浅拷贝的实现方法：</h4><ol>
<li><p>对象之间直接用等号赋值</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj1<span class="token operator">=</span><span class="token punctuation">{</span>
   a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>以下方法可以处理一层的深拷贝，但是如果对象里又嵌套了对象，则内层的对象依旧只复制了地址（浅拷贝）</p>
<ul>
<li>Object.assign()</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> hd <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span><span class="token string">"小周"</span><span class="token punctuation">,</span>
  age<span class="token punctuation">:</span><span class="token number">19</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>hd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>展开表达式</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> hd <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span><span class="token string">"小周"</span><span class="token punctuation">,</span>
  age<span class="token punctuation">:</span><span class="token number">19</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>hd<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>用for循环进行复制</li>
</ul>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> hd <span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span><span class="token string">"小周"</span><span class="token punctuation">,</span>
        age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> hd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> hd<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h4 id="深拷贝的实现方法："><a href="#深拷贝的实现方法：" class="headerlink" title="深拷贝的实现方法："></a>深拷贝的实现方法：</h4><ol>
<li><p>手动进行复制。</p>
</li>
<li><p>将js对象先转化成json中的字符串，然后再转成js，就可以实现深拷贝</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> js <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可也将两行代码合并成一行：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>优点：简单方便</p>
<p>缺点：对象中的函数和正则表达式无法拷贝</p>
</li>
<li><p>递归</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//遍历obj的每一个成员，赋值给newObj</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> keys <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//数组，引用类型</span>
            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">deepClone</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//对象：引用类型</span>
            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">deepClone</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//值类型</span>
            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>离散数学の笔记</title>
    <url>/2022/03/02/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="一些英译中"><a href="#一些英译中" class="headerlink" title="一些英译中"></a>一些英译中</h3><p>compound proposition :复合命题</p>
<p>negation of statements: 陈述句的否定</p>
<p>De Morgan’s laws :德摩根定律</p>
<p>truth tables：真值表</p>
<p> absorption laws：吸收律</p>
<p>tautology：重言式，永真式</p>
<p>logical operator：逻辑运算符</p>
<h3 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h3><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h5><ul>
<li>命题，是指具有唯一真值的陈述句</li>
<li>疑问句、祈使句、感叹句，因为无法判断真假，所以都不是命题</li>
<li>真用1或T来表示，假用0或F来表示，因为命题只有这两种真值，所以这种逻辑成为二值逻辑</li>
</ul>
<h5 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h5><ul>
<li>1+101&#x3D;110  在二进制下为真，在十进制下为假，真值不唯一，所以不是命题</li>
<li>别的星球上有生物  虽然现在不确定，但是这个问题是有客观答案的 ，并不以你我的意志而转移，所以是命题</li>
<li>全体立正！ 祈使句不是命题</li>
<li>天气多好啊！ 感叹句不是命题</li>
</ul>
<p><strong>注意</strong>：一个陈述句暂时不能确定真值，但到了一定时间就可以确定，与一个陈述句的真值不能唯一确定是不一样的</p>
<ul>
<li>x&gt;3  　x的取值范围不同，本句话的真假是不一样的，所以不是命题</li>
<li>2190年人类将移居火星   虽然现在无法确定，但是到了2190年就可以唯一确定本句话的真假，所以是命题</li>
</ul>
<h5 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h5><ol>
<li>原子命题：一个陈述句再也不能分解成更为简单的语句，则由它构成的命题成为原子命题</li>
<li>复合命题：由原子命题，命题联结词和圆括号组成</li>
</ol>
<h3 id="命题联结词"><a href="#命题联结词" class="headerlink" title="命题联结词"></a>命题联结词</h3><ol>
<li><p>否定联结词： ┐</p>
<p>┐p和p的真假是相反的</p>
</li>
<li><p>合取联结词：∧</p>
<p>p∧Q读作“P与Q”或者“P且Q”  </p>
<p>当且仅当P和Q同为真，命题P∧Q的真值才为真</p>
</li>
<li><p>析取联结词：∨</p>
<p>P∨Q读作“P或Q”</p>
<p>只要P、Q中有一个为真，命题P∨Q就为真</p>
</li>
<li><p>条件(蕴含)联结词：→</p>
<p>P→Q读作P条件Q，或者“若P则Q” “P仅当Q” “P是Q的充分条件”</p>
<p>只有当P的真值为真而Q的真值为假时，命题P→Q的真值为假，其余都为真</p>
<p>例子：</p>
<p>①只要天下雨，我就回家</p>
<p>②只有天下雨，我才回家</p>
<p>③除非天下雨，否则我不回家</p>
<p>④仅当天下雨，我才回家</p>
<p>解析：①强调的是如果天下雨了，那我就回家，②③④强调的是如果我回家了，那一定是天下雨了。 所以①可符号化为P→Q ，②③④可符号化为Q→P</p>
</li>
<li><p>双条件联结词：↔</p>
<p>P↔Q读作“P当且仅当Q”，只有两者同时为真或同时为假时，P↔Q才为真</p>
</li>
<li><p>异或（双条件非）联结词：⊕</p>
<p>当且仅当P和Q的真值不相同时，P⊕Q为T</p>
</li>
<li><p>与非联结词：↑</p>
<p>P↑Q读作“P合取非Q” 或者“P与非Q”，当且仅当P和Q均为T时，P↑Q为F，否则P↑Q为T。</p>
</li>
<li><p>或非联结词：↓</p>
<p>P↓Q读作“P析取非Q”或者“P或非Q”，当且仅当P和Q均为F时，P↓Q为T，否则P↓Q为F</p>
</li>
</ol>
<h3 id="命题公式"><a href="#命题公式" class="headerlink" title="命题公式"></a>命题公式</h3><p>命题公式由原子命题，命题联结词，圆括号构成，但是并不是由这三类符号组成的的任何符号串都能成为命题公式 ，合理的命题公式叫做合式公式</p>
<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>合式公式是由下列规则生成的公式：</p>
<ol>
<li>单个原子公式是合式公式</li>
<li>若A是一个合式公式，那么（ ┐A）也是一个合式公式</li>
<li>若A、B是合式公式，则（A^B）、（A∨B）、（A→B）和（A↔B）都是合式公式</li>
<li>只有有限次的使用1，2和3生成的公式才是合式公式</li>
</ol>
<h5 id="约定："><a href="#约定：" class="headerlink" title="约定："></a>约定：</h5><ol>
<li><p>联结词的优先级从高到低是： ┐、∧、∨、→、↔</p>
</li>
<li><p>相同的联结词按从左到右的次序计算时，圆括号可以省略</p>
</li>
<li><p>最外层的圆括号也可以省略</p>
</li>
</ol>
<h3 id="命题的翻译和符号化"><a href="#命题的翻译和符号化" class="headerlink" title="命题的翻译和符号化"></a>命题的翻译和符号化</h3><h5 id="将自然语言符号化"><a href="#将自然语言符号化" class="headerlink" title="将自然语言符号化"></a>将自然语言符号化</h5><ol>
<li><p>小王边走边唱</p>
<p>P：小王走路  Q：小王唱歌  </p>
<p>&#x3D;&gt; P^Q </p>
</li>
<li><p>如果今天不下雨并且不刮风，我就去书店</p>
<p>P：今天下雨（不能设位今天不下雨，因为“今天不下雨”不是原子命题）</p>
<p>Q：今天刮风</p>
<p>R：我去书店 </p>
<p>&#x3D;&gt;（┐P∧ ┐Q）→R</p>
</li>
<li><p>小刚要么在学习，要么在玩游戏</p>
<p>P：小刚在学习</p>
<p>Q：小刚在玩游戏</p>
<p>&#x3D;&gt; (P∧ ┐Q)∨(┐P∧ Q)  </p>
<p>即：小刚在学习且没有玩游戏，或者小刚在玩游戏且没有学习</p>
</li>
<li><p>除非a能被2整除，否则a不能被4整除</p>
<p>P：a能被2整除</p>
<p>Q：a能被4整除</p>
<p>&#x3D;&gt;  ┐P →  ┐Q   即：a如果不能被2整除，则a不能被4整除</p>
<p>或者Q→P   即：如果a能被4整除，那么a一定可以被2整除</p>
</li>
<li><p>如果天不下雨，我们就去打篮球，除非班上有会</p>
<p>P：天下雨</p>
<p>Q：我们去打篮球</p>
<p>R：今天班上有会</p>
<p>&#x3D;&gt;（┐P∧ ┐R）→Q   即：我们打篮球的条件必须是天不下雨且班上没有会</p>
<p>或者：┐R→(┐P→Q）即：如果没有会，并且没有下雨，我们就去打篮球</p>
</li>
<li><p>离散数学无用且枯燥无味是不对的</p>
<p>P：离散数学是有用的<br>Q：离散数学是枯燥无味的</p>
<p>¬ ( ¬ P ∧ Q ) </p>
</li>
<li><p>如果校长和小王都不去，则小李去</p>
<p>P：小张去<br>Q：小王去<br>R：小李去</p>
<p>( ¬ P ∧ ¬ Q ) → R </p>
</li>
<li><p>p，q不能同时取,即只能取一个</p>
<p>(P∧ ┐Q)∨(┐P∧ Q) </p>
</li>
<li><p>若P去, 则Q不能去</p>
<p>P →  ┐Q</p>
</li>
<li><p>C和D要么都有，要么都没有</p>
</li>
</ol>
<p>   (C∧D)∨(┐C∧ ┐D)</p>
<ol start="11">
<li><p>股票P和Q中必然有一种或两种要抛出</p>
<p>P∨Q</p>
</li>
</ol>
<h3 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h3><p>含有n个原子命题的命题公式所对应的真值共有2^n中情况</p>
<h3 id="等价"><a href="#等价" class="headerlink" title="等价"></a>等价</h3><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>给定两个命题公式，若对于其中任意一组指派而言，A和B的真值都相同，则称A和B是等价的</p>
<p>可以通过等值关系进行化简得到两个式子等值，也可以通过真值表来判断等值</p>
<h5 id="基本等值式"><a href="#基本等值式" class="headerlink" title="基本等值式"></a>基本等值式</h5><ol>
<li><p>﹁ ( ﹁ G ) &#x3D; G<br>（双重否定律）</p>
</li>
<li><p>G ∧ G &#x3D; G   G ∨ G &#x3D; G  <strong>(a*a&#x3D;a  a+a&#x3D;a)</strong><br>（幂等律）</p>
</li>
<li><p>G ∨ H &#x3D; H ∨ G   <strong>a+b&#x3D;b+a</strong><br>G ∧ H &#x3D; H ∧ G  ab&#x3D;ba<br>（交换律）</p>
</li>
<li><p>G ∨ ( H ∨ S ) &#x3D; ( G ∨ H ) ∨ S  <strong>a+(b+c)&#x3D;(a+b)+c</strong><br>G ∧ ( H ∧ S ) &#x3D; ( G ∧ H ) ∧ S  *<em>a</em>(b <em>c)&#x3D;(a * b)<em>c</em></em><br>（结合律）</p>
</li>
<li><p>G ∨ ( H ∧ S ) &#x3D; ( G ∨ H ) ∧ ( G ∨ S )   a+bc&#x3D;(a+b)(a+c)<br>G ∧ ( H ∨ S ) &#x3D; ( G ∧ H ) ∨ ( G ∧ S )  <strong>a(b+c)&#x3D;ab+ac</strong><br>（分配律）</p>
</li>
<li><p>﹁ ( G ∧ H ) &#x3D; ﹁ G ∨ ﹁ H </p>
<p>﹁ ( G ∨ H ) &#x3D; ﹁ G ∧ ﹁ H </p>
<p> （去掉括号后合取变析取，析取变合取）<br>（德摩根律）</p>
</li>
<li><p>G ∨ ( G ∧ H ) &#x3D; G  <strong>a+ab&#x3D;a</strong></p>
<p>G ∧ ( G ∨ H ) &#x3D; G  <em><em>a</em>(a+b)&#x3D;a</em>*<br>（吸收律）</p>
</li>
<li><p>G ∨ 1 &#x3D; 1<br>G ∧ 0 &#x3D; 0<br>（零律）</p>
</li>
<li><p>G ∧ 1 &#x3D; G</p>
<p>G ∨ 0 &#x3D; G</p>
<p>（同一律）</p>
</li>
<li><p>G ∧﹁ G &#x3D; 0<br>G V ﹁ G &#x3D; 1<br>（否定律）</p>
</li>
<li><p>G → H &#x3D; ﹁ G ∨ H<br>（条件转化律）</p>
</li>
<li><p>G ↔ H &#x3D; ( G → H ) ∧ ( H → G ) &#x3D; ( ﹁ G ∨ H ) ∧ ( ﹁ H ∨ G )<br>（双条件传化律）</p>
</li>
<li><p>G → H &#x3D; ﹁ H → ﹁ G<br>（假言易位）</p>
</li>
<li><p>G ↔ H &#x3D; ﹁ G ↔ ﹁ H<br>（等价否定等式）</p>
</li>
</ol>
<h5 id="等价置换定理"><a href="#等价置换定理" class="headerlink" title="等价置换定理"></a>等价置换定理</h5><p>如果X是合式公式A的一部分，且X本身也是一个合式公式，则称X为合式公式A的子公式</p>
<p>设X是合式公式A的子公式，若X&#x3D;Y。如果将A中用的X用Y来置换，所得到的公式B与公式A等价。即A&#x3D;B</p>
<h3 id="重言式-永真式-与蕴含式-永假式"><a href="#重言式-永真式-与蕴含式-永假式" class="headerlink" title="重言式(永真式)与蕴含式(永假式)"></a>重言式(永真式)与蕴含式(永假式)</h3><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>对于某个命题公式，如果其在分量的任何指派的指派下的真值均为T，则称该命题公式为<strong>重言式</strong>或<strong>永真式</strong>。</p>
<p>对于某个命题公式，如果其在分量的任何指派的指派下的真值均为F，则称该命题公式为<strong>矛盾式</strong>或<strong>永假式</strong>。</p>
<p>如果某个命题不是矛盾式，则称该命题为<strong>可满足式</strong></p>
<p><strong>蕴含式</strong>：当且仅当P→Q是重言式时，我们称“P蕴含Q“，并记作P&#x3D;&gt;Q</p>
<p>要证明P&#x3D;&gt;Q,只需证明P→Q,或者证明﹁Q→﹁P</p>
<h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p>范式是析取范式与合取范式的总称。</p>
<h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><ul>
<li>命题变元或命题变元的否定称为<strong>文字</strong>。 P，﹁P，Q，﹁Q</li>
<li><em>有限个</em>文字的析取称为<strong>简单析取式</strong>（或<strong>子句</strong>）。 P(退化的析取式，只有一个文字），﹁P（退化的析取式）， P ∨ ﹁Q（2个文字）</li>
<li><em>有限个</em>文字的合取称为<strong>简单合取式</strong>（或<strong>短语</strong>）。 P，﹁P，P ∧ ﹁Q </li>
<li>单个的文字既是简单析取式，也是简单合取式</li>
<li>P与﹁P称为<strong>互补对</strong></li>
<li><em>有限个</em>简单合取式（短语）的析取式称为<strong>析取范式</strong>  如  ( G ∧ H ) ∨ ( G ∧ S )，又如 P ∨ ﹁Q ,P ,﹁P。<strong>内部合取，外部析取</strong></li>
<li><em>有限个</em>简单析取式（短语）的合取式称为<strong>合取范式</strong>，如（P∨ H ) ∧ ( ﹁H ∨Q）,又如 P ∧ ﹁Q ,P ,﹁P 。<strong>内部析取，外部合取</strong></li>
</ul>
<p><strong>注意1：p∧q∧r既是析取范式，也是合取范式</strong>。</p>
<p><strong>原因</strong>：因为这个式子是有限个文字的合取，所以他是合取范式，也是简单合取式。而根据析取范式的定义是有限个简单合取式的析取式，这个有限个可以取1个，即一个简单合取式也是析取式</p>
<h5 id="注意2："><a href="#注意2：" class="headerlink" title="注意2："></a>注意2：</h5><p>析取范式、合取范式仅含联结词集{﹁，∧，∨}，且否定联结词仅出现在命题变元之前</p>
<h5 id="范式存在定理"><a href="#范式存在定理" class="headerlink" title="范式存在定理"></a>范式存在定理</h5><p>对于任意公式，都存在与其等价的析取范式和合取范式，且范式不唯一</p>
<h5 id="转化方法："><a href="#转化方法：" class="headerlink" title="转化方法："></a>转化方法：</h5><ol>
<li><p>将公式中的↔，→ 用联结词﹁，∧，∨来取代（<strong>否定也是联结词</strong>）</p>
<ul>
<li><p>蕴含式：G → H &#x3D; ﹁ G ∨ H</p>
</li>
<li><p>双条件传化律：G ↔ H &#x3D; ( G → H ) ∧ ( H → G )</p>
</li>
</ul>
<p>利用蕴含式再次转化： &#x3D; ( ﹁ G ∨ H ) ∧ ( ﹁ H ∨ G )</p>
</li>
<li><p>将否定联结词内移(德摩根律)到各个命题变元的前端，并消去否定号（双重否定律）</p>
<ul>
<li><p>双重否定律：﹁(﹁ G)&#x3D;G</p>
</li>
<li><p>德摩根律：﹁ ( G ∧ H ) &#x3D; ﹁ G ∨ ﹁ H </p>
<p>​                  ﹁ ( G ∨  H ) &#x3D; ﹁ G ∧﹁ H </p>
<p>（去掉括号后析取变合取，合取变析取）</p>
</li>
</ul>
</li>
<li><p>利用分配律，将公式化成一些合取式的析取，或化成一些析取式的合取：</p>
<ul>
<li>分配律：G ∨ ( H ∧ S ) &#x3D; ( G ∨ H ) ∧ ( G ∨ S ) （合取范式）<br>          G ∧ ( H ∨ S ) &#x3D; ( G ∧ H ) ∨ ( G ∧ S ) （析取范式）</li>
</ul>
</li>
</ol>
<h5 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h5><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323084335490.png" alt="image-20220323084335490"></p>
<h3 id="主范式"><a href="#主范式" class="headerlink" title="主范式"></a>主范式</h3><p>因为范式的不唯一，为了规范化，形成唯一的主析取范式和主合取范式</p>
<h5 id="化成主范式的步骤："><a href="#化成主范式的步骤：" class="headerlink" title="化成主范式的步骤："></a>化成主范式的步骤：</h5><ul>
<li><p>先求出析取范式（合取范式）</p>
</li>
<li><p>将不是极小项（极大项）的简单合取式进一步化</p>
</li>
<li><p>极大项（极小项）用名称mi（Mi)表示，并用角标从小到大排序</p>
</li>
</ul>
<h5 id="极小项和极大项"><a href="#极小项和极大项" class="headerlink" title="极小项和极大项"></a>极小项和极大项</h5><p><strong>定义：</strong></p>
<p>在含有n个命题变项的<strong>简单合取式</strong>中，若每个命题变元均以文字的形式出现且仅出现一次，成这样的简单合取式为<strong>极小项</strong>。</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323171729779.png" alt="image-20220323171729779"></p>
<p>要使其为真，只需要其中任何一项为真即可。</p>
<p>要使其为假，需要所有项都为假</p>
<p>在含有n个命题变项的<strong>简单析取式</strong>中，若每个命题变元均以文字的形式出现且仅出现一次，成这样的<strong>简单析取式</strong>为<strong>极大项</strong>。</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323171721234.png" alt="image-20220323171721234"></p>
<p>若使其为真，则需每个式子都为真</p>
<p>若使其为假，则只需其中的一个式子为假即可</p>
<p><strong>解释</strong>：①文字的形式：p,﹁p,q,﹁q这类的。②仅出现一次：p和﹁p只能有一个出现，即命题变元和其否定只能有一个出现。</p>
<p><strong>说明：</strong></p>
<ul>
<li>n个命题变元可以产生2^n个极小项和2^n个极大项</li>
</ul>
<ol>
<li>极小项（<strong>合取</strong>）：</li>
</ol>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220302221948240.png" alt="image-20220302221948240"></p>
<ul>
<li>没有两个极小项是等价的（即互不等值）</li>
<li>每个极小项只有一组<strong>真</strong>值，因此可用于给极小项编码，<strong>规律</strong>为：命题变元与1对应，其否定与0对应</li>
</ul>
<ol start="2">
<li>极大项（<strong>析取</strong>）：</li>
</ol>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220302222040684.png" alt="image-20220302222040684"></p>
<ul>
<li>没有两个极大项是相同的 </li>
<li>每个极大项只有一组<strong>假</strong>值，因此可用于给极大项编码，规律为：命题变元与0对应，命题变元的否定与1对应</li>
</ul>
<p>3.配凑法求主析取范式和主合取范式</p>
<ul>
<li><p>将析取换成加法，将合取换成乘法，如(p∧q)∨(┐p∧r)代换后变成pq+p’r</p>
</li>
<li><p>求主析取范式&#x3D;&gt;缺少的变元用**乘以x+x’**的形式补充</p>
<pre><code>pq = pq(r + r&#39;) = pqr+pqr&#39; (乘以缺失的变元)
p&#39;r = p&#39;(q + q&#39;)r = p&#39;qr + p&#39;q&#39;r
原式 = pqr + pqr&#39; + p&#39;qr + p&#39;q&#39;r  
</code></pre>
</li>
<li><p>换成离散语言<img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323164327707.png" alt="image-20220323164327707"></p>
</li>
<li><p>求主合取范式&#x3D;&gt;将缺少的变元用**加上xx’**的形式补充</p>
<p>里面用到的公式：A+BC&#x3D;(A+B)(A+C)</p>
</li>
<li><pre><code>    pq + p&#39;r                       
 = (p+p&#39;r)(q+p&#39;r)
 = (p+p&#39;)(p+r)(q+r)(q+p&#39;)
 =(p+r)(q+r)(q+p&#39;)
 = (p&#39;+q +rr&#39;)(p+qq&#39;+r)(pp&#39;+q+r)     (补缺的变元)
 = (p&#39;+q+r)(p&#39;+q+r&#39;)(p+q+r)(p+q&#39;+r) (p+q+r)(p&#39;+q +r)   
</code></pre>
<p>换成离散语言：</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323164434009.png" alt="image-20220323164434009"></p>
</li>
</ul>
<p>4.将析取范式转化为合取范式</p>
<p>例题一：</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323164512564.png" alt="image-20220323164512564"></p>
<p><strong>实质</strong>：如果将析取看成加法，合取看成乘法，非p用p’表示，则可化为：</p>
<p>(pq’)+(qr)   利用A+BC&#x3D;(A+B)(A+C)</p>
<p>&#x3D;(pq’+q)(pq’+r)</p>
<p>&#x3D;(q+p)(q+q’)(p+r)(q’+r)</p>
<p>例题二：</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326172328979.png" alt="image-20220326172328979"></p>
<p><strong>实质</strong>：如果将析取看成加法，合取看成乘法，非p用p’表示，则可化为：</p>
<p>cd+c’d’</p>
<p>&#x3D;(cd+c’)(cd+d’)</p>
<p>&#x3D;(c+c’)(d+c’)(c+d’)(d+d’)</p>
<p>&#x3D;(d+c’)(c+d’)</p>
<h3 id="主范式的用途"><a href="#主范式的用途" class="headerlink" title="主范式的用途"></a>主范式的用途</h3><h4 id="1-求公式的成真赋值和成假赋值"><a href="#1-求公式的成真赋值和成假赋值" class="headerlink" title="1.求公式的成真赋值和成假赋值"></a>1.求公式的成真赋值和成假赋值</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326173308683.png" alt="image-20220326173308683"></p>
<h4 id="2-判断公式的类型"><a href="#2-判断公式的类型" class="headerlink" title="2.判断公式的类型"></a>2.判断公式的类型</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326173448446.png" alt="image-20220326173448446"></p>
<p>A为非重言式：A的主析取范式中不含有全部的极小项</p>
<p>A为可满足式：A的主合取范式中不含有全部的极大项</p>
<h4 id="3-判断两个公式是否等值"><a href="#3-判断两个公式是否等值" class="headerlink" title="3.判断两个公式是否等值"></a>3.判断两个公式是否等值</h4><p>若两者的主析取范式或者主合取范式相同，则证明两者等值。</p>
<h4 id="4-解决实际问题"><a href="#4-解决实际问题" class="headerlink" title="4.解决实际问题"></a>4.解决实际问题</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326173842476.png" alt="image-20220326173842476"></p>
<p>❗解法：</p>
<p>1.将简单命题符号化</p>
<p>2.写出每句话的复合命题</p>
<p>3.写出由②中的复合命题组成的合取式</p>
<p>4.求出③中所得式子的主析取范式</p>
<p>5.找出主析取范式的成真赋值，即为解决方案</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326174225108.png" alt="image-20220326174225108"><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326180354192.png" alt="image-20220326180354192">       极小项的成真赋值就是运算的结果</p>
<h3 id="联结词的全功能集"><a href="#联结词的全功能集" class="headerlink" title="联结词的全功能集"></a>联结词的全功能集</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>任何命题公式都可以由仅含S中的联结词来表示，则S是联结词全功能集</p>
<p>说明：</p>
<p>若S1是全功能集，则S1中加入其他联结词后构成的S2也是全功能集</p>
<p>若S1不是全功能集，则S1中去掉一些联结词之后构成的S2也不是全功能集</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326180948677.png" alt="image-20220326180948677"></p>
<h4 id="复合联结词："><a href="#复合联结词：" class="headerlink" title="复合联结词："></a>复合联结词：</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326181140453.png" alt="image-20220326181140453"></p>
<p>由此可见，非，或，且联结词都可以用{↑}或者{↓}来表示，说明{↑}，{↓}都是联结词全功能集</p>
<p>注意：</p>
<p>{∨ ， ∧}不是全功能集，因此{∨ }，{∧ }也不是全功能集</p>
<h3 id="组合电路"><a href="#组合电路" class="headerlink" title="组合电路"></a>组合电路</h3><h4 id="逻辑门：与门，非门，或门"><a href="#逻辑门：与门，非门，或门" class="headerlink" title="逻辑门：与门，非门，或门"></a>逻辑门：与门，非门，或门</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326181608529.png" alt="image-20220326181608529">例题：楼梯的灯由两个开关控制，x,y为开关的状态，F为灯的状态，打开为1，关闭为0，请设计这样一个电路。</p>
<table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>F(x,y)</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<p>由此可见，F的极小项是m0和m3（成真赋值），故根据真值表可以写出其主析取范式，进行化简之后，画出电路图</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326182456376.png" alt="image-20220326182456376"></p>
<h3 id="推理理论"><a href="#推理理论" class="headerlink" title="推理理论"></a>推理理论</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>对于每组赋值，若满足下列两种情况：①条件为假 ②条件为真，结果为真。则称条件→结论的推理正确，否则推理不正确（即条件为真，结论为假）</p>
<h4 id="判断推理是否正确的方法"><a href="#判断推理是否正确的方法" class="headerlink" title="判断推理是否正确的方法"></a>判断推理是否正确的方法</h4><ul>
<li><p>真值表法</p>
<p>将所有变元可能的取值情况列成真值表，若对于每组赋值，都满足A→B为真，则证明推理正确</p>
</li>
<li><p>等值演算法</p>
<p>将A→B经过等值验算，如果其结果为1，则证明推理正确</p>
</li>
<li><p>主析取范式法</p>
<p>将A→B转化为主析取范式，若其包括了所有的极小项（2^n个），则说名推理正确</p>
</li>
<li><p>构造证明法</p>
</li>
</ul>
<h4 id="推理定律"><a href="#推理定律" class="headerlink" title="推理定律"></a>推理定律</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326183553084.png" alt="image-20220326183553084"></p>
]]></content>
      <categories>
        <category>数学笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你写贪吃蛇👩‍🔧(原生JS)</title>
    <url>/2022/03/16/%E8%B4%AA%E5%90%83%E8%9B%87/</url>
    <content><![CDATA[<h2 id="手把手教你写贪吃蛇👩‍🔧"><a href="#手把手教你写贪吃蛇👩‍🔧" class="headerlink" title="手把手教你写贪吃蛇👩‍🔧"></a>手把手教你写贪吃蛇👩‍🔧</h2><h2 id="①绘制界面"><a href="#①绘制界面" class="headerlink" title="①绘制界面"></a>①绘制界面</h2><h3 id="设置分数和速度"><a href="#设置分数和速度" class="headerlink" title="设置分数和速度"></a>设置分数和速度</h3><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>score:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>快<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>慢<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>分数字体大，采用h1</p>
<p>速度需要用户点击按钮进行选择，所以采用button</p>
<h3 id="画运动界面"><a href="#画运动界面" class="headerlink" title="画运动界面"></a>画运动界面</h3><ul>
<li>用表格显示格子，作为刻度(十行十列），每个格子的宽为40px，高为40px；</li>
</ul>
<p><code>table&gt;tr*10&gt;th*10</code>;   快捷方式生成十行十列的表格</p>
<p>​     样式：</p>
<p>​     ①在html的table标签中加入样式：</p>
<p>​      border&#x3D;”1” （表格的边框长度为1px) cellpadding&#x3D;”0”(表格的内边距为0px)  　　　　　　    　　　　　　　　cellspacing&#x3D;”0”这个别忘了设定，因为我这里默认是2px，就导致对不齐</p>
<p>​      ②在css中给每一个td都设置长和宽为38px(因为border四边还有1px占用</p>
<p>​      ③position：absolute 使表格浮动起来，不占用空间，以便div重叠上去</p>
<h5 id="用一个大div设置实际运动场所"><a href="#用一个大div设置实际运动场所" class="headerlink" title="用一个大div设置实际运动场所"></a>用一个大div设置实际运动场所</h5><p>用一个大的div来供JS插入新的div(主战场)</p>
<p>样式：</p>
<p>①宽高：均为400px</p>
<p>②背景颜色也是在div上设置，不是在表格上设置</p>
<h2 id="②封装产生div的方法"><a href="#②封装产生div的方法" class="headerlink" title="②封装产生div的方法"></a>②封装产生div的方法</h2><p>通过在大的div后面附加子div的方式，来显示蛇头，蛇身子和食物。</p>
<p>封装一个函数还创建小div</p>
<pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">var</span> map<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">creatDiv</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>给小div设置大小</p>
<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">function</span> <span class="token function">creatDiv</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token string">"38px"</span><span class="token punctuation">;</span>
            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token string">"38px"</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>给小div根据传入参数的不同而设置颜色的不同</p>
<pre class="line-numbers language-js"><code class="language-js">  <span class="token keyword">var</span> map<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function">creatDiv</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token string">"40px"</span><span class="token punctuation">;</span>
            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token string">"40px"</span><span class="token punctuation">;</span>
            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor<span class="token operator">=</span>color<span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">creatDiv</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个蛇头</span>
        <span class="token function">creatDiv</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个食物</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当创建好蛇头和食物后，要让他们的位置也变成absolute。目的是要让他们浮动起来，并且如果生成在同一行的时候，一个不会把另一个挤下去</p>
<pre class="line-numbers language-js"><code class="language-js">div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position<span class="token operator">=</span><span class="token string">"absolute"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="③利用随机数产生蛇头和食物div"><a href="#③利用随机数产生蛇头和食物div" class="headerlink" title="③利用随机数产生蛇头和食物div"></a>③利用随机数产生蛇头和食物div</h2><p><code>Math.random();</code>随机产生一个[0,1)的随机数</p>
<p>我们的要求：div的left和top应该位于[0,360]之间，并且必须是40的倍数</p>
<p>方法：</p>
<p>Math.random()*10 &#x3D;&gt;产生一个[0,10）的随机数，即[0,9]的随机数。</p>
<p>parseInt(Math.random()*10) &#x3D;&gt;将其转化为[0,9]的整数</p>
<p>parseInt(Math.random()*10) *40 &#x3D;&gt;产生一个[0,360]，且为40的倍数的整数</p>
<pre class="line-numbers language-js"><code class="language-js">       div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="④利用返回值得到通过函数创建的div"><a href="#④利用返回值得到通过函数创建的div" class="headerlink" title="④利用返回值得到通过函数创建的div"></a>④利用返回值得到通过函数创建的div</h2><p>因为之后要获取蛇头和食物的位置，但因是在函数中创建的，所以函数已结束就临时变量销毁了，无法获取，所以通过设置函数的返回值为div，并var一个div承接，来得到蛇头和食物</p>
<pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">creatDiv</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            XXXXX
            <span class="token keyword">return</span> div<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> headNode <span class="token operator">=</span> <span class="token function">creatDiv</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> foodNode <span class="token operator">=</span> <span class="token function">creatDiv</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="⑤利用定时器让蛇头移动起来"><a href="#⑤利用定时器让蛇头移动起来" class="headerlink" title="⑤利用定时器让蛇头移动起来"></a>⑤利用定时器让蛇头移动起来</h2><p>给headNode一个value属性,规定他的移动方向(默认初始为向上移动)</p>
<pre class="line-numbers language-js"><code class="language-js">headNode<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">"up"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>利用定时器函数，让蛇头移动(move是个移动的函数)</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>move<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>定义move函数(注意这里的变换坐标形式)</p>
<pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token string">"up"</span><span class="token punctuation">:</span>
                    headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"down"</span><span class="token punctuation">:</span>
                    headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"right"</span><span class="token punctuation">:</span>
                    headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"left"</span><span class="token punctuation">:</span>
                    headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="⑥通过键盘的按键来改变蛇头的移动方向"><a href="#⑥通过键盘的按键来改变蛇头的移动方向" class="headerlink" title="⑥通过键盘的按键来改变蛇头的移动方向"></a>⑥通过键盘的按键来改变蛇头的移动方向</h2><ul>
<li><p>利用键盘按下事件： document.onkeydown()。利用上下左右键来更改蛇头的移动方向</p>
</li>
<li><p>通过获取键盘的键值，对应不同的方向，那应该怎么获取呢？</p>
<p>在本例的事件编程中，由<code>document.onkeydown</code>可得：事件源是我的键盘，事件就是键盘按下。<code>function（）&#123; &#125;</code>是事件处理函数。在事件处理函数当中其实存在一个默认的参数event（可写可不写，用的时候需要写），表示事件对象，所以获取键盘的键值，就可以通过event.keyCode来获取</p>
<pre class="line-numbers language-js"><code class="language-js">document<span class="token punctuation">.</span>onkeydown<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>
 event<span class="token operator">=</span>event<span class="token operator">||</span>window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>监听键值，并根据键盘上敲击的键更改蛇头的移动方向</p>
<p>并且，在蛇有身体之后，不能让蛇头在向一个方向移动的时候向相对方向移动（自噬）。</p>
<pre class="line-numbers language-js"><code class="language-js">document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token number">37</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>value<span class="token operator">!=</span><span class="token string">"right"</span><span class="token operator">||</span>arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                    headNode<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"left"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">38</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>value<span class="token operator">!=</span><span class="token string">"down"</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    headNode<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"up"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">39</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>value<span class="token operator">!=</span><span class="token string">"left"</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    headNode<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"right"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">40</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>value<span class="token operator">!=</span><span class="token string">"up"</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    headNode<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"down"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="⑦检测是否吃到食物并改变食物位置"><a href="#⑦检测是否吃到食物并改变食物位置" class="headerlink" title="⑦检测是否吃到食物并改变食物位置"></a>⑦检测是否吃到食物并改变食物位置</h2><ul>
<li><p>首先需要思考把监测步骤放到哪里？</p>
<p>应该放到move函数里，每移动一次就判断时候吃到食物</p>
</li>
<li><p>如何判断呢？</p>
<p>当蛇头的top等于食物的top，蛇头的left等于食物的left时，就相等于吃到了食物</p>
</li>
<li><p>如果吃到食物后该怎么更新食物的位置呢？</p>
<p>我本来想的是利用原来createDiv函数重新生成一个div，但是这样不仅执行的代码量多，而且还需要删除原来的食物div，所以正确方法应该是重新刷新食物的top和left值即可</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               xxxx<span class="token operator">...</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">==</span>headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">&amp;&amp;</span> foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">==</span> headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>
                foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">==</span>  <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="⑧产生新的身体"><a href="#⑧产生新的身体" class="headerlink" title="⑧产生新的身体"></a>⑧产生新的身体</h2><ol>
<li><p>通过什么产生新的身体？ createNode函数</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> newNode<span class="token operator">=</span><span class="token function">createNode</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>将新身体跟在什么的后面？ 跟在最后一节的后面。</p>
<p>所以🐍的身体应该用数组保存。</p>
<p>在全局中：<code> var arr=[];//保存身体的数组</code></p>
<p>还要分情况讨论：</p>
<p>如果只有一个蛇头，最后一节就是蛇头</p>
<p>如果蛇头后面还有身体，即length&gt;0,通过arr[length-1]来获取蛇的最后一节</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//吃到了食物</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">==</span> headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">==</span> headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> newNode<span class="token operator">=</span><span class="token function">creatDiv</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> lastNode<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//得到最后一节</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    lastNode<span class="token operator">=</span>arr<span class="token punctuation">[</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    lastNode<span class="token operator">=</span>headNode<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>给新的一节设置value（移动方向）</p>
<p>新的一节的移动方向应该和lastNode的移动方向相同</p>
<pre><code>newNode.value=lastNo
</code></pre>
</li>
<li><p>将新身体也附在身体数组中</p>
<pre class="line-numbers language-js"><code class="language-js">            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<h2 id="⑨根据最后一块的运动方向确定新产生一节的位置"><a href="#⑨根据最后一块的运动方向确定新产生一节的位置" class="headerlink" title="⑨根据最后一块的运动方向确定新产生一节的位置"></a>⑨根据最后一块的运动方向确定新产生一节的位置</h2><ol>
<li><p>如何确定新产生的一节的位置？  需要找到最后一节的移动方向，如果向右，新的一节在它左侧出现，如果向左，新的一节在他右侧出现</p>
</li>
<li><p>如何找到最后一节的移动方向？ 找到最后一节的value</p>
<p>如果最后一节向右，那么如何让新的一节在最后一节的左侧出现？ 让newNode的left &#x3D; lastNode的left + 40px, 新一节的top和最后一节的top相同。其他方向同理。</p>
</li>
</ol>
<h2 id="⑩身体的移动"><a href="#⑩身体的移动" class="headerlink" title="⑩身体的移动"></a>⑩身体的移动</h2><ul>
<li><p>身体移动写在哪？</p>
<p>身体移动也是移动的一部分，所以应该写在move函数中</p>
</li>
<li><p>是先让蛇头移动还是先让身体移动？</p>
<p>先让身体移动</p>
</li>
<li><p>每一节应该是先移动身体再调整方向，还是想调整方向再移动身体？</p>
<p>因为每一节身体应该与他<strong>上一节上一次</strong>的运动方向相同。所以应该是先移动身体（本次移动的时候的方向还是和上一节上一次移动方向保持一致），在调整方向。</p>
</li>
<li><p>要移动每一节，应该用for循环遍历身体arr数组，那遍历时是从第一节开始还是从最后一节开始？</p>
<p>如果从第一节开始，那么会出现：第一节的运动方向&#x3D;头，第二节的运动方向&#x3D;第一节&#x3D;头，即所有的节的运动方向都等于头的运动方向，所以不对。应该是从最后一节开始遍历。</p>
</li>
</ul>
<p>所以，整个蛇的移动应该是从最后一节开始，不断向前的。</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//遍历整个蛇身子，从最后一节开始</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//蛇的一节移动</span>
                <span class="token keyword">switch</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">case</span> <span class="token string">"up"</span><span class="token punctuation">:</span>
                        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> <span class="token string">"down"</span><span class="token punctuation">:</span>
                        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> <span class="token string">"right"</span><span class="token punctuation">:</span>
                        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">case</span> <span class="token string">"left"</span><span class="token punctuation">:</span>
                        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment" spellcheck="true">//蛇的一节调整方向,方向与蛇的上一节的上一次的移动方向一致</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token operator">=</span>headNode<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment" spellcheck="true">//蛇头移动</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               xxxx<span class="token operator">...</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
            
            <span class="token comment" spellcheck="true">//移动过程中吃到了食物</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">==</span> headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">==</span> headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> newNode<span class="token operator">=</span><span class="token function">creatDiv</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//身体增加一节</span>
                <span class="token keyword">var</span> lastNode<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//得到最后一节 </span>
                <span class="token comment" spellcheck="true">//给新节点的移动方向赋值</span>
                newNode<span class="token punctuation">.</span>value <span class="token operator">=</span> lastNode<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//通过原来最后一个节点的方向更改新节点的位置</span>
                <span class="token comment" spellcheck="true">//将新的一节附在身体数组</span>
                <span class="token comment" spellcheck="true">//更新食物位置     </span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="⑾判断蛇死亡"><a href="#⑾判断蛇死亡" class="headerlink" title="⑾判断蛇死亡"></a>⑾判断蛇死亡</h2><p>情况1：超出边界，撞墙死</p>
<p>情况2：碰到自己的身体，即for循环判断每一块身体是否和头重合</p>
<pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">360</span> <span class="token operator">||</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">clearInterval</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"蛇撞墙了，游戏结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">//碰到自己身体死了</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">==</span> headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">==</span> headNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">clearInterval</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"蛇碰到自己身体了，游戏结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="⑿更新食物位置的时候防止其在身体部位生成"><a href="#⑿更新食物位置的时候防止其在身体部位生成" class="headerlink" title="⑿更新食物位置的时候防止其在身体部位生成"></a>⑿更新食物位置的时候防止其在身体部位生成</h2><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//更新食物位置</span>
                px<span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                py<span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
               <span class="token comment" spellcheck="true">//遍历整个身子</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">//如果身子的某一节和食物</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token operator">==</span>px<span class="token operator">&amp;&amp;</span><span class="token function">parseInt</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token operator">==</span>py<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">//重新生成蛇的位置</span>
                        px <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                        py <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">//重置i重新从头判断</span>
                        i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span>px<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>
                foodNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>py<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="吃到食物后增加分数"><a href="#吃到食物后增加分数" class="headerlink" title="吃到食物后增加分数"></a>吃到食物后增加分数</h2><p>html中：</p>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>score:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>设置全局变量：</p>
<pre class="line-numbers language-js"><code class="language-js">        <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计分</span>
        <span class="token keyword">var</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"Score"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>吃到食物后：</p>
<pre class="line-numbers language-js"><code class="language-js">score <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
                span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;h1>Score:"</span> <span class="token operator">+</span> score <span class="token operator">+</span> <span class="token string">"&lt;/h1>"</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="点击按钮控制速度"><a href="#点击按钮控制速度" class="headerlink" title="点击按钮控制速度"></a>点击按钮控制速度</h2><p>js中以点击按钮事件传入参数进行控制速度：</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token operator">/</span>将不变的速度改成传参可以控制的速度，绑定按钮进行传参
原来：
 <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>move<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
现在：
 <span class="token keyword">function</span> <span class="token function">changeTime</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>move<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>html中：</p>
<pre><code>&lt;button onclick=&quot;changeTime(&#39;200&#39;)&quot;&gt;快&lt;/button&gt;
    &lt;button onclick=&quot;changeTime(&#39;300&#39;)&quot;&gt;中&lt;/button&gt;
    &lt;button onclick=&quot;changeTime(&#39;500&#39;)&quot;&gt;慢&lt;/button&gt;
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>链表第一次作业</title>
    <url>/2022/03/18/%E9%93%BE%E8%A1%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h2 id="问题-B-链表排序"><a href="#问题-B-链表排序" class="headerlink" title="问题 B: 链表排序"></a>问题 B: 链表排序</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>已知一个正整数组成的无序序列，个数未知，但至少有一个元素，你的任务是建立一个单链表，并使用该链表存储这个正整数序列，然后将这个链表进行排序，使得排序后的链表为递增序列。正整数的输入用-1作为结束标志，注意-1不算这个正整数序列中的元素（不要统计-1）。在排序的过程中，你可以自己选择排序算法（冒泡排序、选择排序等），但必须是通过修改结点的指针域来进行排序，而不是对结点的数据域进行修改。程序结束后要释放所有节点占据的空间。</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>一个元素个数未知的正整数序列，以输入“-1”结束，输入“-1”前至少输入一个正整数。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>经过排序后的链表，<strong>每个元素后有一个空格，注意最后一个元素后只有换行符。</strong><br>数据最多的测试用例节点数在1000这个数量级，所有整数可以用int型存储。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>49 38 65 97 76 13 27 49 -1
</code></pre>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>The new list is:13 27 38 49 49 65 76 97
</code></pre>
<h3 id="我的代码："><a href="#我的代码：" class="headerlink" title="我的代码："></a>我的代码：</h3><pre class="line-numbers language-c++"><code class="language-c++">#include<iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode():val(0),next(nullptr){}
    ListNode(int x):val(x),next(nullptr){}
    ListNode(int x,ListNode *next):val(x),next(next){}
};
//链表排序
ListNode* sortList(ListNode* head) {
    //递归终止条件:cut到每一部分只剩下1个结点或0个结点
    if (head == NULL || head->next == NULL)
        return head;
    //利用快慢指针找到链表的中点（slow)
    ListNode* fast = head->next;
    ListNode* slow = head;
    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        slow = slow->next;
    }
    //记录后一段的头结点
    ListNode* nextHead = slow->next;
    //断开链表
    slow->next = nullptr;
    //继续递归cut
    ListNode* left = sortList(head);
    ListNode* right = sortList(nextHead);

    //合并
    //建立哑结点
    ListNode* dummy = new ListNode;
    //cur不断后移扩充链表
    ListNode* cur = dummy;
    //利用双指针合并
    while (left && right) {
        if (left->val < right->val) {
            cur->next = left;
            left = left->next;
        }
        else {
            cur->next = right;
            right = right->next;
        }
        cur = cur->next;
    }
    cur->next = left ? left : right;
    return dummy->next;

}

//输出链表的值
void print(ListNode* head) {
    cout << "The new list is:";
    while (head) {
        if (head->next) {
            cout << head->val << " ";
        }
        else {
            cout << head->val << endl;
        }
        head = head->next;
    }
}

int main() {
    //尾插法
    ListNode* head = new ListNode;
    ListNode* tail = head;
    int x = 0;
    cin >> x;
    while (x != -1) {
        ListNode* temp = new ListNode;
        temp->val = x;
        tail->next = temp;
        tail = temp;
        cin >> x;
    }
    sortList(head);
    print(head->next);
    return 0;
}
    
    5 -1
        
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="问题C"><a href="#问题C" class="headerlink" title="问题C"></a>问题C</h2><p>我也不知道我错哪里了，好吧通过讨论群里麦神的提示我知道了，</p>
<p>只需要把<code>while(str[0]  != &#39;-&#39;)</code>改成<code>while (str.compare(&quot;-1&quot;))</code> 就行了!🤦‍♀️枯了</p>
<pre class="line-numbers language-c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include <ctype.h>
using namespace std;

struct ListNode {
    char val;
    ListNode* next;
    ListNode():val(0),next(nullptr){}
    ListNode(int x):val(x),next(nullptr){}
    ListNode(int x,ListNode *next):val(x),next(next){}
};
//链表排序
ListNode* sortList(ListNode* head) {
    //递归终止条件:cut到每一部分只剩下1个结点或0个结点
    if (head == NULL || head->next == NULL)
        return head;
    //利用快慢指针找到链表的中点（slow)
    ListNode* fast = head->next;
    ListNode* slow = head;
    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        slow = slow->next;
    }
    //记录后一段的头结点
    ListNode* nextHead = slow->next;
    //断开链表
    slow->next = nullptr;
    //继续递归cut
    ListNode* left = sortList(head);
    ListNode* right = sortList(nextHead);

    //合并
    //建立哑结点
    ListNode* dummy = new ListNode;
    //cur不断后移扩充链表
    ListNode* cur = dummy;
    //利用双指针合并
    while (left && right) {
        if (left->val < right->val) {
            cur->next = left;
            left = left->next;
        }
        else {
            cur->next = right;
            right = right->next;
        }
        cur = cur->next;
    }
    cur->next = left ? left : right;
    return dummy->next;

}

//输出链表的值
void print(ListNode* head,char ch) {
    if (head == NULL) {
        if (ch != 'C') {
            cout << "There is no item in " << ch << " list." << endl;
        }
        else
        {
            cout << "There is no item in " << ch << " list.";
        }
        return;
    }
    cout << "The list "<<ch<<" is: ";
    while (head) {
        if (head->next) {
            cout << head->val << " ";
        }
        else {
            cout << head->val << endl;
        }
        head = head->next;
    }
}

//分割链表
void cut(ListNode* head,ListNode*A,ListNode*B,ListNode*C) {
    ListNode* temp = head;
    ListNode* tempA = A;
    ListNode* tempB = B;
    ListNode* tempC = C;
    while (temp->next) {
        if (isalpha(temp->next->val)) {
            tempA->next = temp->next;
            temp->next = temp->next->next;
            tempA = tempA->next;
        }
        else if (isdigit(temp->next->val)) {
            tempB->next = temp->next;
            temp->next = temp->next->next;
            tempB = tempB->next;
        }
        else {
            tempC->next = temp->next;
            temp->next = temp->next->next;
            tempC = tempC->next;
        }
    }
    tempA->next = nullptr;
    tempB->next = nullptr;
    tempC->next = nullptr;
}

int main() {
    //尾插法
    ListNode* head = new ListNode;
    ListNode* tail = head;
    string str ;
    cin >> str;
    while (str[0]  != '-') {
        ListNode* temp = new ListNode;
        temp->val = str[0];
        tail->next = temp;
        tail = temp;
        cin >> str;
    }
    ListNode* A = new ListNode;
    ListNode* B = new ListNode;
    ListNode* C = new ListNode;
    cut(head,A,B,C);
    sortList(A);
    sortList(B);
    sortList(C);
    print(A->next,'A');
    print(B->next,'B');
    print(C->next,'C');

    return 0;
}
    
    
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="问题D"><a href="#问题D" class="headerlink" title="问题D"></a>问题D</h3><p>我还是不知道自己错那了</p>
<p>嘿嘿，找出一个错误，是没有判断A比B短的情况，增加了之后变成90分了</p>
<pre class="line-numbers language-c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode() :val(0), next(nullptr) {}
    ListNode(int x) :val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) :val(x), next(next) {}
};

int  get(ListNode* head, ListNode* tail) {
    int count = 0;
    int x = 0;
    cin >> x;
    while (x != -1) {
        ListNode* temp = new ListNode;
        count++;
        temp->val = x;
        tail->next = temp;
        tail = temp;
        cin >> x;
    }
    return count;
}
bool cmp(ListNode* h1, ListNode* h2) {
    ListNode* i = h1;
    while (i) {
        ListNode* j = h2;
        ListNode* k = i;
        while (j) {
            if (k->val == j->val) {
                k = k->next;
                j = j->next;
            }
            else {
                break;
            }
        }
        i = i->next;
        if (j == nullptr) {
            return true;
        }
    }
    return false;
}
int main() {
    //尾插法
    ListNode* head1 = new ListNode;
    ListNode* tail1 = head1;
    ListNode* head2 = new ListNode;
    ListNode* tail2 = head2;
    int count1= get(head1, tail1);
    int count2=get(head2, tail2);
    if (count2 > count1) {
        cout << "ListB is not the sub sequence of ListA.";
        return 0;
    }
    bool ret = cmp(head1->next, head2->next);
    if (ret) {
        cout << "ListB is the sub sequence of ListA.";
    }
    else {
        cout << "ListB is not the sub sequence of ListA.";
    }
    return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="问题E"><a href="#问题E" class="headerlink" title="问题E"></a>问题E</h2><p>✌耶耶耶我一遍过了</p>
<pre class="line-numbers language-c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode() :val(0), next(nullptr) {}
    ListNode(int x) :val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) :val(x), next(next) {}
};

void func(ListNode* head,int s1,int t1,int s2,int t2){
    ListNode* cur = head;
    int count = 0;
    //记录几个重要节点
    while (count != s1 - 1) {
        cur = cur->next;
        count++;
    }
    ListNode* pre1 = cur;
    ListNode* x1 = cur->next;
    while (count != t1) {
        cur = cur->next;
        count++;
    }
    ListNode* nex1 = cur;
    while (count != s2 - 1) {
        cur = cur->next;
        count++;
    }
    ListNode* pre2 = cur;
    while (count != t2) {
        cur = cur->next;
        count++;
    }
    ListNode* nex2 = cur;
    ListNode* y2 = cur->next;
     
    //交换节点
    //注意这里要分两种情况
    //1.两个区间挨在一起，如[1,2] [3,6],即左区间的右边就是右区间
    //2.两个区间没有挨在一起，如[1,2] [5,6]
    
    pre1->next = pre2->next;
    if (t1 + 1 == s2) {
        nex2->next = x1;
    }
    else {
        nex2->next = nex1->next;

        pre2->next = x1;
    }
    nex1->next = y2;
}
//打印链表
void print(ListNode* head) {
    cout << "The new list is:";
    while (head) {
        if (head->next) {
            cout << head->val << " ";
        }
        else {
            cout << head->val << endl;
        }
        head = head->next;
    }
}
int main() {
    //尾插法
    ListNode* head = new ListNode;
    ListNode* tail = head;
    int x = 0;
    cin >> x;
    while (x != -1) {
        ListNode* temp = new ListNode;
        temp->val = x;
        tail->next = temp;
        tail = temp;
        cin >> x;
    }
    int s1, t1, s2, t2;
    cin >> s1 >> t1 >> s2 >> t2;
    func(head,s1,t1,s2,t2);
    print(head->next);
    return 0;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="问题F"><a href="#问题F" class="headerlink" title="问题F"></a>问题F</h2><pre class="line-numbers language-c++"><code class="language-c++">#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode() :val(0), next(nullptr) {}
    ListNode(int x) :val(x), next(nullptr) {}
    ListNode(int x, ListNode* next) :val(x), next(next) {}
};

void get(ListNode* head, ListNode* tail) {
    int x = 0;
    cin >> x;
    while (x != -1) {
        ListNode* temp = new ListNode;
        temp->val = x;
        tail->next = temp;
        tail = temp;
        cin >> x;
    }
    tail->next = nullptr;
}

void merge(ListNode* h1, ListNode* h2) {
    if (h1->next == nullptr || h2->next == NULL) {
        return;
    }
    ListNode* cur1 = h1;
    ListNode* cur2 = h2;
    while (cur1->next && cur2->next) {
        ListNode* nex2 = cur2->next;
        if (cur1->val<nex2->val && cur1->next->val>nex2->val) {
            cur2->next = cur2->next->next;
            nex2->next = cur1->next;
            cur1->next = nex2;

        }
        cur1 = cur1->next;
         while (cur2->next&&cur1->val == cur2->next->val)
                cur2 = cur2->next;
    }
    if (cur2->next) {
        cur1->next = cur2->next;
        cur2->next = nullptr;
    }

}
//输出链表的值
void print(ListNode* head, char ch) {
    if (head == NULL) {
        cout << "There is no item in " << ch << " list." << endl;
        return;
    }
    cout << "The list " << ch << " is: ";
    while (head) {
        if (head->next) {
            cout << head->val << " ";
        }
        else {
            cout << head->val << endl;
        }
        head = head->next;
    }
}
int main() {
    //尾插法
    ListNode* head1 = new ListNode;
    ListNode* tail1 = head1;
    ListNode* head2 = new ListNode;
    ListNode* tail2 = head2;
    get(head1, tail1);
    get(head2, tail2);
    merge(head1, head2);
    print(head1->next, 'A');
    print(head2->next, 'B');
    return 0;

}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
</search>
