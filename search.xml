<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2048小游戏</title>
    <url>/2022/02/27/2048/</url>
    <content><![CDATA[<p>这是我制作的第一个小游戏🙆‍♀️</p>
<span id="more"></span>

<p>自学了HTML，CSS，和JS的一点皮毛🤦‍♀️</p>
<p>   只能说一个这个有些稚嫩的成果，基本啥都没有，因为JS基本美学，所以花了好久时间才勉强看懂代码的意思，全程也是跟着网上写好的代码敲出来的（当花了一天时间才看懂之后就不想自己敲了，开始摆烂），唯一的优点是它确实能跑，缺点是“能跑”的补集😅</p>
<p>​                                                                                         —-2022.02.28</p>
<p>   在学长验收的时候被揭了个老底，学长说我的代码和网上的一个特别像，可人家明明是照着敲的，明明是一摸一样（捂脸），谢谢学长给我留了点面子。这次验收也让我明白，不应该过度追求界面的美化，应该追求代码的逻辑和结构，学术诚信十分重要！会议结束后立马痛改前非，又开始了JS的自学之路，这次是真的自己一个一个字敲出来的，因为几天前刚学了贪吃蛇的写法，知道了游戏应该怎么写，JS的语法，所以这次写的超级顺畅，几个小时就自己捣鼓出来啦，还加上了我喜欢的蓝色。当学习到了一定程度再回看的时候，发现这个小游戏真的很好写🙇‍♀️</p>
<p>下面是我在理解网上的代码是总结出来的这个游戏的思路（和我写的不太一样，我把我的代码附在最后了）：</p>
<p>①变量：</p>
<ul>
<li>一个二维数组，负责记录当前位置的分数（对应就是屏幕上的16个块）</li>
<li>当前的分数</li>
<li>当前游戏的状态，运行（1）or已经结束（0）</li>
</ul>
<p>②成员函数</p>
<ul>
<li>游戏的初始化</li>
</ul>
<ol>
<li>分数初始化为0</li>
<li>对16个方格对应的值进行赋值为0</li>
<li>当前的游戏状态设为1（正在运行）</li>
<li>调用生成随机数函数两次，生成两个随机数</li>
<li>调用更新视图函数，</li>
</ol>
<ul>
<li>生成随机数</li>
</ul>
<ol>
<li>分别随机生成行和列</li>
<li>如果对应的元素为0的话，就说明这个位置是可以的</li>
<li>则在随机生成2或者4，这里用到了Math.random()，是令系统随机选取大于等于 0.0 且小于 1.0 的伪随机 double 值，所以我们要以均等的概率生成2或4，代码就是<code>var num = Math.random()&gt;0.5?2:4;</code></li>
</ol>
<ul>
<li>更新当前界面（JS与HTML链接的地方）</li>
</ul>
<ol>
<li>两层for循环遍历data数组，通过getElementById来获取[i][j]位置上的方格,赋值给变量div</li>
<li>如果data[i][j]的值不为0 通过div.innerHTML把格子显示的数值改成data[i][j]（更新数据），通过div.className将格子代表的数值也进行更新</li>
<li>如果data[i][j]的值为0，格子内什么也不显示，对应设置div.innerHTML&#x3D;’’，div.className&#x3D;’grid’</li>
</ol>
<ul>
<li>更新屏幕上的分数</li>
</ul>
<p>通过getElementById来获得score01（当前分数）的标签，将其中的innerHTML改为当前的分数（this.score）</p>
<ul>
<li>检测游戏状态</li>
</ul>
<ol>
<li>如果this.status&#x3D;&#x3D;0(游戏结束）将this.score赋值给score02(结束时的分数）的innerHTML</li>
</ol>
<ul>
<li>判断游戏是否结束（没结束返回false，结束返回true）</li>
</ul>
<p>没有结束的三种情况：</p>
<ol>
<li>两层循环遍历data ，如果data[i][j]为零，返回false（① 数组中还有0）</li>
<li>在遍历中，如果j&lt;3并且data[i][j]等于data[i][j+1]，返回false（②左右相邻的还有相同的）</li>
<li>在遍历中，如果i&lt;3并且data[i][j]等于data[i+1][j]，返回false（③上下相邻的还有相同的）</li>
<li>如果遍历完都没有返回，说明游戏结束了，返回true</li>
</ol>
<ul>
<li>方格向左移动</li>
</ul>
<ol>
<li>用String函数将变动前的data二维数组转化成一个字符串before，以便变动之后与变动后的data数组比较。</li>
<li>遍历每一行，调用左移一行的函数</li>
<li>用String函数将变动后的data二维数组转化成一个字符串after，比较before和after</li>
<li>如果不相等，说明布局变化了，需要判断游戏是否结束，如果游戏结束，则将游戏状态status设为0，如果游戏没有结束，调用更新当前界面函数</li>
</ol>
<ul>
<li>左移一行的函数：</li>
</ul>
<ol>
<li><p>遍历当前行的所有列，得到当前元素[i][j]的右边不为0的第一个位置[i][nextj]</p>
</li>
<li><p>如果当前元素为0，左移之后直接会覆盖，所以就让当前元素等于data[i][nextj]，并把data[i][nextj]置0，让j–（要从当前位置继续遍历）</p>
</li>
<li><p>如果当前元素不为0且等于它右边不为0的第一个元素，则左移以后两个方块会合并为一个，并将data<em>2，所以this.data[i][j]</em>&#x3D;2；并将分数加上。</p>
</li>
</ol>
<p>下面是我做的时候写的思维导图，希望对你有帮助：</p>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/2048-16462039259381.png" alt="2048"></p>
<p>里面用到的函数：</p>
<ol>
<li>更新当前视图</li>
</ol>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE.png" alt="更新视图"></p>
<ol start="2">
<li><p>移动本行（这里以向左移动为例）</p>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE(1).png" alt="更新视图(1)"></p>
</li>
<li><p>生成随机位置</p>
</li>
</ol>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE(2).png" alt="更新视图(2)"></p>
<p>链接如下，要不点进去看看，哎喂看看我的配色也行啊！</p>
<p><a href="https://zhiruozzy.cn/Web/">2048小游戏</a></p>
<h3 id="下面是代码部分："><a href="#下面是代码部分：" class="headerlink" title="下面是代码部分："></a>下面是代码部分：</h3><h4 id="HTML部分："><a href="#HTML部分：" class="headerlink" title="HTML部分："></a>HTML部分：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;hh&quot;</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;Score&quot;</span>&gt;</span>score:<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c00&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c03&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c13&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c31&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c32&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#hh</span> &#123;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#4dabf7</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#score</span> &#123;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#4263eb</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-id">#box</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">320px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">320px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">2px</span> solid;</span><br><span class="line">            <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">78</span>, <span class="number">167</span>, <span class="number">235</span>);</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#a5d8ff</span>;</span><br><span class="line">            <span class="attribute">box-shadow</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">35</span>, <span class="number">153</span>, <span class="number">243</span>, <span class="number">0.9</span>)<span class="comment">/*blur值为10px*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.cell</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">76px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">76px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">2px</span> solid;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line">            <span class="attribute">border-color</span>: <span class="number">#87CEFA</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#b2e1ff</span>;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">            <span class="comment">/* 文字居中 */</span></span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">76px</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://pic.imgdb.cn/item/623885a627f86abb2abd3bf3.jpg</span>) ;</span><br><span class="line">            <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JS部分（核心）："><a href="#JS部分（核心）：" class="headerlink" title="JS部分（核心）："></a>JS部分（核心）：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> score = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;score&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> arr = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]];</span><br><span class="line">       <span class="title function_">creat</span>();</span><br><span class="line">       <span class="title function_">creat</span>();</span><br><span class="line">       <span class="title function_">update</span>();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">later</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">var</span> ret = <span class="title function_">judge</span>();</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">           <span class="keyword">if</span> (ret == <span class="literal">false</span>) &#123;</span><br><span class="line">               <span class="title function_">alert</span>(<span class="string">&quot;游戏结束,你的分数是:&quot;</span>+score);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">update</span>();</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">check</span>());</span><br><span class="line">           <span class="comment">//如果有空位才create一个新的</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="title function_">check</span>()) &#123;</span><br><span class="line">               <span class="title function_">creat</span>();</span><br><span class="line">               <span class="title function_">update</span>();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">check</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (arr[i][j] == <span class="number">0</span>)</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">creat</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">var</span> px = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">4</span>);</span><br><span class="line">               <span class="keyword">var</span> py = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">4</span>);</span><br><span class="line">               <span class="keyword">if</span> (arr[px][py] == <span class="number">0</span>) &#123;</span><br><span class="line">                   arr[px][py] = <span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span> ? <span class="number">2</span> : <span class="number">4</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//两种没有输的情况：1.还有空位 2.相邻的元素相等</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">judge</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (arr[i][j] == <span class="number">0</span>)</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] &amp;&amp; j &lt; <span class="number">3</span> &amp;&amp; arr[i][j] == arr[i][j + <span class="number">1</span>])</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] &amp;&amp; i &lt; <span class="number">3</span> &amp;&amp; arr[i][j] == arr[i + <span class="number">1</span>][j])</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="comment">//更新div中的innerHTML</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (arr[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                       <span class="keyword">var</span> cell = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;c&quot;</span> + i + j);</span><br><span class="line">                       cell.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                       cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#b2e1ff&quot;</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">var</span> cell = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;c&quot;</span> + i + j);</span><br><span class="line">                       cell.<span class="property">innerHTML</span> = arr[i][j];</span><br><span class="line">                       <span class="keyword">if</span> (arr[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#e7f5ff&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">4</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#d0ebff&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">8</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#82c9ff&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">16</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#74c0fc&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">32</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#4dabf7&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">64</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#339af0&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">128</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#228be6&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">256</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#1c7ed6&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">512</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#fff0f6&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">1024</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#1971c2&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">2048</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#1864ab&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] == <span class="number">4096</span>) &#123;</span><br><span class="line">                           cell.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;#4263eb&quot;</span>;</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//更新分数</span></span><br><span class="line">           span.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;h1&gt;score:&quot;</span> + score + <span class="string">&quot;&lt;/h3&gt;&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">moveLeft</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">var</span> k = j + <span class="number">1</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr[i][j] &amp;&amp; arr[i][j] == arr[i][k]) &#123;</span><br><span class="line">                           arr[i][j] *= <span class="number">2</span>;</span><br><span class="line">                           arr[i][k] = <span class="number">0</span>;</span><br><span class="line">                           score += arr[i][j];</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (!arr[i][j] &amp;&amp; arr[i][k]) &#123;</span><br><span class="line">                           arr[i][j] = arr[i][k];</span><br><span class="line">                           arr[i][k] = <span class="number">0</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">moveRight</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">3</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">var</span> k = j - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr[i][j] &amp;&amp; arr[i][j] == arr[i][k]) &#123;</span><br><span class="line">                           arr[i][j] *= <span class="number">2</span>;</span><br><span class="line">                           arr[i][k] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                           score += arr[i][j];</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (!arr[i][j] &amp;&amp; arr[i][k]) &#123;</span><br><span class="line">                           arr[i][j] = arr[i][k];</span><br><span class="line">                           arr[i][k] = <span class="number">0</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">moveUp</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">var</span> k = i + <span class="number">1</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr[i][j] &amp;&amp; arr[i][j] == arr[k][j]) &#123;</span><br><span class="line">                           arr[i][j] *= <span class="number">2</span>;</span><br><span class="line">                           arr[k][j] = <span class="number">0</span>;</span><br><span class="line">                           score += arr[i][j];</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (!arr[i][j] &amp;&amp; arr[k][j]) &#123;</span><br><span class="line">                           arr[i][j] = arr[k][j];</span><br><span class="line">                           arr[k][j] = <span class="number">0</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">moveDown</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                   <span class="keyword">for</span> (<span class="keyword">var</span> k = i - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (arr[i][j] &amp;&amp; arr[i][j] == arr[k][j]) &#123;</span><br><span class="line">                           arr[i][j] *= <span class="number">2</span>;</span><br><span class="line">                           arr[k][j] = <span class="number">0</span>;</span><br><span class="line">                           score += arr[i][j];</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (!arr[i][j] &amp;&amp; arr[k][j]) &#123;</span><br><span class="line">                           arr[i][j] = arr[k][j];</span><br><span class="line">                           arr[k][j] = <span class="number">0</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">           event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">           <span class="keyword">switch</span> (event.<span class="property">keyCode</span>) &#123;</span><br><span class="line">               <span class="comment">//左</span></span><br><span class="line">               <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">                   <span class="title function_">moveLeft</span>();</span><br><span class="line">                   <span class="title function_">later</span>();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">                   <span class="title function_">moveUp</span>();</span><br><span class="line">                   <span class="title function_">later</span>();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">                   <span class="title function_">moveRight</span>();</span><br><span class="line">                   <span class="title function_">later</span>();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                   <span class="title function_">moveDown</span>();</span><br><span class="line">                   <span class="title function_">later</span>();</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>自制</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajex自学笔记</title>
    <url>/2022/03/27/Ajex/</url>
    <content><![CDATA[<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><p>同步任务：在主线程上排队执行的任务，只有前一个任务执行完之后，才能执行下一个任务</p>
<p>异步任务：不进入主线程，而是进入任务队列的任务，只有任务队列通知主线程某个异步任务可以执行了，这个任务才可以进入主线程执行</p>
<span id="more"></span>

<p>比如：网络图片的请求就是一个异步任务，谁先请求完成就让谁先显示出来。</p>
<p>常见异步的场景：</p>
<ol>
<li>定时器：setTimeout (经过指定时间之后执行该函数，一次执行) 、setinterval（反复执行）</li>
<li>事件的绑定函数，比如按钮绑定点击事件，用户只有点击了按钮才会执行，所以是异步</li>
<li>网络请求：ajax请求（前端发送Ajax请求向后端请求数据，然后等待一段时间才能拿到这个数据，所以这个请求过程就是异步任务），网络图片加载</li>
<li>ES6中的Promise</li>
</ol>
<h2 id="异步任务举例"><a href="#异步任务举例" class="headerlink" title="异步任务举例"></a>异步任务举例</h2><h4 id="预加载图片"><a href="#预加载图片" class="headerlink" title="预加载图片"></a>预加载图片</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">loadImage</span>(<span class="params">url, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>(); <span class="comment">//创建一个Image对象，实现图片的预下载</span></span></span><br><span class="line"><span class="language-javascript">    img.<span class="property">src</span> = url;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (img.<span class="property">complete</span>) &#123; <span class="comment">// 如果图片已经存在于浏览器缓存，直接调用回调函数</span></span></span><br><span class="line"><span class="language-javascript">     callback.<span class="title function_">call</span>(img); </span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">return</span>; <span class="comment">// 直接返回，不用再处理onload事件</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//图片下载完毕时异步调用callback函数。</span></span></span><br><span class="line"><span class="language-javascript">      callback.<span class="title function_">call</span>(img);<span class="comment">//将回调函数的this替换为Image对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//被回调的方法</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">imgLoaded</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">width</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;loadImage&quot;</span> ο<span class="attr">nclick</span>=<span class="string">&quot;loadImag(&#x27;xxx.jpg&#x27;,imgLoaded)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>理解一下这段代码。</p>
<ul>
<li><p>首先先看HTML中给表单绑定了一个单击响应函数，函数的名字是loadImage，第一个参数是一个图片，第二个参数是一个函数（回调函数）</p>
</li>
<li><p>再看script中的loadImage函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImage</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>(); <span class="comment">//创建一个Image对象，实现图片的预下载</span></span><br><span class="line">    img.<span class="property">src</span> = url;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (img.<span class="property">complete</span>) &#123; <span class="comment">// 如果图片已经存在于浏览器缓存，直接调用回调函数，即调用imgLoaded,并将this指向改成了img</span></span><br><span class="line">     callback.<span class="title function_">call</span>(img); </span><br><span class="line">     <span class="keyword">return</span>; <span class="comment">// 直接返回，不用再处理onload事件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//图片下载完毕时异步调用callback函数。</span></span><br><span class="line">      callback.<span class="title function_">call</span>(img);<span class="comment">//将回调函数的this替换为Image对象</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>要理解这个函数，必须知道以下知识：</p>
<p>image 的 **onload ** 事件     </p>
<p>&#x3D;&gt;onload事件在图片加载完成之后立即执行代码</p>
<p>语法：onload&#x3D;”<em>JavaScriptCode</em>“</p>
<p>image 的 <strong>complete</strong> 属性</p>
<p>&#x3D;&gt;可返回浏览器是否完成对图像的加载，如果加载完成，则返回true，否则返回false</p>
<p>语法：imageObject.complete</p>
<p><strong>callback.call</strong></p>
<p>callback是一种函数，为回调函数，一般来说，函数A的参数是函数B，那么就发生了回调。</p>
<p><strong>call()方法</strong>：可以调用一个函数，并改变这个函数内部的this指向。</p>
<p>语法：function1.call(你想要this指向哪里，function1的实参1，function1的实参2…)</p>
<p>如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">nickName</span>: <span class="string">&#x27;zhizhi&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">nickName</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1.<span class="title function_">call</span>(obj1, <span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 先将 this 指向 obj1，然后执行 fn1() 函数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>最后看一下回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被回调的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">imgLoaded</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">width</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即调用这个函数后，会弹出this指向的对象的宽度</p>
</li>
</ul>
<h2 id="全局刷新和局部刷新"><a href="#全局刷新和局部刷新" class="headerlink" title="全局刷新和局部刷新"></a>全局刷新和局部刷新</h2><ol>
<li><p>全局刷新</p>
<ul>
<li><p>用表单form、herf等发起的请求是全局刷新，用户发起请求，视图发生了改变，页面发生跳转。</p>
</li>
<li><p>缺点：渲染新的页面需要时间，占用了网络带宽。如果数据量很大，那么耗时将很长，用户体验性不好。</p>
</li>
</ul>
</li>
<li><p>局部刷新</p>
<ul>
<li><p>在当前页面中发送请求，获取数据，更新当前页面的dom对象，对视图部分刷新。</p>
</li>
<li><p>比如访问微博的时候，点击底部的加载更多，会自动帮我们加载更多的微博，同时页面并不会整体刷新。</p>
</li>
<li><p>优点：①只获取少量数据，速度传输更快。</p>
<p>​            ②部分更新页面，速度很快。</p>
<p>​            ③在一个页面中，可以做多个局部刷新</p>
</li>
</ul>
</li>
</ol>
<h2 id="异步对象"><a href="#异步对象" class="headerlink" title="异步对象"></a>异步对象</h2><p>创建方法：<br><code>var xhr = new XMLHttpRequest();</code></p>
<p>使用异步对象主要负责发起请求，传递请求的参数，并从服务器接收数据</p>
<p> 局部刷新需要使用的技术：</p>
<ol>
<li>JavaScript：创建异步对象，调用它的属性和方法</li>
<li>dom：处理dom来更新数据</li>
<li>css：处理视图，美化</li>
<li>servlet：服务器端技术</li>
<li>json</li>
</ol>
<p>把以上这些技术综合应用就叫做Ajax，他不是新的编程语言，而是多种技术的综合应用。AJax全称为asynchronous JavaScript and XML（异步的JavaScript和XML）。我们使用Ajax来实现局部刷新</p>
<h2 id="异步对象的属性和方法"><a href="#异步对象的属性和方法" class="headerlink" title="异步对象的属性和方法"></a>异步对象的属性和方法</h2><ol>
<li><p>创建异步对象</p>
<p><code>var xhr = new XMLHttpRequest(); </code>  </p>
</li>
<li><p>异步对象的方法</p>
<ul>
<li><p>open（请求方式，服务器端的访问地址，是否为异步方式），用来建立http请求</p>
<p>例如：<code>xhr.open(&quot;GET&quot;,url,true);</code></p>
<p>注意：请求方式大小写不敏感，是否为异步方式默认为true</p>
</li>
<li><p>send ( body ), 用于建立链接后发送请求</p>
</li>
</ul>
</li>
<li><p>异步对象的属性</p>
<ul>
<li><p><strong>readyState</strong>：表示请求的状态</p>
<p>0：创建异步对象时（new对象）</p>
<p>1：建立请求时（执行open方法）</p>
<p>2：使用send方法发送请求时</p>
<p>3：使用异步对象从服务端接收了数据</p>
<p>4：异步对象接受并处理完数据</p>
</li>
<li><p><strong>status</strong>：表示网络的状态，和http的状态码对应</p>
<p>如：200 请求成功| 404服务器资源没有找到</p>
</li>
<li><p><strong>responseText</strong>: 获得字符串形式的响应数据</p>
<p>如：<code>var data = xhr.responseText</code></p>
</li>
<li><p><strong>responseXML</strong>：获得XML形式的响应数据</p>
</li>
</ul>
</li>
</ol>
<h2 id="异步对象的使用步骤"><a href="#异步对象的使用步骤" class="headerlink" title="异步对象的使用步骤"></a>异步对象的使用步骤</h2><ol>
<li><p>使用JS创建异步对象，即XMLHttpRequest对象</p>
<p>var xhr &#x3D; new XMLHttpRequest();</p>
</li>
<li><p>使用open()方法设置请求参数。open(method,url,true&#x2F;false);</p>
</li>
<li><p>发送请求，执行send()函数</p>
</li>
<li><p>给异步对象绑定事件，事件名称onreadystatechange，状态改变时就会调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">onreadystatechange</span>()=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    当状态改变时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在数据完整并且请求回来的时候才调用的话，需要在绑定的函数中用if语句来加以判断，例子如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">onreadystatechange</span>()=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">//从服务器中获取了数据</span></span><br><span class="line">   <span class="keyword">if</span>(xhr.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span>==<span class="number">200</span>)&#123;</span><br><span class="line">     <span class="keyword">var</span> data = xhr.<span class="property">reponseText</span>;</span><br><span class="line">     <span class="comment">//更新dom对象</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mydiv&quot;</span>).<span class="property">innerHTML</span> = data;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务端响应，获取返回的数据</p>
</li>
</ol>
<h2 id="发送请求的方式是POST"><a href="#发送请求的方式是POST" class="headerlink" title="发送请求的方式是POST"></a>发送请求的方式是POST</h2><p>方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">open</span>(method,url,<span class="literal">true</span>/<span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<p>当method时POST请求时要注意，如果想像form表单提交数据那样使用POST请求，需要使用<strong>XMLHttpRequest</strong> 对象的**setRequestHeader()**来添加HTTP头，并在send（）方法中添加想要发送的数据。</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlhttp.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;ajax_test.php&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);<span class="comment">//请求头是数据的类型，application/x-www-form-urlencoded：表单发送默认格式</span></span><br><span class="line"></span><br><span class="line">xmlhttp.<span class="title function_">send</span>(<span class="string">&#x27;name=smyhvae&amp;age=27&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>setRequestHeader(header, value)    header字符串:http请求头   value 字符串:值。</p>
<h4 id="常见请求头"><a href="#常见请求头" class="headerlink" title="常见请求头"></a>常见请求头</h4><table>
<thead>
<tr>
<th>请求头字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Accept</td>
<td>客户端可接受的MIME类型</td>
</tr>
<tr>
<td>Content-Type</td>
<td>数据属于什么类型，如js,c++,html,text格式</td>
</tr>
<tr>
<td>User-Agent</td>
<td>发出请求的用户信息，如用户使用的什么客户端</td>
</tr>
<tr>
<td>Cookie</td>
<td>客户端保存服务器返回的数据，如保存用户身份信息</td>
</tr>
<tr>
<td>Connection</td>
<td>表示处理完这次请求后是否断开链接</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>HTTP自学笔记</title>
    <url>/2022/03/27/HTTP/</url>
    <content><![CDATA[<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>协议规定了两部分的内容，分别是请求报文和响应报文</p>
<span id="more"></span>

<h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>请求报文的的格式为：<strong>请求行  － 请求头 －空行 - 请求数据</strong></p>
<h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>由<strong>请求方法字段</strong>，<strong>URL字段</strong>和<strong>HTTP协议版本字段</strong>  三个字段构成</p>
<ul>
<li>请求方法：常见的有GET(请求指定的页面，服务器返回具体的内容数据）、POST（提交数据，如提交表单）、PUT（更新和修改数据）等，浏览器在向服务器发送请求的时候必须指明请求类型</li>
<li>URL：表示请求所针对的资源</li>
<li>协议版本：让发送方指示消息的格式和理解后续HTTP通信的能力</li>
</ul>
<p>示例：<code>GET http://www/w3/org/pub.html HTTP/1.1</code></p>
<h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><table>
<thead>
<tr>
<th>请求头字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Accept</td>
<td>客户端可接受的MIME类型</td>
</tr>
<tr>
<td>Content-Type</td>
<td>数据属于什么类型，如js,c++,html,text格式</td>
</tr>
<tr>
<td>User-Agent</td>
<td>发出请求的用户信息，如用户使用的什么客户端</td>
</tr>
<tr>
<td>Cookie</td>
<td>客户端保存服务器返回的数据，如保存用户身份信息</td>
</tr>
<tr>
<td>Connection</td>
<td>表示处理完这次请求后是否断开链接</td>
</tr>
</tbody></table>
<h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p>若方法字段是GET，则此项为空，没有数据。若方法字段是POST，则放的是提交的数据。</p>
<p>示例：<code>user=admin&amp;password=123456</code></p>
<p>请求行 － 通用信息头 － 请求头 － 实体头 － 报文主体</p>
<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p><strong>1. GET</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求行</span></span><br><span class="line"></span><br><span class="line">GET /hello/index.jsp HTTP/<span class="number">1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求头部</span></span><br><span class="line"></span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">5.1</span>; rv:<span class="number">5.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">5.0</span></span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-cn,zh;q=0.5</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Charset: GB2312,utf-8;q=0.7,*;q=0.7</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Cookie: JSESSIONID=369766FDF6220F7803433C0B2DE36D98</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//空行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//因为GET没有正文，所以下面为空</span></span><br></pre></td></tr></table></figure>

<p><strong>2.POST</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求行</span></span><br><span class="line"></span><br><span class="line">POST /hello/index.jsp HTTP/<span class="number">1.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求头</span></span><br><span class="line"></span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">5.1</span>; rv:<span class="number">5.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">5.0</span></span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-cn,zh;q=0.5</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Charset: GB2312,utf-8;q=0.7,*;q=0.7</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br><span class="line"><span class="comment">Referer: http://localhost/hello/index.jsp</span></span><br><span class="line"><span class="comment">Cookie: JSESSIONID=369766FDF6220F7803433C0B2DE36D98</span></span><br><span class="line"><span class="comment">Content-Type: application/x-www-form-urlencoded </span></span><br><span class="line"><span class="comment">Content-Length: 14 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 这里是空行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//POST有请求正文</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">username=hello</span></span><br></pre></td></tr></table></figure>



<h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p>响应报文的的格式为:状态行 －  响应头 － 空行  -  响应正文</p>
<h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>状态行由协议版本。状态码，原因短语构成，每个元素由空格分隔</p>
<p>示例：<code>HTTP/1.1 200 OK</code></p>
<ul>
<li><p>协议版本：让发送方指示消息的格式和理解后续HTTP通信的能力</p>
</li>
<li><p>状态码：一个3位整数结果码，用于向用户返回操作结果</p>
<p>常见状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态码说明</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1XX</td>
<td>请求被接收</td>
<td>100 Continue</td>
<td>请求被接收，继续执行</td>
</tr>
<tr>
<td>2XX</td>
<td>请求成功</td>
<td>200 OK</td>
<td>成功，有响应消息体</td>
</tr>
<tr>
<td></td>
<td></td>
<td>201 Created</td>
<td>资源创建成功</td>
</tr>
<tr>
<td></td>
<td></td>
<td>204 No Content</td>
<td>成功，没有响应的消息体</td>
</tr>
<tr>
<td>3XX</td>
<td>进一步操作需要被执行</td>
<td>301 Moved Permanently</td>
<td>目标资源被分配进新的URL</td>
</tr>
<tr>
<td>4XX</td>
<td>请求错误</td>
<td>400 Bad Request</td>
<td>请求消息体错误，消息体中有错误描述</td>
</tr>
<tr>
<td></td>
<td></td>
<td>401 Unauthorized</td>
<td>授权失败，如证书不匹配</td>
</tr>
<tr>
<td></td>
<td></td>
<td>403 Forbidden</td>
<td>禁止访问</td>
</tr>
<tr>
<td></td>
<td></td>
<td>404 Not Found</td>
<td>找不到请求的梓员</td>
</tr>
<tr>
<td>5XX</td>
<td>服务端错误</td>
<td>500 Internal Server Error</td>
<td>服务器内部错误</td>
</tr>
<tr>
<td></td>
<td></td>
<td>501 Not Implement</td>
<td>功能未实现</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><table>
<thead>
<tr>
<th>响应头字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Content-Encoding</td>
<td>文档的编码（Encode）方法</td>
</tr>
<tr>
<td>Allow</td>
<td>服务器支持哪些请求方法（如GET、POST等）。</td>
</tr>
<tr>
<td>Content-Length</td>
<td>表示内容长度</td>
</tr>
<tr>
<td>Content-Type</td>
<td>表示后面的文档属于什么MIME类型</td>
</tr>
<tr>
<td>Date</td>
<td>当前的GMT时间</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>文档的最后改动时间</td>
</tr>
</tbody></table>
<h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>端口</p>
<p>端口分为物理端口和软件端口</p>
<p><strong>物理端口</strong>：如交换机和路由器上面插网线的口就叫做物理端口</p>
<p><img src="/../img/HTTP/image-20220327104852899.png" alt="image-20220327104852899"></p>
<p><strong>软件端口</strong>：指软件与服务器的接口，是操作系统模拟出来的。端口相当于身份证，保证了信息不会发错。分为了服务器端口和用户端的端口</p>
<p><strong>查看端口号</strong>：</p>
<p>在检查-网络中可以查看</p>
<p><img src="/../img/HTTP/image-20220327105318272.png" alt="image-20220327105318272"></p>
<p>HTTP服务器，默认的端口号为80</p>
<p>HTTPS服务器，默认的端口号为443</p>
<p>HTTP是应用层协议，是建立在传输层TCP协议之上的</p>
<p><img src="/../img/HTTP/image-20220327140133597.png" alt="image-20220327140133597"></p>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p>请求方法一共有9种</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">GET</td>
<td align="left">请求指定的页面信息，并返回实体主体。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">HEAD</td>
<td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">POST</td>
<td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">PUT</td>
<td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">DELETE</td>
<td align="left">请求服务器删除指定的页面。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">CONNECT</td>
<td align="left">HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">OPTIONS</td>
<td align="left">允许客户端查看服务器的性能。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">TRACE</td>
<td align="left">回显服务器收到的请求，主要用于测试或诊断。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">PATCH</td>
<td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td>
</tr>
</tbody></table>
<p>直接在浏览器的地址栏中输入网址，默认属于get请求</p>
<p>一般使用表单提交请求，默认属于post请求</p>
<p>GET和POST的区别：</p>
<ol>
<li><p>get是用来从服务器上获得数据的，而post是向服务器上传递数据的</p>
</li>
<li><p>get会将请求的数据会附在URL之后，即把数据放在HTTP协议头中，用？来分割URL和传输数据，用&amp;来分隔各个参数。如下面这个链接：</p>
<p><a href="https://search.bilibili.com/all?keyword=http%EF%BF%BD&amp;from_source=webtop_search&amp;spm_id_from=333.788&amp;page=3">https://search.bilibili.com/all?keyword=http%E5%8D&amp;from_source=webtop_search&amp;spm_id_from=333.788&amp;page=3</a></p>
<p>如果数据是英文或者英文字母，则原样显示，如果是空格，则以+显示，如果是中文或其他字符，则将字符串用BASE64编码。即如果用GET提交数据，用户名和密码将会以明文出现在URL中。</p>
<p>post将表单中的数据放在form的数据体中，按照变量和值的对应方式，传递到action所指向的URL中</p>
</li>
<li><p>get的请求可被缓存，可被保留在浏览器的历史记录中，可被收藏为书签，而post不会，所以get的安全性差，因为发送的数据是URL的一部分</p>
</li>
<li><p>因为get是向URL中添加数据，而URL的长度是有限的（最大2048个字符），多以get的数据长度是有限的，而post的数据不限长度</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>JS学习笔记</title>
    <url>/2022/03/05/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<p>自学的时候做的笔记，以供之后回来查阅，估计会有很多表述不准确甚至出错的地方，随着学习的加深会慢慢修正补充知识的。</p>
<p>​                                                     ——2022.03.05</p>
<span id="more"></span>

<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件，就是发生的事情，比如点击某个元素，将鼠标移动到某个元素的上方，按下键盘上的某个键</p>
<h3 id="拖拽box元素"><a href="#拖拽box元素" class="headerlink" title="拖拽box元素"></a>拖拽box元素</h3><p>需要进行三个步骤（其实就是对应了三个事件）</p>
<ol>
<li>当鼠标在被拖拽元素上按下（不是点一下）时，开始拖拽 ：onmousedown</li>
<li>当鼠标移动时，被拖拽元素随鼠标移动 : onmousemove</li>
<li>当鼠标松开时，被拖拽元素固定在当前位置: onmouseup</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//拖谁给谁绑定响应函数，本题拖拽的时box1，所以给box1绑定</span><br><span class="line">var box1 </span><br></pre></td></tr></table></figure>



<h2 id="JS的常用书写方式"><a href="#JS的常用书写方式" class="headerlink" title="JS的常用书写方式"></a>JS的常用书写方式</h2><ol>
<li><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><ul>
<li><p>在HTML的<code>&lt;body&gt;</code>标签中放入<code>&lt;script type=&quot;text/javascipt&quot;&gt; &lt;/script&gt;</code>标签对中，并在<code>&lt;script&gt;</code>标签对里书写代码</p>
</li>
<li><p>如果要将JS代码写在<code>&lt;head&gt;</code>中，就需要用window.onload&#x3D;function(){  }包裹起来</p>
</li>
</ul>
</li>
<li><h3 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h3><p>在HTML的<code>&lt;body&gt;</code>标签中放入<code>&lt;script src=&quot;相对路径&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ol>
<h2 id="JS输出语句"><a href="#JS输出语句" class="headerlink" title="JS输出语句"></a>JS输出语句</h2><ol>
<li>弹窗输出 <code>alert();</code> 弹窗处alert中的内容</li>
<li>弹窗确认 <code>confirm(); </code> 弹窗出confirm中的内容，弹窗上有“确认”和“取消”两个按钮</li>
<li>网页内容区输出：<code>document.write()</code>  直接输出在网页页面上</li>
<li>控制台输出：<code>console.log()</code> 输出在控制台</li>
</ol>
<h2 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h2><ul>
<li>基本数据类型（参数赋值的时候，传数值） ：String字符串，Number数值，Brglnt大型数值，Boolean布尔值，Null空值，Undefined 未定义，Symbol</li>
<li>引用数据类型（参数赋值的时候，传地址）：Object对象（只有这一种）</li>
</ul>
<h2 id="JS的字符串拼接"><a href="#JS的字符串拼接" class="headerlink" title="JS的字符串拼接"></a>JS的字符串拼接</h2><p>JS中字符串可以拼接，用“+”就可以拼接，</p>
<h3 id="拼接语法："><a href="#拼接语法：" class="headerlink" title="拼接语法："></a>拼接语法：</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">字符串 + 任意数据类型 = 拼接后的新字符串；</span><br></pre></td></tr></table></figure>

<h3 id="拼接规则："><a href="#拼接规则：" class="headerlink" title="拼接规则："></a>拼接规则：</h3><p>拼接前，会把与字符串相加的数据类型转化为字符串，然后再拼接成一个新的字符串。</p>
<h3 id="代码举例："><a href="#代码举例：" class="headerlink" title="代码举例："></a>代码举例：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">											   输出结果</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;长安&quot;</span>+<span class="string">&quot;归故里&quot;</span>;  <span class="comment">//字符串+字符串类型    长安归故里</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;长安&quot;</span>+<span class="number">666</span>;  <span class="comment">//字符串+数值类型          长安666           </span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&quot;长安&quot;</span>+<span class="literal">true</span>; <span class="comment">//字符串+布尔类型          长安true</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">&quot;长安&quot;</span>+<span class="literal">null</span>; <span class="comment">//字符串+空类型            长安null</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;芷若&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> str5 = <span class="string">&quot;长安&quot;</span>+obj;  <span class="comment">//字符串+object类型     长安[object Object] </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是一种复合的数据类型，在对象中可以保存多个不同的数据类型的属性</p>
<h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><ol>
<li><p>内置对象：<br>由ES标准中定义的对象，比如：Object、Math、Date、Function等。</p>
</li>
<li><p>宿主对象：</p>
<p>由JS的运行环境（浏览器）提供的对象，比如：BOM，DOM</p>
</li>
<li><p>自定义对象：</p>
<p>由开发人员自己创建出来的对象</p>
</li>
</ol>
<p>注意：通过new关键字创建出来的对象实例，都是对象类型</p>
<h3 id="对象的创建方法"><a href="#对象的创建方法" class="headerlink" title="对象的创建方法"></a>对象的创建方法</h3><ol>
<li><p>使用<strong>内置</strong>的构造函数创建对象（工厂模式）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">student.<span class="property">name</span> = <span class="string">&quot;芷若&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>弊端：使用的构造函数都是Object，所以创建的对象都是Object这个类型，导致无法区分多种不同类型的对象</p>
</li>
<li><p>使用对象字面量创建对象</p>
<p>字面量：为变量赋值时的常数量</p>
<p>对象字面量：封闭在花括号对{}中的对象的零个或多个“属性名：值”的列表。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多个“属性名：值”</span></span><br><span class="line"><span class="keyword">var</span> student =&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;芷若&quot;</span>;</span><br><span class="line">      <span class="attr">age</span>:<span class="number">19</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//零个</span></span><br><span class="line"><span class="keyword">var</span> student = &#123;&#125;;</span><br></pre></td></tr></table></figure>


</li>
<li><p>利用构造函数创建对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先自己创建一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sing</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再用自建的构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;双笙&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;林俊杰&quot;</span>,<span class="number">20</span>);</span><br><span class="line">person1.<span class="title function_">sing</span>(); </span><br><span class="line">person2.<span class="title function_">sing</span>();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="对象的赋值和修改"><a href="#对象的赋值和修改" class="headerlink" title="对象的赋值和修改"></a>对象的赋值和修改</h3><ul>
<li>这是基本数据类型：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name1 = <span class="string">&quot;长安&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name2 = name1;</span><br><span class="line">name2 = <span class="string">&quot;故里&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1); <span class="comment">//输出结果：长安</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name2); <span class="comment">//输出结果：故里</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这是object类型（对象）：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj1.<span class="property">name</span>=<span class="string">&quot;长安&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;故里&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1); <span class="comment">//输出结果：故里</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name2); <span class="comment">//输出结果：故里</span></span><br></pre></td></tr></table></figure>

<p>object类型赋值后竟然会改变本体。这里的object就相当于C语言中的一个指针指向的内容，而将obj1赋值给obj2就相当于让obj2也指向了这块内容，所以修改obj2所指向的内容后，自然也就修改了obj1</p>
<p>JS中的对象和C++中的对象相似之处：</p>
<ol>
<li><p>作用都是封装信息，比如一个student类中可以封装学生的姓名，年龄。成绩</p>
</li>
<li><p>C++中的对象有成员函数和成员变量。JS中的对象也是如此，不过叫的是特征（属性）和行为（方法）</p>
</li>
</ol>
<h4 id="获取对象中的属性："><a href="#获取对象中的属性：" class="headerlink" title="获取对象中的属性："></a>获取对象中的属性：</h4><p><strong>方式1</strong>：<code>对象.属性名</code></p>
<h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><h3 id="三个基本包装类："><a href="#三个基本包装类：" class="headerlink" title="三个基本包装类："></a>三个基本包装类：</h3><ul>
<li><p>String():将基本数据类型的字符串，转换为String对象</p>
</li>
<li><p>Number():将基本数据类型的数字，转化为Number对象</p>
</li>
<li><p>Boolean():将基本数据类型的布尔值，转化为Boolean对象</p>
</li>
</ul>
<h3 id="转换方法："><a href="#转换方法：" class="headerlink" title="转换方法："></a>转换方法：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;qianguyihao&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;qianguyihao&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>str2，num, bool的类型都是object</p>
<p>将基本数据类型转化为对象后，就可以绑定属性和方法了</p>
<h3 id="String-对象常用方法"><a href="#String-对象常用方法" class="headerlink" title="String()对象常用方法"></a>String()对象常用方法</h3><ol>
<li><p>indexOf()&#x2F;lastIndexOf():获取字符串中指定内容（字符或字符串）的索引</p>
<ul>
<li><p>语法一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">索引值 = str.<span class="title function_">indexOf</span>(查询的字符或者字符串)</span><br></pre></td></tr></table></figure>

<p>indexOf() 是从前向后查找，lastIndexOf()是从后向前查找，如果找到了，返回第一次出现的索引，如果没有找到，返回-1</p>
</li>
<li><p>语法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">索引值 = str.indexOf(查询的字符串，起始的下标位置)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>charAt(index)获取指定位置的字符</p>
<p>str.charAt(index)和str[index]等价</p>
</li>
</ol>
<h3 id="Number-对象常用方法"><a href="#Number-对象常用方法" class="headerlink" title="Number()对象常用方法"></a>Number()对象常用方法</h3><ol>
<li><p>Number.isInteger()判断是否为整数</p>
<p>语法：<code>布尔值 = Number。isInteger(数字);</code></p>
</li>
<li><p>toFixed()小数点后面保留几位</p>
<p>语法：<code>字符串 = myNum.toFixed(num);</code></p>
<p>解释：将对象myNum的小数点后面保留num位小数（四舍五入），不会改变原数字，返回的是字符串</p>
</li>
</ol>
<h3 id="Math-对象的方法"><a href="#Math-对象的方法" class="headerlink" title="Math()对象的方法"></a>Math()对象的方法</h3><p><strong>注意：调用Math对象的方法时，不需要创建对象，即不需要通过new来调用，直接使用即可</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = -<span class="number">0.6</span>;</span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(num));        <span class="comment">//取绝对值</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(num));      <span class="comment">//向下取整，向小取</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(num));       <span class="comment">//向上取整，向大取</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(num));      <span class="comment">//四舍五入取整（正数四舍五入，负数五舍六入）</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());        <span class="comment">//生成0-1之间的随机数</span></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组中可以存放<strong>任意对象</strong>的数据，比如：字符串，数字，布尔值，甚至是对象</p>
<h3 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h3><ol>
<li><p>和C语言一样的创建方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = []; <span class="comment">//创建一个空的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">//创建并初始化数组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>特有：用构造函数创建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = =<span class="keyword">new</span> <span class="title class_">Arrat</span>(参数);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果参数为空，则表示创建一个空数组，如果参数是一个数值，表示创建的数组的长度，如果有多个参数，表示数组中的元素</p>
</li>
<li><p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">// 参数为空</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">4</span>); <span class="comment">// 参数为一个数值</span></span><br><span class="line"><span class="keyword">var</span> arr4 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>); <span class="comment">// 参数为多个数值</span></span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr2 = [];</span><br><span class="line">arr3 = [<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>];</span><br><span class="line">arr4 = [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>];</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>函数也是一个对象</li>
<li>使用typeof 检查一个函数对象时，会返回一个function</li>
</ul>
<h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><ol>
<li><p>利用函数关键字自定义函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数明(形参<span class="number">1</span>，形参<span class="number">2.</span>..形参n)&#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用函数表达式（匿名函数）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">function</span>(<span class="params">形参<span class="number">1</span>，形参<span class="number">2</span>,...形参n</span>)&#123;</span><br><span class="line">     语句;</span><br><span class="line">&#125;; <span class="comment">//注意这里有个分号，表示赋值语句结束</span></span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun2 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是匿名函数中的代码&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里调用的时候有两种等价的写法</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> <span class="title class_">Vehicle</span>; <span class="comment">//不推荐这样写</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>fun2是变量名，不是函数名</li>
<li>函数表达式实际就是将匿名函数赋值给一个变量</li>
</ul>
</li>
</ol>
<h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><ol>
<li><p>普通函数的调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数名.call();</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是函数体里面的内容1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是函数体里面的内容2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>(); <span class="comment">// 调用函数</span></span><br><span class="line"></span><br><span class="line">fn2.<span class="title function_">call</span>(); <span class="comment">// 调用函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过对象的方式调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个类</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;圣米歇尔山&quot;</span>, <span class="comment">//注意这里是逗号</span></span><br><span class="line">  <span class="attr">draw</span>: <span class="keyword">function</span>&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;圣米歇尔山在哪里捏？&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用对象的函数</span></span><br><span class="line">obj.<span class="title function_">draw</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>立即执行函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;为什么立即执行函数这么多括号？！！&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">&#125;)(<span class="number">123</span>, <span class="number">456</span>);</span><br></pre></td></tr></table></figure>

<p>注意：立即执行函数在定义之后就会自动调用，这种函数通常只执行一次，因为没有变量保存它，执行完就找不到了（昙花一现）</p>
</li>
<li><p>用构造函数来调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, gender, hobby</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hobby</span> = hobby;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;dancing&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>构造函数：专门来生成对象的函数，它提供模板，描述对象的基本结构，一个构造函数可以通过new来生成多个对象，这些对象都有相同的结构。</p>
</li>
<li><p>绑定事件函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2.绑定事件</span></span></span><br><span class="line"><span class="language-javascript">            btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击按钮后，弹出了我&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给点击这个操作绑定了事件（弹窗）</p>
</li>
</ol>
<h3 id="函数的传参"><a href="#函数的传参" class="headerlink" title="函数的传参"></a>函数的传参</h3><p>JS允许传入任意个参数而不影响调用，因此，传入的参数比定义的参数多没有问题（即使函数内部不需要这些参数），传入的参数比定义的少也没有问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">abs</span>(<span class="number">19</span>,<span class="string">&#x27;nalabala&#x27;</span>); <span class="comment">//返回19</span></span><br><span class="line"><span class="title function_">abs</span>(-<span class="number">9</span>,<span class="string">&#x27;haha&#x27;</span>,<span class="string">&#x27;hehe&#x27;</span>,<span class="literal">null</span>); <span class="comment">//返回9</span></span><br><span class="line"><span class="title function_">abs</span>();  <span class="comment">//返回NaN</span></span><br></pre></td></tr></table></figure>



<h3 id="调用函数和获取函数的区别"><a href="#调用函数和获取函数的区别" class="headerlink" title="调用函数和获取函数的区别"></a>调用函数和获取函数的区别</h3><p>获取方法与调用方法</p>
<p>C语言中只能调用方法，不能获取方法，而JS可以，如下例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;smyhvae&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sayName</span>);  <span class="comment">//没加括号，就是获取方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">sayName</span>());  <span class="comment">//加了括号，就是调用方法。即：执行函数内容，并执行函数体的内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code> console.log(obj.sayName);</code>执行结果：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ () &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;smyhvae&#x27;</span>);     <span class="comment">//直接把方法整s</span></span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p><code>console.log(obj.sayName()); </code>执行结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">smyhvae <span class="comment">//首先调用函数，执行函数内容</span></span><br><span class="line"><span class="literal">undefined</span>   <span class="comment">//又因为该方法没有返回值，所以输出undefined</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li><code>fun()</code>：调用函数。调用之后，还获取了函数的返回值</li>
<li><code>fun</code>：获取函数。相当于直接获取了整个函数对象</li>
</ul>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p><strong>构造函数</strong>主要用来初始化对象，即为对象成员赋初值，总是与new一起使用，在ES6之前由于没有<strong>类</strong>的概念，所以常把对象的一些公共属性和方法抽取出来。然后封装到构造函数中。</p>
<h4 id="构造函数和普通函数"><a href="#构造函数和普通函数" class="headerlink" title="构造函数和普通函数"></a>构造函数和普通函数</h4><ol>
<li>构造函数的创建方法和普通函数没有区别，都是<code>function 函数名()&#123;  &#125;</code>，不同的是构造函数习惯首字母大写</li>
<li>两者的调用方式不同。普通函数直接调用，而构造函数需要用new关键字来调用</li>
<li>二者this的指向不同。普通函数调用时，如果普通调用，this指向的是window，如果以方法的形式调用，this是调用方法的那个对象。 当以构造函数的形式调用时，this是新创建的实例化对象</li>
<li>返回值：普通函数可以有返回值，也可以没有返回值，但是构造函数没有返回值（不用写return），“new一个构造函数的流程” 会解释为什么不需要返回值</li>
</ol>
<h4 id="书写规范："><a href="#书写规范：" class="headerlink" title="书写规范："></a>书写规范：</h4><ol>
<li><p>使用构造函数创建某一类对象的时候，<strong>首字母要大写</strong>（与普通函数区别开）</p>
</li>
<li><p>构造函数内部使用了<strong>this</strong>关键字，代表了要生成的对象实例</p>
</li>
<li><p>构造函数生成对象的时候，必须要用new指令</p>
<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先自己创建一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sing</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再用自建的构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;双笙&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;林俊杰&quot;</span>,<span class="number">20</span>);</span><br><span class="line">person1.<span class="title function_">sing</span>(); </span><br><span class="line">person2.<span class="title function_">sing</span>();</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="New一个构造函数的流程"><a href="#New一个构造函数的流程" class="headerlink" title="New一个构造函数的流程"></a>New一个构造函数的流程</h4><ol>
<li>开辟内存空间，在内存中创建新的空对象</li>
<li>让this指向这个新的空对象</li>
<li>执行构造函数里的代码，为这个新对象添加属性和方法</li>
<li>返回这个新对象（所以构造函数里面不需要return）</li>
</ol>
<h4 id="实例成员和动态成员"><a href="#实例成员和动态成员" class="headerlink" title="实例成员和动态成员"></a>实例成员和动态成员</h4><p><strong>成员</strong>:成员包括构造函数中的属性和方法</p>
<p>JS的构造函数中可以添加一些成员。添加方法有两种：①在构造函数本身上添加②在构造函数内部的this上添加</p>
<p><strong>实例成员</strong>：构造函数中用this添加的成员，实例成员只能通过实例化对象来访问。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用this来添加实例成员，下面的name,age,sing都是实例成员</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sing</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例成员只能通过实例化对象访问</span></span><br><span class="line"><span class="comment">//正确访问方法：</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;双笙&quot;</span>,<span class="number">18</span>);</span><br><span class="line">person1.<span class="title function_">sing</span>(); </span><br><span class="line"><span class="comment">//错误访问方法（不可以通过构造函数来访问实例成员）</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="title function_">sing</span>();</span><br></pre></td></tr></table></figure>

<p><strong>静态成员</strong>：在构造函数本身上面添加的成员，只能通过构造函数来访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;双笙&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在构造函数本身上面添加成员</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property">sex</span> = <span class="string">&quot;女&quot;</span>;</span><br><span class="line"><span class="comment">//正确访问方法：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property">sex</span>);</span><br><span class="line"><span class="comment">//错误访问方法：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">sex</span>);</span><br></pre></td></tr></table></figure>

<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>概念：一个函数A作为另一个函数B的： 1.参数 2.返回值时，我们称函数B为高阶函数。简单来说，高阶函数是 <strong>对其他函数进行操作</strong> 的函数</p>
<p><strong>类型1</strong>：把其他函数作为参数（这个例子我现在还不太理解）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">    callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是最后执行的函数&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>试着理解一下吧：</p>
<ol>
<li><code>callback &amp;&amp; callback();</code></li>
</ol>
<ul>
<li><p>callback是回调的意思（call back,回我电话），指当执行栈中的同步任务执行完毕后再执行回调的内容</p>
</li>
<li><p>callback也可以作为函数A的形参，所对应的实参一般是另一个函数B。即执行完了函数A的所有同步任务之后，会执行函数B</p>
</li>
<li><p>callback &amp;&amp; callback();要理解这句话，首先要理解&amp;&amp;逻辑与，先执行左边，如果左边为真，就会执行右边，如果左边为假，就不执行右边。所以A&amp;&amp;B就等价为<code>if(A) &#123;  B &#125;</code> ，因此<code>callback&amp;&amp;callback.call()</code> 就是 <code>if(callback) callback.call()</code>，即如果调用的时候传入了callback所对应的实参，就执行回调函数这个操作，如果没有传入所对应的参数（JS中函数的参数可以缺省），就不执行回调函数这个操作。</p>
</li>
</ul>
<ol start="2">
<li></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn1</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是最后执行的函数&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>   虽然很优雅的写法，但我第一眼没看出来这是干啥的…..，写成下面这个形式好理解一些<br><code>fn1(10, 20,   function () &#123;console.log(&#39;我是最后执行的函数&#39;);&#125;  );</code><br>   这其实是fn1函数的调用，第三个参数是一个函数，它是作为callback的实参传过去的。</p>
<ol start="3">
<li><p>执行步骤</p>
<p>调用函数，先执行 fn1中的内容：<code>console.log(a + b);</code>，执行完毕后执行回调函数中的内容： <code>console.log(&#39;我是最后执行的函数&#39;);</code></p>
</li>
</ol>
<p><strong>类型二</strong>：把函数作为返回值（常结合闭包）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//将函数作为返回值返回</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="title function_">fn1</span>(); <span class="comment">// 执行 fn1() 之后，会得到一个返回值。这个返回值是函数</span></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>



<h2 id="作用域："><a href="#作用域：" class="headerlink" title="作用域："></a>作用域：</h2><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><p>全局作用域和局部作用域</p>
<h3 id="访问关系："><a href="#访问关系：" class="headerlink" title="访问关系："></a>访问关系：</h3><ul>
<li>内部作用域可以访问到外部作用域的变量，但在外部作用域无法访问到内部作用域的变量</li>
<li>如果局部作用域和全局作用域的变量重名的话，在局部修改局部作用域的变量的值并不会改变全局作用域的变量的值。</li>
<li>JS的函数在查找变量时从自身函数定义开始，由”内“向”外“查找。如果内部函数定义了域外部函数重名的变量。则内部函数的变量将”屏蔽“外部函数的变量</li>
</ul>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p><strong>概念</strong>：指有权访问另一个函数作用域中变量的<strong>函数</strong>。 (closure)</p>
<p>由上面的定义我们知道，闭包是一种函数，如果A函数访问到了B函数内的变量，那么称函数B为闭包函数</p>
<h3 id="常规情况下："><a href="#常规情况下：" class="headerlink" title="常规情况下："></a>常规情况下：</h3><ul>
<li>函数内部可以访问全局变量和局部变量</li>
<li>函数外部只能访问全局变量，不能访问局部变量</li>
<li>当函数执行完毕后，本作用域内的局部变量会被销毁</li>
</ul>
<p>比如下面这样的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//打印报错：Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>

<p>原因：a是函数内的局部变量，外部无法访问。当调用完foo函数之后，a变量已经被销毁了，所以a无法访问。</p>
<h3 id="闭包函数中："><a href="#闭包函数中：" class="headerlink" title="闭包函数中："></a>闭包函数中：</h3><p>我靠，从这个例子我才发现原来JS中函数可以嵌套定义？！！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//在</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<p> 上面这个例子也可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">     &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="title function_">fn1</span>();  <span class="comment">//fn1的返回值是一个函数</span></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//调用foo</span></span><br></pre></td></tr></table></figure>

<p> 输出结果：10</p>
<ul>
<li>函数fn2只能在fn1中调用，如果在fn1外面调用，将会报错</li>
<li>如果嵌套的内层函数使用了外层函数的变量或参数，即fn2中使用了fn1中的变量a，这个嵌套函数就形成了一个闭包，将fn1成为闭包函数</li>
<li>闭包能在它fn1执行完之后仍然能够访问fn1里的变量和参数</li>
</ul>
<h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><p>在上面那个例子中，本来fn1执行完毕后，它里面的变量a会立即销毁，但此时由于产生了闭包，fn1中的变量不会立即销毁，因为fn2函数还要继续调用变量a。</p>
<p>并且，在全局中通过foo()承接fn1的返回值,达到了在全局作用域中也可以访问局部作用域中的变量a</p>
<p>可见，<strong>闭包延伸了变量的作用范围</strong></p>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>解析器在调用函数时每次都会像函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象</p>
<p>这个对象我们称为函数执行的上下文对象</p>
<p>根据函数<strong>调用</strong>方式的不同，this会指向不同的对象</p>
<p>以函数形式调用，this的对象是window。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this.window&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func1</span>();<span class="comment">//直接调用函数，this指向window全局</span></span><br><span class="line">等价于：<span class="variable language_">window</span>.<span class="title function_">fun1</span>();</span><br><span class="line">输出结果：object <span class="title class_">Window</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以对象的方式调用，this指向调用方法的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment">//把obj的一个属性设置成了函数func1</span></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">sayname</span>:func1</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">sayname</span>();<span class="comment">//以方法的形式调用函数</span></span><br><span class="line"></span><br><span class="line">输出结果：object <span class="title class_">Object</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ol>
<li><strong>普通函数，立即执行函数</strong>调用时，this的指向时window（全局）</li>
<li><strong>以方法的形式</strong>调用时，this指向调用方法的那个对象</li>
<li>以<strong>构造函数</strong>的形式调用时，this指向new出来的对象</li>
<li>以<strong>事件绑定函数</strong>的形式调用时，this指向绑定事件的对象</li>
<li>用<strong>call和apply</strong>调用时，this指向指定的（括号里面的第一个参数）那个对象</li>
</ol>
<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><h3 id="JS是单线程"><a href="#JS是单线程" class="headerlink" title="JS是单线程"></a>JS是单线程</h3><p>即同一个时间只能做一件事，比如某个DOM元素进行添加和删除的操作时，不能同时进行，应该先添加，之后再删除。</p>
<p>单线程意味着，所有任务都需要排队，即前一个任务结束，才会执行后一个任务，这样导致的问题是：JS执行的时间过长，页面渲染加载会有阻塞</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>知乎上一篇文章讲的很好，附上链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/326902537">10张图理解回调函数</a></p>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>前一个任务结束后再执行后一个任务，程序的执行顺序和任务的排列顺序是一致的。比如做饭的同步做法：烧水煮饭（10分钟之后），再去切菜，炒菜。</p>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>在做这件事情同时，还可以去处理其他事情。比如做饭的异步做法：在烧水的同时，利用这10分钟，去切菜，炒菜。</p>
<p>比如下列代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果：1   2   3</p>
<p>因为 等待函数要等待2秒钟才执行，所以会先执行console.log(2);</p>
<p>可是如果把时间换成0，即：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果依旧是： 1 2 3，为了解决这个问题，我们需要了解</p>
<h3 id="JS的执行机制"><a href="#JS的执行机制" class="headerlink" title="JS的执行机制"></a>JS的执行机制</h3><ol>
<li>先执行执行栈中的同步任务</li>
<li>如果遇到异步任务，将其放入任务队列中，先不执行</li>
<li>当执行栈中的所有同步任务执行完毕后，系统会根据次序读取任务队列中的异步任务，依次执行</li>
</ol>
<h3 id="同步任务："><a href="#同步任务：" class="headerlink" title="同步任务："></a>同步任务：</h3><p>同步任务都在主线程上执行，形成一个执行线</p>
<h3 id="异步任务："><a href="#异步任务：" class="headerlink" title="异步任务："></a>异步任务：</h3><p>异步任务是指不进入主线程，而进入“任务队列”，只有主线程任务执行完毕后，“任务队列”才开始通知主线程请求执行任务，该任务才会进入主线程执行。</p>
<p>异步任务是通过回调函数实现的。有以下三个种类：</p>
<ol>
<li>普通事件，如onclick,resize等</li>
<li>资源加载，如load，error等</li>
<li>定时器，如setInterval,setTimeout等</li>
</ol>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>在DOM中，所有的HTML元素都被定义为<strong>对象</strong>。通过DOM，JS可以删除或添加HTML元素，可以改变HTML元素的内容</p>
<h3 id="获取页面中的元素"><a href="#获取页面中的元素" class="headerlink" title="获取页面中的元素"></a>获取页面中的元素</h3><ol>
<li><p>getElementById(<em>“id”</em>) 获取带有ID的元素对象</p>
</li>
<li><p>getElementsByTagName(<em>“name”</em>) 获取<strong>所有</strong>带有这个标签名的对象</p>
<ul>
<li>注意：即使只有一个input标签，其结果也是一个数组</li>
<li>我们可以通过length来获取HTML中指定标签的数量</li>
<li>示例1：该案例获取到了所有tagName是input的标签，是一个数组（NodeList）。如果想要获取第一个input标签，则需要写成：<code>var first = document.getElementsByTagName(&quot;input&quot;)[0];</code></li>
</ul>
<p>​    </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> x=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(x.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;20&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>document.getElementsByClassName(<em>“name”</em>) 获取所有指定class名字的元素合集，即一个数组(NodeList),可以通过或因好来访问列表中的节点(索引号从0开始)</p>
<p>注意：可以通过NodeList的length属性来获得指定类名的元素的个数，并通过for循环来获取我需要的那个元素</p>
</li>
<li><p>querySelector() </p>
<p>这个方法很强大，它既可以以id来选择，也可以以class来选择，也可以根据标签名来选择。不过他只能获取到匹配你要求的<strong>第一个</strong>元素</p>
<ul>
<li><p>获取HTML中第一个id&#x3D;”div01”的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div01&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取HTML中第一个class&#x3D;”div01”的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.div01&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取HTML中第一个p元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取第一个id为”zhiruo”的p元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;p[id=&#x27;zhiruo&#x27;]&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取data_index属性为111的元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;[data_index=&#x27;111&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取第一个父元素为div的p元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div &gt; p&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>querySelectorAll() 和querySelector() 用法相似，只不过它获取到的是所有满足条件的对象的NodeList。</p>
<p>对其中的节点的访问可以通过索引值得到</p>
<p>示例1：给所有具有target属性的a标签加一个边框</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;a[target]&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    x[i].<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;10px solid red&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例2：给所有div中的p标签加一个背景颜色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div &gt; p&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    x[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例3：给所有的h2,div,span标签加上背景颜色</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;h2, div, span&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    x[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="改变HTML中元素的属性"><a href="#改变HTML中元素的属性" class="headerlink" title="改变HTML中元素的属性"></a>改变HTML中元素的属性</h3><ol>
<li><p>改变元素的innerHTML</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="property">innerHTML</span> = <span class="string">&#x27;我改变了div内的文本&#x27;</span></span><br></pre></td></tr></table></figure>

<p>另：将其中的文本改成h2的文本(因为innerHTML识别标签，如果这里用innerTEXT就不行了，它不识别标签，用起来不方便)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;h2&gt;我改变了div内的文本&lt;/h2&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>另：获取innerHTML的内容(不仅保留空格、换行，还保留标签)</p>
<p>比如下面这个案例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是h1字体<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打印结果：        <code>&lt;h1&gt;这是h1字体&lt;/h1&gt;</code></p>
</li>
<li><p>改变元素的属性值① （主要针对内置属性） element.attribute &#x3D; new value </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"> div.<span class="property">id</span> = <span class="string">&#x27;content1&#x27;</span>;<span class="comment">//将div标签的id从content改为content1</span></span><br><span class="line">div.<span class="property">className</span> = <span class="string">&quot;haha&quot;</span>; <span class="comment">//注意不是class</span></span><br></pre></td></tr></table></figure>

<p>改变 HTML 元素的属性值②（主要设置自定义属性）  element.setAttribute(attribute, value) </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;content1&#x27;</span>)<span class="comment">//将div标签的id从content改为content1</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;haha&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>改变HTML元素的CSS样式  element.style.property &#x3D; new style</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">           div.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;red&quot;</span>;<span class="comment">//将div标签背景修改为 红色</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="增添HTML元素"><a href="#增添HTML元素" class="headerlink" title="增添HTML元素"></a>增添HTML元素</h3><ol>
<li><p>在原有基础上添加innerHTML的内容（用到了字符串拼接）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">container.<span class="property">innerHTML</span> = container.<span class="property">innerHTML</span> + <span class="string">&#x27;&lt;h3&gt;追加内容为H3标签&lt;/h3&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>也可以用+&#x3D;的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">container.<span class="property">innerHTML</span> += <span class="string">&#x27;&lt;h3&gt;追加内容为H3标签&lt;/h3&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>createElement：增添元素</p>
<p>增添一个h1标题，里面的内容是hello</p>
<p>因为HTML元素通常是由元素节点和文本节点构成，比如<code>&lt;h1&gt;hello&lt;/h1&gt;</code>中元素节点是h1，文本节点是hello。所以应该这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> h=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> t=<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;hello&quot;</span>); </span><br><span class="line">h.<span class="title function_">appendChild</span>(t);<span class="comment">//在标签中添加文字</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(h); <span class="comment">//将标签添加到页面中</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>setAttribute():  给dom增添自定义属性</p>
<p>语法：<code>element.setAttribute(attributename,attributevalue)</code></p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给span增添index属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pra = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">    pra[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>document.appendChild(<em>element</em>) ：将该节点添加到父元素的<strong>最后一个子节点后面</strong></p>
</li>
<li><p>node.cloneNode()：拷贝节点</p>
<p>深拷贝：将节点中的子节点也一起复制，则括号里填写true</p>
<p>浅拷贝（默认）：不复制该节点的子节点，只复制标签，连文本也不复制，则括号里填false或者啥都不写。</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ul=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> copy=ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">ul.<span class="title function_">appendChild</span>(copy); <span class="comment">//克隆出来之后别忘了把它d</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="删减HTML元素"><a href="#删减HTML元素" class="headerlink" title="删减HTML元素"></a>删减HTML元素</h3><ol>
<li><p>removeChild()   移除子元素 ，如果该子元素里面还有子元素，也会被一起移除</p>
<p>注意：括号中填写的是Node object类型的，是一个节点对象。不是要删除子节点的id值或者class值。即：要删除子节点，必须先获取到子节点才行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--示例HTML代码--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nested&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先定位父节点,然后删除其子节点</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;top&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> d_nested = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;nested&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> throwawayNode = d.<span class="title function_">removeChild</span>(d_nested);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无须定位父节点,通过parentNode属性直接删除自身</span></span><br><span class="line"><span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;nested&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (node.<span class="property">parentNode</span>) &#123;</span><br><span class="line">  node.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移除一个元素节点的所有子节点</span></span><br><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;top&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (element.<span class="property">firstChild</span>) &#123; <span class="comment">//div还有子节点，循环继续</span></span><br><span class="line">  element.<span class="title function_">removeChild</span>(element.<span class="property">firstChild</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>移除元素的属性</p>
<p>removeAttribute(“属性”)；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">div.<span class="title function_">removeAttribute</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">div.<span class="title function_">removeAttribute</span>(<span class="string">&quot;class&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="案例：动态生成表格"><a href="#案例：动态生成表格" class="headerlink" title="案例：动态生成表格"></a>案例：动态生成表格</h3><ol>
<li><p>生成学生数据</p>
<p>因为还没有学习数据库，所以在JS中创建对象来存储数据。</p>
<p>如果按照我的思路，我会创建很多个对象来存储每个人的数据，但老师在这里创建了一个数组，每个数组是对象类型的，妙啊。</p>
<p>这样就可以通过数组的length来动态获取对象的个数，很方便。</p>
<p><strong>注意</strong>：每个对象之间用逗号分隔</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> datas = [&#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&#x27;魏璎珞&#x27;</span>,</span><br><span class="line">           <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">           <span class="attr">score</span>: <span class="number">100</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&#x27;弘历&#x27;</span>,</span><br><span class="line">           <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">           <span class="attr">score</span>: <span class="number">98</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&#x27;傅恒&#x27;</span>,</span><br><span class="line">           <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">           <span class="attr">score</span>: <span class="number">99</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&#x27;明玉&#x27;</span>,</span><br><span class="line">           <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">           <span class="attr">score</span>: <span class="number">88</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&#x27;大猪蹄子&#x27;</span>,</span><br><span class="line">           <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">           <span class="attr">score</span>: <span class="number">0</span></span><br><span class="line">       &#125;];</span><br></pre></td></tr></table></figure>
</li>
<li><p>分析表格的结构</p>
<p><img src="/../img/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/image-20220406113534393.png" alt="image-20220406113534393"></p>
</li>
<li><p>总体思路</p>
<ul>
<li>先创建表头th（表头是定死的）</li>
<li>再创建行tr</li>
<li>再填充每行的内容（先填充前三列，然后填充最后一列）</li>
</ul>
</li>
<li><p>创建表头</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>科目<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>注意for循环的另外一种写法(针对对象的for循环)</p>
<p>比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> sister= &#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;甄嬛&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> sister) &#123;</span><br><span class="line">  <span class="comment">// k 得到的是属性名,即name和age</span></span><br><span class="line">   <span class="comment">//obj[k] 得到是属性值，即“甄嬛”和18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">var</span> tbody <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"tbody"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> datas<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//生成一行</span>
        <span class="token keyword">var</span> tr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tbody<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment" spellcheck="true">//生成每行的前三个td</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> datas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> td <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            td<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> datas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment" spellcheck="true">//生成每行的最后那个删除</span>
        <span class="token keyword">var</span> shanchu <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        shanchu<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'&lt;a href="#">删除&lt;/a>'</span> <span class="token comment" spellcheck="true">//注意不能都用双引号，单引号双引号交替着来</span>
        tr<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>shanchu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
   
    <span class="token comment" spellcheck="true">//给a标签绑定单击响应函数</span>
    <span class="token keyword">var</span> aa<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>aa<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token comment" spellcheck="true">//这个地方必须写this，不能写aa[i]，打印出来aa[i]是undefined，this是&lt;a href="#">删除&lt;/a>，很怪，到现在还没有弄清楚原因</span>
            tbody<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span>figure <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"highlight plaintext"</span><span class="token operator">></span><span class="token operator">&lt;</span>table<span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gutter"</span><span class="token operator">></span><span class="token operator">&lt;</span>pre<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">6</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">7</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">9</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">11</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">12</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">13</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">14</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">15</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">16</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">17</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">18</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">19</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">21</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">22</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">23</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">24</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">25</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">26</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">27</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">28</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">29</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">30</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">31</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">32</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">33</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">34</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">35</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">36</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">37</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">38</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">39</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">40</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">41</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">42</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">43</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">44</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">45</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">46</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">47</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">48</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">49</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">50</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">51</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">52</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">53</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">54</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">55</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">56</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">57</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">58</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">59</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">60</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">61</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">62</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">63</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">64</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">65</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">66</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">67</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">68</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">69</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">70</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">71</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">72</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">73</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">74</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">75</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">76</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">77</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">78</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">79</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">80</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">81</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">82</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">83</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">84</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">85</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">86</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">87</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">88</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">89</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">90</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"code"</span><span class="token operator">></span><span class="token operator">&lt;</span>pre<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   耶耶耶，时隔一天之后终于搞懂是什么原因了，因为单击响应函数是异步任务，当点击之后才会执行，而<span class="token keyword">for</span>循环是一开始就执行的，所以在点击的时候i已经自增到<span class="token number">4</span>了，aa<span class="token punctuation">[</span>i<span class="token punctuation">]</span>就越界了，所以是undefined。<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   原因：因为i是用<span class="token keyword">var</span>声明的，是全局变量，每一次<span class="token keyword">for</span>循环都会改变i的值。<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   改法：将<span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>改成<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>让他的作用域只在块中有用。<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>### 改变css样式<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">.</span> background属性<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> 属性                                                         <span class="token operator">|</span> 描述               <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>backgroundColor<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_backgroundcolor<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置元素的背景颜色 <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>backgroundImage<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_backgroundimage<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置元素的背景图像 <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">.</span> layout属性<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> 属性                                                         <span class="token operator">|</span> 描述                           <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_cursor<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置显示的指针类型             <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>height<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_height<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置元素的高度                 <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>overflow<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_overflow<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 规定如何处理不适合元素盒的内容 <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>display<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_display<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置元素如何被显示             <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>width<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_width<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置元素的宽度                 <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">.</span> position属性<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> 属性                                                         <span class="token operator">|</span> 描述                                                   <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_bottom<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置元素的底边缘距离父元素底边缘的之上或之下的距离     <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_left<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 置元素的左边缘距离父元素左边缘的左边或右边的距离       <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_position<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 把元素放置在<span class="token keyword">static</span><span class="token punctuation">,</span> relative<span class="token punctuation">,</span> absolute 或 fixed 的位置 <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_right<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 置元素的右边缘距离父元素右边缘的左边或右边的距离       <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_top<span class="token punctuation">.</span>asp<span class="token punctuation">)</span>  <span class="token operator">|</span> 设置元素的顶边缘距离父元素顶边缘的之上或之下的距离     <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>zIndex<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_zindex<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置元素的堆叠次序                                     <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">.</span> text属性<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> 属性                                                         <span class="token operator">|</span> 描述                 <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span> <span class="token punctuation">:</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_color<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置文本的颜色       <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">|</span> <span class="token punctuation">[</span>fontSize<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>w3school<span class="token punctuation">.</span>com<span class="token punctuation">.</span>cn<span class="token operator">/</span>jsref<span class="token operator">/</span>prop_style_fontsize<span class="token punctuation">.</span>asp<span class="token punctuation">)</span> <span class="token operator">|</span> 设置元素的字体大小。 <span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>## BOM<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>BOM：浏览器对象模型<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>在BOM中提供了一组对象，用来完成对浏览器的操作：<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">.</span> window：整个浏览器窗口，同时window也是网页的全局对象<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">.</span> navigator：当前浏览器信息，可以通过该对象识别不同的浏览器<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">.</span> location：当前浏览器地址栏信息，通过该对象可以获取地址栏信息，或者操作浏览器跳转页面<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">.</span> history：代表浏览器的历史记录。可以操作浏览器向前或向后<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">.</span> screen：用户的屏幕信息，通过该对线可以获取用户的显示器的相关信息<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>## 事件<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>### 元素绑定（注册）事件的格式<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">.</span> 传统方法：<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   事件源<span class="token punctuation">.</span>事件类型<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   特点：绑定的事件具有<span class="token operator">**</span>唯一性<span class="token operator">**</span>，即一个元素只能绑定一个事件，后面绑定的处理函数会覆盖掉之前注册的处理函数<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token function">事件监听注册方式</span><span class="token punctuation">(</span>推荐<span class="token punctuation">)</span>：<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token template-string"><span class="token string">`addEventListener(type, function(){}, useCapture])`</span></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">-</span> type<span class="token punctuation">:</span> 事件类型的字符串，比如click，mouseover，注意没有on<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">-</span> listener<span class="token punctuation">:</span>事件处理函数，事件发生的时候，会调用这个监听函数<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token operator">-</span> useCapture<span class="token punctuation">:</span>可选参数，默认是<span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   特点：同一个元素可以注册多个监听器，按照注册方式依次执行<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>### 删除（解绑）事件<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">.</span> 传统方法<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   示例：当第一次点击div的时候弹出“点我干啥”，之后再点击便不再有弹窗<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>   <span class="token template-string"><span class="token string">``</span></span>`js<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>     <span class="token keyword">var</span> div<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>     div<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"点我干啥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line"</span><span class="token operator">></span>          <span class="token comment" spellcheck="true">//在弹窗后便解绑事件&lt;/span>&lt;br>&lt;span class="line">              div.onclick=null;&lt;/span>&lt;br>&lt;span class="line">          }&lt;/span>&lt;br>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/figure></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>removeEventListener() </p>
<p>注意：用这个方法的时候就不能在绑定事件函数的时候用匿名函数绑定了，因为在解绑的时候需要解绑的函数的名字。所以在外面定义函数，在给对象绑定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">     div.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,fn);</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&quot;点我干啥&quot;</span>);</span><br><span class="line">         div.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>,fn);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="事件的捕获和事件的冒泡"><a href="#事件的捕获和事件的冒泡" class="headerlink" title="事件的捕获和事件的冒泡"></a>事件的捕获和事件的冒泡</h3><p><img src="/../img/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/image-20220406163915820.png" alt="image-20220406163915820"></p>
<ul>
<li>js代码中只能执行捕获或者冒泡这两个阶段的其中一个阶段</li>
<li>onclick和attachEvent只能得到冒泡阶段</li>
<li>addEventListener 既可以选择冒泡阶段，也可以选择捕获阶段。</li>
</ul>
<h4 id="捕获阶段"><a href="#捕获阶段" class="headerlink" title="捕获阶段"></a>捕获阶段</h4><p>addEventListener()的第三个参数是 true 那么则处于<strong>捕获</strong>阶段： <strong>document -&gt; html -&gt; body -&gt; father -&gt; son</strong></p>
<p>案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span><br><span class="line">son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里如果我们点击son，会先看document有没有绑定单击函数，如果没有，会向下一级，看html有没有绑定，如果没有，会向下一级，看body有没有绑定……依次往下，直到捕获到son，发现它绑定了单击响应函数，于是弹出弹窗。</p>
<p>即  <strong>document -&gt; html -&gt; body -&gt; father -&gt; son</strong></p>
<p>如果我们将代码改成下面这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span><br><span class="line">    son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span><br><span class="line">    &#125;, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span><br><span class="line">    father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line">    &#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>因为给father绑定了单击响应函数，所以在捕获的时候，会先弹出”father”，再弹出“son”。</p>
<h4 id="冒泡阶段"><a href="#冒泡阶段" class="headerlink" title="冒泡阶段"></a>冒泡阶段</h4><p>如果addEventListener 第三个参数是 false 或者 省略 ，那么则处于<strong>冒泡</strong>阶段 ： <strong>son -&gt; father -&gt;body -&gt; html -&gt; document</strong></p>
<p>案例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span><br><span class="line">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span><br><span class="line">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line"> <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<p>即点击son这个div的时候，先弹出son,再弹出father，再弹出document</p>
<h3 id="事件对象-event"><a href="#事件对象-event" class="headerlink" title="事件对象(event)"></a>事件对象(event)</h3><p>比如下面这个事件绑定函数，小括号里面就是事件对象（写在监听函数的小括号中，当作形参来看）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">xxx</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>事件对象只有触发了事件才会存在，他是系统自动给我们创建的。</p>
<p>如果我们需要使用事件对象的时候，比如获取鼠标点击时鼠标的坐标，获取键盘按下时按下的是哪个键，就在括号里填上我们给事件对象命名的名字，通常是event，e，evt</p>
<p>由于兼容性问题，ie中event应该写成window.event，所以我们通常写成下面这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">     event=event||<span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件对象的常见属性和方法"><a href="#事件对象的常见属性和方法" class="headerlink" title="事件对象的常见属性和方法"></a>事件对象的常见属性和方法</h3><h4 id="event-target-获取触发事件的对象是谁"><a href="#event-target-获取触发事件的对象是谁" class="headerlink" title="event.target:获取触发事件的对象是谁"></a>event.target:获取触发事件的对象是谁</h4><p>兼容性：ie中是event.srcElement,所以通常写成：<code>var target = event.target || event.srcElement</code></p>
<p>注意这里要区分this和target的区别，this是绑定该事件函数的对象，target是触发该事件的对象。</p>
<p>示例：HTML的结构是ul中有li，我们给ul绑定了单击响应函数，因为冒泡的原因，我们在点击li的时候也会触发单击响应函数。</p>
<p>此时，触发事件的是li,绑定事件的是ul。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this:&lt;ul&gt;&lt;/ul&gt;</span><br><span class="line">e&lt;li&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>



<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="1-setInterval"><a href="#1-setInterval" class="headerlink" title="1. setInterval"></a>1. setInterval</h3><p>功能：让一段程序每间隔一段时间执行一次（循环执行）</p>
<p>语法：<code>setInterval(回调函数名，间隔时间[单位：毫秒])</code></p>
<p>返回值：返回Number类型的数字，用来作为定时器的唯一标识（区分多个定时器）</p>
<p>示例：（此时的匿名函数为回调函数)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//要执行的code</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-clearInterval"><a href="#2-clearInterval" class="headerlink" title="2.clearInterval"></a>2.clearInterval</h4><p>功能：将setINterval设置的定时器关闭</p>
<p>语法：clearInterval(定时器的名字)</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> count = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;count&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> time=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">innerHTML</span>=num++;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(num == <span class="number">11</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-setTimeout"><a href="#3-setTimeout" class="headerlink" title="3.setTimeout"></a>3.setTimeout</h3><p>功能：一个函数不马上执行，过一段时间后才执行（只执行一次）</p>
<p>语法：<code>setInterval(回调函数名，间隔时间[单位：毫秒])</code></p>
<h3 id="4-clearTimeout"><a href="#4-clearTimeout" class="headerlink" title="4.clearTimeout"></a>4.clearTimeout</h3><p>功能：关闭setTimeout设置的延时器</p>
<p>语法：clearTimeout(延时器的名字)</p>
<h2 id="JS和C语言的不同之处"><a href="#JS和C语言的不同之处" class="headerlink" title="JS和C语言的不同之处"></a>JS和C语言的不同之处</h2><ol>
<li><p>JS中声明变量用的是let或者var,它是一种弱类型语言（动态语言），不用声明变量的类型，并且变量的数据类型是可以变化的，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name =<span class="string">&quot;zhiruo&quot;</span>;</span><br><span class="line">name = <span class="number">123</span>; <span class="comment">//这里强制将字符串类型转化为了数值类型</span></span><br></pre></td></tr></table></figure>



<p>并且，JS中变量可以不用声明直接赋值  </p>
</li>
<li><p>JS中没有字符类型，只有字符串类型，并且字符串既可以用双引号引起来，也可以用单引号引起来</p>
</li>
<li><p>JS中字符串的长度用的是<code>str.length;</code>而C++中字符串的长度用的是<code>str.length()</code></p>
</li>
<li><p>+号</p>
</li>
</ol>
<p>在C语言中，+号就是加号，而在JS中”+“有可能是加号（数值相加），也有可能是连字符（字符串拼接），类似C++中的运算符重载。要区分清楚以下几种情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我&quot;</span> + <span class="string">&quot;爱&quot;</span> + <span class="string">&quot;你&quot;</span>);	<span class="comment">//连字符，把三个独立的汉字，连接在一起了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我+爱+你&quot;</span>);			<span class="comment">//原样输出</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>);				<span class="comment">//输出6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>+<span class="string">&#x27;3&#x27;</span>);	</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>-<span class="string">&#x27;3&#x27;</span>);	</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我爱你</span><br><span class="line">我+爱+你</span><br><span class="line">6</span><br><span class="line">53</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>如果加号两边都是Number类型，那么就是数字相加，否则，就是连字符相加</li>
<li>如果符号是减号，除号，乘号，取模运算符，计算机会帮忙进行隐式转换，即5-’3‘的运算结果是2</li>
</ul>
<ol start="5">
<li><p>JS中的函数可以嵌套定义,c语言不可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//fn1中嵌套定义了fn2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用fn2</span></span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>函数fn2只能在fn1中调用，如果在fn1外面调用，将会报错</li>
<li>如果嵌套的内层函数使用了外层函数的变量或参数，即fn2中使用了fn1中的变量a，这个嵌套函数就形成了一个闭包</li>
<li>闭包能在它fn1执行完之后仍然能够访问fn1里的变量和参数</li>
</ul>
</li>
<li><p>JS是<strong>基于对象（object-based）的语言</strong>。 但是，它又不是一种真正的面向对象编程语言，因为它的语法中没有C++中的class（类）（在es6以前）。在C++中，“类”就是对象的模板，对象就是“类”的实例。JS不是基于类的，二十基于构造函数和原型链的。</p>
<p>即：JS使用构造函数来作为对象的模板，构造函数就是专门生成实例对象的函数</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/02/25/hello-world/</url>
    <content><![CDATA[<p>这里芷若</p>
<p>无论做什么事都喜欢和自己较劲</p>
<p>身处这个快节奏的时代，强烈感觉自己的语言表达水平在不断的退化</p>
<p>趁着寒假有时间 也是学校的一个活动 自己便搭建了这个博客</p>
<p>以后不定期的会更新一些生活小记和学习笔记</p>
<p>欢迎你的到访~</p>
]]></content>
  </entry>
  <entry>
    <title>flex布局</title>
    <url>/2022/03/23/flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="布局原理"><a href="#布局原理" class="headerlink" title="布局原理"></a>布局原理</h2><p>flex是flexible Box 的缩写，是弹性布局的意思。</p>
<span id="more"></span>

<ul>
<li>块级元素和行内元素可以指定为flex布局</li>
<li>将父元素设置为flex布局后，子元素的浮动，清除浮动，vertical-align的属性都会失效</li>
<li>父元素称为“容器”，子元素称为“项目”，子元素可以横向排列也可以纵向排列</li>
</ul>
<p>通过给父元素增加flex属性来控制子元素的位置和排列方式</p>
<p><strong>注意</strong>：</p>
<p>以下所有属性的演示都是基于以下HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#74c0fc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#1c7ed6</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>初始界面：</strong></p>
<img src="../img/flex布局/image-20220323213110551.png" alt="image-20220323213110551" style="zoom: 25%;" />

<ul>
<li><p>设置主轴方向：flex-direction</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>主轴方向</th>
</tr>
</thead>
<tbody><tr>
<td>row</td>
<td>系统<strong>默认值</strong>，从左到右</td>
</tr>
<tr>
<td>row-reverse</td>
<td>从右到左</td>
</tr>
<tr>
<td>column</td>
<td>从上到下</td>
</tr>
<tr>
<td>column-reverse</td>
<td>从下到上</td>
</tr>
</tbody></table>
</li>
<li><p>设置主轴上子元素的排列方式: justify-content </p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>子元素的排列方式</th>
</tr>
</thead>
<tbody><tr>
<td>flex-start</td>
<td>系统<strong>默认值</strong>，从头开始，如果主轴为x轴，则从左到右</td>
</tr>
<tr>
<td>flex-end</td>
<td>从尾部开始排列</td>
</tr>
<tr>
<td>center</td>
<td>从主轴居中对齐（若主轴是x轴则元素水平居中）</td>
</tr>
<tr>
<td>space-around</td>
<td>平分剩余空间</td>
</tr>
<tr>
<td>space-between</td>
<td>两边贴边，再平分剩余空间</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="父项属性"><a href="#父项属性" class="headerlink" title="父项属性"></a>父项属性</h2><h3 id="设置主轴的方向：flex-direction"><a href="#设置主轴的方向：flex-direction" class="headerlink" title="设置主轴的方向：flex-direction"></a>设置主轴的方向：flex-direction</h3><p>子元素跟着主轴来排列</p>
<p><code>flex-direction:row; </code> 默认，子元素从左到右排列</p>
<img src="../img/flex布局/image-20220323213728101.png" alt="image-20220323213728101" style="zoom: 25%;" />

<p><code>flex-direction:row-reverse;</code>   子元素从右到左排列</p>
<img src="../img/flex布局/image-20220323213753046.png" alt="image-20220323213753046" style="zoom:25%;" />

<p><code>flex-direction:column; </code> 子元素从上到下排列</p>
<img src="../img/flex布局/image-20220323213813801.png" alt="image-20220323213813801" style="zoom:25%;" />

<p><code>flex-direction:column-reverse；</code>子元素从下向上排列</p>
<img src="../img/flex布局/image-20220323213905360.png" alt="image-20220323213905360" style="zoom:25%;" />

<h3 id="设置主轴上子元素的排列方式-justify-content"><a href="#设置主轴上子元素的排列方式-justify-content" class="headerlink" title="设置主轴上子元素的排列方式: justify-content"></a>设置主轴上子元素的排列方式: justify-content</h3><p><code>justify-content ：flex-start</code></p>
<img src="../img/flex布局/image-20220323214852302.png" alt="image-20220323214852302" style="zoom:25%;" />

<p><code>justify-content ：flex-end</code></p>
<p>这里注意区分与<code>flex-direction:row-reverse;</code>的区别，这个的元素依旧是从左向右的方向的，只不过靠右紧贴</p>
<img src="../img/flex布局/image-20220323215031321.png" alt="image-20220323215031321" style="zoom:25%;" />

<p><code>justify-content :center</code></p>
<img src="../img/flex布局/image-20220323215241090.png" alt="image-20220323215241090" style="zoom:25%;" />

<p><code>justify-content ：space-around</code></p>
<img src="../img/flex布局/image-20220323215351121.png" alt="image-20220323215351121" style="zoom:25%;" />

<p><code>justify-content ：space-between</code></p>
<img src="../img/flex布局/image-20220323215414603.png" alt="image-20220323215414603" style="zoom:25%;" />

<h3 id="设置侧轴上的子元素的排列方式：align-items（单行）"><a href="#设置侧轴上的子元素的排列方式：align-items（单行）" class="headerlink" title="设置侧轴上的子元素的排列方式：align-items（单行）"></a>设置侧轴上的子元素的排列方式：align-items（单行）</h3><p><strong>注意</strong>，该属性只能在子元素只有单行的时候才可以</p>
<p>控制子元素在侧轴（默认是y轴）上的排列方式</p>
<p><code>align-items:flex-start</code>:默认值，从上到下排列</p>
<img src="../img/flex布局/image-20220323220839174.png" alt="image-20220323220839174" style="zoom:25%;" />

<p><code>align-items:center</code>:居中</p>
<img src="../img/flex布局/image-20220323221003410.png" alt="image-20220323221003410" style="zoom:25%;" />

<p><code>align-items:flex-end</code>:从下到上排列</p>
<img src="../img/flex布局/image-20220323221028283.png" alt="image-20220323221028283" style="zoom:25%;" />

<h3 id="设置侧轴上的子元素的排列方式：align-content（多行）"><a href="#设置侧轴上的子元素的排列方式：align-content（多行）" class="headerlink" title="设置侧轴上的子元素的排列方式：align-content（多行）"></a>设置侧轴上的子元素的排列方式：align-content（多行）</h3><p><strong>注意</strong>：该属性只有在子元素换行的时候才可以使用，即使用该属性首先要<code>flex-wrap:wrap</code>.</p>
<p><code>align-content:flex-start;</code>默认值，从侧轴的头部开始排列</p>
<img src="../img/flex布局/image-20220323222102413.png" alt="image-20220323222102413" style="zoom:33%;" />

<p><code>align-content:center;</code>默认值，从侧轴的中间显示</p>
<img src="../img/flex布局/image-20220323222144296.png" alt="image-20220323222144296" style="zoom: 50%;" />

<p><code>align-content:space-around;</code>子元素在侧轴评分剩余元素</p>
<p><code>align-content:space-between;</code>子元素在侧轴先分布在两头，在平分剩余空间</p>
<p><code>align-content:stretch</code>:子元素不设置高度，子严肃的高度评分父元素高度</p>
<h3 id="设置子元素是否换行-：flex-wrap"><a href="#设置子元素是否换行-：flex-wrap" class="headerlink" title="设置子元素是否换行 ：flex-wrap"></a>设置子元素是否换行 ：flex-wrap</h3><p>在演示这个属性，为了清楚，我给子元素增加了左外边距</p>
<img src="../img/flex布局/image-20220323215951913.png" alt="image-20220323215951913" style="zoom: 50%;" />

<p>我又增加了3个子元素</p>
<img src="../img/flex布局/image-20220323220019157.png" alt="image-20220323220019157" style="zoom: 50%;" />

<p><code>flex-wrap:nowrap</code>(默认不换行，如果父元素一行内子元素放不下，会自动缩小子元素的宽度)</p>
<p>可以发现，增加了子元素之后一行明显放不下了，所以系统默认将子元素的宽度缩小了。</p>
<p><code>flex-wrap:wrap</code></p>
<img src="../img/flex布局/image-20220323220132789.png" alt="image-20220323220132789" style="zoom: 50%;" />
]]></content>
  </entry>
  <entry>
    <title>一些好用的网站</title>
    <url>/2022/02/28/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>下面是自己最近冲浪看到的一些很好的网站，分享给你</p>
<span id="more"></span>

<ul>
<li><p>可以提高图片分辨率的网站：</p>
<p><a href="https://bigjpg.com/">https://bigjpg.com/</a></p>
</li>
<li><p>超喜欢的练习打字网站（小白的我从练习打字开始）</p>
<p><a href="https://www.typing.com/">https://www.typing.com/</a></p>
</li>
<li><p>网道，简洁舒适的编程教程（阮一峰前辈yyds)：</p>
<p><a href="https://wangdoc.com/">https://wangdoc.com/</a></p>
</li>
<li><p>STL超全工具书，方便查询：</p>
<p><a href="https://blog.csdn.net/weixin_45761327/article/details/107561697">https://blog.csdn.net/weixin_45761327/article/details/107561697</a></p>
</li>
<li><p>adobe全家桶（2020年的）：</p>
<p><a href="https://www.yuque.com/books/share/205ec53c-5013-4bdb-ad02-ac96cc761203/nnun78">https://www.yuque.com/books/share/205ec53c-5013-4bdb-ad02-ac96cc761203/nnun78</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>也茫然 还好有勇敢</title>
    <url>/2022/02/26/%E4%B9%9F%E8%8C%AB%E7%84%B6-%E8%BF%98%E5%A5%BD%E6%9C%89%E5%8B%87%E6%95%A2/</url>
    <content><![CDATA[<p>这是我建站后的一些感受</p>
<span id="more"></span>

<h3 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h3><p>　　一直都是一个只有三分钟热度的人</p>
<p>　　对所有好玩的事情都投以极大的热情，一刻也等待不了，但一旦细究其实现的方法和难度，便会败下阵来。</p>
<p>　　所以，这个博客的诞生对我来说简直就是一个奇迹。进入计算机专业，有时查找资料时无意访问到别人的博客，心生羡慕，便立即涌现出自己也制作一个的冲动，可自己上手，才发现原来绚丽的页面的搭建，不仅需要学习HTML，CSS，还需要学习JavaScript，命令行操作。</p>
<p>　　在蓝图的孵化器的项目中，趁着寒假的闲暇时间，我才慢慢的学习，搭建了这个博客，并自制了2048小游戏。当完成了之后回望自己的学习历程，不禁感慨万千，故写下这篇小记。　　</p>
<hr>
<h3 id="贰"><a href="#贰" class="headerlink" title="贰"></a>贰</h3><p>　　都说计算机专业是活到老学到老，可在高中都是老师手把手教授，什么做题方法、知识串联，老师都不厌其烦的进行讲解，做这次任务，才明白，我总要学会，自己去面对所有的难。</p>
<p>　　还没有进入大学时，总是想象着，课堂上教授的谈笑风生，一切的知识都是那么新奇而又有趣，可当我步入校园，才发现理论和现实的鸿沟。上课听的云里雾里，作业也不太会做，课后又得自己找教程再次学习，刚开始的时候，我特别不适应这样超负荷的生活，一想到自己捉襟见肘的生活，眼泪就止不住地往下掉（真是个爱哭鬼）。</p>
<p>　　两周下来，我有些开窍。我以前曾无比渴望在受伤难过时、孤独无依时，得到其他人的回应、理解和陪伴。于是一emo就打开聊天框寻求安慰。可朋友能给我一时的安慰和鼓励，但这毕竟都是有限的，大家都有自己的事情要做，怎么能整天麻烦别人。我总要面对没人帮忙、没人支持、没人嘘寒问暖的日子，最终解决问题还是要靠自己。每个人的生活，无论酸甜苦辣，都要自己去品尝。每个人的道路，无论顺遂还是曲折，都要自己去行走。</p>
<p>　　后来，我渐渐找到了平衡的方法，课前要先预习，这样上课就可以跟上老师的步伐，大学，真就是大不了自己学，累的时候就少说闲话、少想乱七八糟的事，困的时候就早睡不熬夜，心里感觉苦了，赶紧拿颗糖塞嘴里。我不断给自己打气说，小周小周冲冲冲。</p>
<p>　　我曾害怕面对一切艰难险阻，直到生活给了我一道道坎，才教会了我如何在挫折和痛苦中一步一步变强。　　</p>
<hr>
<h3 id="叁"><a href="#叁" class="headerlink" title="叁"></a>叁</h3><p>　　蓝图的第一个任务就是部署自己的网页，并自学HTML，CSS，JavaScript制作2048小游戏。前一周，我兴冲冲的打开HTML和CSS的教程，心想：不过如此嘛。可拧巴又好强的我不想只部署一个网站，我想把网站做成博客，把小游戏嵌到里面。可真正到了部署自己的博客的时候才发现，原来很多事情并不是在界面化的界面做的，而是要涉及到那个黑框框样子的命令行，里面复杂的指令和只要随便输错一点点就会乱七八糟弹出来一大堆不认识的英文，真是让我这个从未接触过命令行的小白头大。</p>
<p>　　在网上大海捞针般的搜索云开发和静态网站托管的知识，了解其中的机理和命令行的内容，我坐在电脑前就忘了时间。</p>
<p>　　开始是，出了错误但不知道错哪了，只能删除自己之前已经部署了大部分的网站，推到重来，有放不下的吧，毕竟是自己费了好大功夫才做好的，可如果不重来，依照现在自己这个水平也修不好它呀（有点对不起那些“胎死腹中”的网页哈哈哈）。</p>
<p>　　当时就想起了曾经在书上看到的一个故事：一个人上火车时不小心掉了一只新鞋，等火车开动了他才发现。这时，他毫不犹豫地把另一只鞋也从窗口扔了出去。其他乘客很不理解，他解释说，那双鞋不论多么昂贵，对他而言都已经失去作用了，而捡到这双鞋的人就不同了。所以，与其留一只对自己无用的鞋，倒不如选择放弃，或许会成全另一个人呢？</p>
<p>　　一次次的推倒重来，在不断的试错中，我的内心独白常常是：</p>
<p>　　“怎么又错了！这次又是哪里不对”</p>
<p>　　“为什么我本地预览出来都在好着呢，推送到终端就不行了”</p>
<p>　　”原来我找了二十分钟的错误是冒号后少了一个空格 ！“</p>
<p>　　可渐渐的，我的命令敲得越来越顺了，我的操作也越来越熟悉了，面对错误，我可以不用推到重来（因为我已经能大概看懂命令行的提示了），甚至英语都有所进步（命令行里都是英文，教程也好多都是英文）。</p>
<p>　　原来啊，只要努力坚持下去，真的有可能看到光明。</p>
<p>　　原来啊，如果我只想看到结果再出发，那我将永远不会知道结果在哪儿。</p>
<hr>
<h3 id="肆"><a href="#肆" class="headerlink" title="肆"></a>肆</h3><p>　　又又又坐在电脑前捣鼓了一下午，乱七八糟的命令行错误真是让人头大，搭建一个网站真的对我这种小白真的太不容易了。回忆下来，这两周我竟然捣鼓了这么多东西，先在云开发中先搭建了个博客，又因为不好访问把把博客迁移到了GitHub，顺便学会了搭梯子（感谢lyx的北大梯子🙆‍♀️），但因为GitHub网页每次更新不及时，我又买服务器，买域名，给域名备案，给服务器备案，申请SSL证书，买COS资源包，部署SSL证书，在云服务器用Linux命令行指示。这一路对我来说很艰难，虽然不属于算法题那种烧脑类型的，但里面涉及到的全都是我从未涉足的知识，终于终于，终于部署完成了！真的整个人都瘫在沙发上。天生拧巴的人终于和自己硬刚了一次。</p>
<p>　　最后，以一句我很喜欢的话结尾吧。</p>
<blockquote>
<p>我与我周旋久，宁作我。</p>
</blockquote>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>文件操作</title>
    <url>/2022/04/01/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>文件操作的相关知识点总结和程设中的演示程序的详解</p>
<span id="more"></span>

<h3 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h3><p>文件分为文本文件(.txt)和二进制文件</p>
<p>文本文件：保存的时候，每一个字符对应一个字节</p>
<p>二进制文件：二进制编码保存的文件</p>
<h3 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a>设备文件</h3><p>当启动一个程序的时候，系统会打开3个设备文件</p>
<p>stdin:标准输入文件(鼠标，键盘)，默认情况下，标准输入设备是硬盘</p>
<p>stdout:标准输出文件（显示器），默认情况下，标准输出设备是显示器</p>
<p>stderr:标准错误文件，一般为显示器</p>
<h3 id="文件的重定向"><a href="#文件的重定向" class="headerlink" title="文件的重定向"></a>文件的重定向</h3><p>重定向符号：</p>
<p>“&lt;” 输入重定向 </p>
<p>“&gt;”输出重定向</p>
<p>以下面这个程序为例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> i;</span><br><span class="line">   <span class="type">int</span> a[<span class="number">5</span>];  </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;input 5 numbers:\n&quot;</span>);   </span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;the 5 numbers are:\n&quot;</span>);     </span><br><span class="line">   <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d,&quot;</span>,a[i]);    </span><br><span class="line">        </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个程序就是只有标准输入输出，即我可以直接在编译器中运行，得到的结果是这样的：</p>
<p><img src="/../img/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/image-20220401230356231.png" alt="image-20220401230356231"></p>
<p>重定向：将标准输入换成文件输入输出，即输入流改为data1.txt这个文件，将结果输出到data2.txt中。</p>
<p>方法：在放程序的这个文件夹中新建data1.txt，输入1，2，3，4，5并保存。在在文件资源管理器中找到本程序的exe文件所在的位置，在cmd中输入可执行程序的名字和重定向的位置，就可以在新建的data2.txt中得到输出结果</p>
<p><img src="/../img/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/image-20220401230628109.png" alt="image-20220401230628109"></p>
<h3 id="文件访问方式"><a href="#文件访问方式" class="headerlink" title="文件访问方式"></a>文件访问方式</h3><table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">r</td>
<td align="left">只读的方式打开。不创建文件，如果文件不存在会报错</td>
</tr>
<tr>
<td align="left">w</td>
<td align="left">只写的方式打开。如果文件不存在，则会创建一个新文件。如果文件存在，则会先清空文件中原来的内容，在重新写入。</td>
</tr>
<tr>
<td align="left">a</td>
<td align="left">追加的方式打开。如果文件不存在，则会创建一个新文件。如果文件存在，会在已有的文件内容中追加内容。</td>
</tr>
<tr>
<td align="left">r+</td>
<td align="left">可读可写的方式打开，不创建新文件</td>
</tr>
<tr>
<td align="left">w+</td>
<td align="left">可读可写的方式打开。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td>
</tr>
<tr>
<td align="left">a+</td>
<td align="left">允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td>
</tr>
</tbody></table>
<p>如果处理的是二进制文件，则需要使用下面的访问方式：</p>
<p><code>&quot;rb&quot;, &quot;wb&quot;, &quot;ab&quot;, &quot;rb+&quot;, &quot;r+b&quot;, &quot;wb+&quot;, &quot;w+b&quot;, &quot;ab+&quot;, &quot;a+b&quot;</code></p>
<p>常用的就是“r”和“w”，r:不创建也不清空，w:会创建也会清空</p>
<h3 id="打开文件：fopen"><a href="#打开文件：fopen" class="headerlink" title="打开文件：fopen"></a>打开文件：fopen</h3><p>语法：<code>FILE *fopen(const char *文件名,&quot;文件访问模式&quot;)</code></p>
<p>返回值：成功：指向该文件的文件流的指针（即FILE结构体的地址）</p>
<p>​              失败：NULL</p>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE*fp=fopen(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(fp==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  perror(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>perror() 函数：把错误消息输出到标准错误 stderr。</p>
<p>语法：<code>void perror(const char *str)</code></p>
<p>格式：输出字符串 <strong>str</strong>，后跟一个冒号，然后是一个空格,然后是错误信息</p>
<p>如果此文件夹下没有a.txt的文件，则会输出<code>Error: No such file or directory</code></p>
<h3 id="关闭文件：fclose"><a href="#关闭文件：fclose" class="headerlink" title="关闭文件：fclose"></a>关闭文件：fclose</h3><p>语法：<code>int  fclose (FILE * fp) ;</code> </p>
<p>返回值：如果成功关闭文件，则返回0，如果关闭文件时发生错误，则返回EOF。</p>
<h3 id="文件的顺序读写："><a href="#文件的顺序读写：" class="headerlink" title="文件的顺序读写："></a>文件的顺序读写：</h3><h4 id="按照字符读写文件：fputc-fgetc"><a href="#按照字符读写文件：fputc-fgetc" class="headerlink" title="按照字符读写文件：fputc,fgetc"></a>按照字符读写文件：fputc,fgetc</h4><ol>
<li>读文件：fgetc（从给定输入流中读取下一个字符）</li>
</ol>
<ul>
<li><p>语法：<code>int fgetc(FILE* stream) ;</code></p>
</li>
<li><p>返回值：成功时返回将读取到的字符转化为int类型的字符，失败时返回EOF</p>
</li>
</ul>
<p>注意：fgetc常与feof配合使用，如下面这个例子实现了把fp1的内容拷贝到fp2中去，并在读取完成后时退出循环。</p>
<p>补充：feof 的功能时检查本字符的下一个字符是否已经抵达给定文件流的结尾，如果抵达则返回非零，如果未抵达则返回0</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">char</span> ch = fgetc(fp1);</span><br><span class="line"><span class="keyword">if</span>(feof(fp1))&#123;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">fputc(ch,fp2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>写文件：fputc(将一个字符写到文件中)</li>
</ol>
<ul>
<li><p>语法：<code>int fputc(int ch,FILE*fp)</code></p>
</li>
<li><p>功能：将char转化为unsigned char后写入fp文件中</p>
</li>
<li><p>参数：ch:需要写入的文件的字符</p>
<p>​           stream:文件指针（所以在此之前需要用fopen获得文件的指针）</p>
</li>
<li><p>返回值：成功：返回成功写入的字符</p>
<p>​              失败：返回EOF</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">FILE*fp = fopen(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="type">char</span> s[]=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//将字符串写入文件</span></span><br><span class="line"><span class="keyword">while</span>(s[i])&#123;</span><br><span class="line">  fputc(s[i],fp);<span class="comment">//后续都会按照次序依次“流入”文件流中，因为文件指针会默认后移，而不是每次循环的时候都从头</span></span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="按照行读写文件：fgets-fputs"><a href="#按照行读写文件：fgets-fputs" class="headerlink" title="按照行读写文件：fgets,fputs"></a>按照行读写文件：fgets,fputs</h4><ol>
<li><p>读文件：fgets(只能操作字符串，泵操作二进制文件)</p>
<ul>
<li><p>语法：<code>char*fgets(char *str,int size,FILE *stream)</code></p>
</li>
<li><p>参数：str:指向字符串的指针，size:你指定的最大读取字符串的长度（会自动加”&#x2F;0”所以只能读n-1个）stream：文件指针</p>
</li>
<li><p>功能：从stream指向的文件中读取字符，保存到str所志昂的内存空间中，直到出现①换行符②读到文件结尾③读了size-1个字符为止</p>
</li>
<li><p>返回值：成功：成功读取的字符串首元素的地址</p>
<p>​              失败：读到文件结尾或者出错：NULL(空指针)</p>
</li>
</ul>
<p>示例：</p>
<p>a.txt</p>
<p>‘a’ ‘b’ ‘\n’</p>
<p>‘c’ ‘\0’  ‘d’ ‘e’  ‘f’ ‘g’ ‘j’ ‘\n’</p>
<p>‘\0’ ‘x’ ‘y’  ‘\n’</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">5</span>];</span><br><span class="line">FILE*fp = fopen(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">fgets(buf,<span class="number">5</span>,fp);</span><br></pre></td></tr></table></figure>

<p>一共需要读4次，每次存放到buf中的内容如下：<br>第一次： a b ‘\n’ ‘\0’ [遇到换行符就终止，并且加上’\0’]</p>
<p>第二次：c ‘\0’ d e ‘\0’ [size&#x3D;5，所以最多只能读取4个字符]</p>
<p>第三次：f g j ‘\n’ ‘\0’ [遇到换行符]</p>
<p>第四次：’\0’ x y ‘\n’ ‘\0’</p>
</li>
<li><p>写文件：fputs</p>
<ul>
<li><p>语法：int fputs(const char *str,FILE *stream)</p>
</li>
<li><p>功能：将str所指向的字符串写入到stream所指向的文件中，且字符串中的结束符’\0’不会写入文件</p>
</li>
<li><p>返回值：成功：非负值</p>
<p>​              失败：EOF  ，遇到’\0’就结束了，所以中间有’\0’就终止读入了</p>
</li>
</ul>
</li>
</ol>
<h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><ol>
<li><p>绝对路径：目标文件在磁盘上的真实路径，比如：D:\A\bupt\高数</p>
</li>
<li><p>相对路径：</p>
<p>引用上级文件： ..&#x2F;1.jpg</p>
<p>引用同级文件：1.jpg</p>
<p>引用下级文件：picture&#x2F;1.jpg</p>
<p>引用上上级文件：..&#x2F;..&#x2F;1.jpg</p>
</li>
</ol>
<h3 id="简易文件压缩"><a href="#简易文件压缩" class="headerlink" title="简易文件压缩"></a>简易文件压缩</h3><p>前置知识：</p>
<ul>
<li><p><code>int main(int argc,char* argv[ ])</code></p>
<p>argc（argument counter）：是命令行总的参数个数</p>
<p>argv[]（argument value）：指针数组，用来存放指向命令行参数（字符串）的指针，每个元素指向一个参数。</p>
<p>argv[0] : 可编译程序（.exe）的在电脑中绝对路径</p>
<p>argv[argc]：NULL</p>
</li>
<li><p><code>int fprintf( FILE *stream, const char *format, ... );</code></p>
<p>类似与printf，format可以是%s，%d等等</p>
<p>示例：</p>
<p>a.txt 内容：小熊</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	FILE*fp=fopen(<span class="string">&quot;./a.txt&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s %s %s&quot;</span>,<span class="string">&quot;喜欢春天&quot;</span>,<span class="string">&quot; 我也喜欢春天&quot;</span>,<span class="string">&quot; 你呢&quot;</span>);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后：</p>
<p>a.txt内容：小熊喜欢春天 我也喜欢春天 你呢</p>
<p>所以<code>fprintf(stderr, &quot;Usage: %s filename\n&quot;, argv[0]);</code>的意思是将错误信息写进stderr这个标准错误文件中。</p>
</li>
<li><p>exit（）</p>
<p>exit(0)代表程序正常退出，其余都表示异常终止，可以通过返回的具体的数值来判断出错的根源在哪里</p>
</li>
<li><p>“&lt;” 输入重定向 </p>
<p>“&gt;”输出重定向</p>
</li>
</ul>
<p>代码详解：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>    <span class="comment">// for exit()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>    <span class="comment">// for strcpy(), strcat()</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 40</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE  *in, *out;   </span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line">    <span class="type">char</span> name[LEN];    </span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 检查命令行参数 </span></span><br><span class="line"><span class="comment">//如果命令行的参数等于1，则不用压缩，因为本程序是将每三个字符压缩成1个字符，所以在标准错误输出中弹出错误提示信息</span></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s filename\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">         <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//argv[1]:作为输入流参数的文件的名字，如果文件打开失败，则在标准输出中弹出无法打开文件</span></span><br><span class="line">    <span class="keyword">if</span> ((in = fopen(argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;I couldn&#x27;t open the file \&quot;%s\&quot;\n&quot;</span>,</span><br><span class="line">                argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将输入的文件名字字符串拷贝到name字符数组中</span></span><br><span class="line">    <span class="built_in">strcpy</span>(name,argv[<span class="number">1</span>]); </span><br><span class="line">    <span class="comment">//将name字符数组后面追加上后缀，即.red</span></span><br><span class="line">    <span class="built_in">strcat</span>(name,<span class="string">&quot;.red&quot;</span>);    </span><br><span class="line">    <span class="comment">//打开name这个文件夹，(如果你将a.txt作为输入流，那么这时候name字符串就是a.txt.red，打开的就是待压缩的文件),因为是以只写的方式打开，且之前并没有这个文件，所以会新建这个文件。</span></span><br><span class="line">    <span class="comment">//下面这个if是判断如果打开文件失败，则在标准错误输出中输出“不能创建output文件”，并exit(3)</span></span><br><span class="line">    <span class="keyword">if</span> ((out = fopen(name, <span class="string">&quot;w&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;                       <span class="comment">// open file for writing</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;Can&#x27;t create output file.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//压缩文件，用getc(in)) != EOF判断是否读到了文件末尾，每隔三个字符将其中的第一个字符写入out所指向的文件中（也就是a.txt.red)</span></span><br><span class="line">    <span class="keyword">while</span> ((ch = getc(in)) != EOF)</span><br><span class="line">        <span class="keyword">if</span> (count++ % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            putc(ch, out);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">    <span class="keyword">if</span> (fclose(in) != <span class="number">0</span> || fclose(out) != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">&quot;Error in closing files\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><p>在程序同一个目录下创建一个a.txt，然后再命令行里输入<img src="/../img/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/image-20220402111008546.png" alt="image-20220402111008546"></p>
<p>即程序名+空格+待压缩文件</p>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>离散数学の笔记</title>
    <url>/2022/03/30/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>离散的一些习题和我的笔记（可恶的逻辑学，咬牙切齿</p>
<span id="more"></span>

<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><h3 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h3><p>¬ ⟷ →Ⅴ ⋀⟺ ∀ ∃</p>
<h4 id="命题与联结词"><a href="#命题与联结词" class="headerlink" title="命题与联结词"></a>命题与联结词</h4><ol>
<li><p>x+y&gt;6；不是命题，因为其无法判断真假</p>
</li>
<li><p>“3大于或等于3”是复合命题，由简单命题“3大于3”和“3等于3”组成，联结词是：或</p>
</li>
<li><p>“张三和李四是同学”不是复合命题，因为“和”只是张三与李四的联结，不是两个命题的联结</p>
</li>
<li><p>a:这个课很有趣，b:这个习题很难 请表示：</p>
<p>这个内容有趣意味着这个习题很难，而且两者反之亦然：a⟷b</p>
<p>或者这个内容有趣，或者这个习题很难，并且两者恰具其一：(¬a ⋀b)Ⅴ(a ⋀¬b)</p>
</li>
<li><p>当且仅当：⟷，当两者真值相同时才为真</p>
</li>
<li><p>如果下雨，他就开车上班</p>
<p>只有下雨，他才开车上班</p>
<p>除非下雨，否则他不开车上班</p>
<p>上面三个句子符号化后都为p→q</p>
</li>
<li><p>不经一事，不长一智：</p>
<p>p:经一事 q:长一智  ¬p→¬q</p>
</li>
</ol>
<h4 id="判断真值"><a href="#判断真值" class="headerlink" title="判断真值"></a>判断真值</h4><ol>
<li>画真值表来判断（万能），A为重言式当且仅当A的真值表的最后一列全为1，A为矛盾式</li>
<li></li>
</ol>
<ul>
<li><strong>Let N(x) be the statement that “x has visited North Dakota,” where the domain consists of the students in</strong></li>
</ul>
<p><strong>your school. Express each of these quantifications in English.</strong> </p>
<p>a) ∃ x N(x) </p>
<p>Some student in the school has visited North Dakota. (Alternatively, there exists a student in the school who has </p>
<p>visited North Dakota.) </p>
<p>b) ∀ x N(x) </p>
<p>Every student in the school has visited North Dakota. (Alternatively, all students in the school have visited </p>
<p>North Dakota.) </p>
<p>c) ¬∃ x N(x) </p>
<p>This is the negation of part (a): No student in the school has visited North Dakota. (Alternatively, there does not </p>
<p>exist a student in the school who has visited North Dakota.) </p>
<p>d) ∃ x ¬N(x) </p>
<p>Some student in the school has not visited North Dakota. (Alternatively, there exists a student in the school who </p>
<p>has not visited North Dakota.) </p>
<p>e) ¬∀ x N(x) </p>
<p>This is the negation of part (b): It is not true that every student in the school has visited North Dakota. </p>
<p>(Alternatively, not all students in the school have visited North Dakota.) </p>
<p>f) ∀ x ¬N(x) </p>
<p>All students in the school have not visited North Dakota. (Author: This is technically the correct answer, </p>
<p>although common English usage takes this sentence to mean—incorrectly—the answer to part </p>
<ul>
<li><strong>Translate these statements into English, where R(x) is “x is a rabbit,” and H(x) is “x hops” and the domain</strong></li>
</ul>
<p><strong>consists of all animals.</strong> </p>
<p>a) ∀ x (R(x) → H(x)) </p>
<p>If an animal is a rabbit, then that animal hops. (Alternatively, every rabbit hops.) </p>
<p>b) ∀ x (R(x) ^ H(x)) </p>
<p>Every animal is a rabbit and hops (obviously not true). </p>
<p>c) ∃ x (R(x) → H(x)) </p>
<p>There exists an animal such that if it is a rabbit, then it hops. (Author: Note that this is trivially true, satisfied, </p>
<p>for example, by lions, so it is not the sort of thing one would say.) </p>
<p>d) ∃ x (R(x) ^ H(x)) </p>
<p>There exists an animal that is a rabbit and hops</p>
<ul>
<li><strong>Suppose that the domain of the propositional function P(x) consists of the integers−2,−1, 0, 1, and 2. Write out each of these propositions using disjunctions, conjunctions, and negations. （析取，连词和否定）</strong></li>
</ul>
<p>a) ∃xP(x)         b)∀xP (x)           c) ∃x¬P(x) </p>
<p>​     d) ∀x¬P(x)       e) ¬∃xP (x)         f) ¬∀xP (x) </p>
<p>Answers: </p>
<p>Existential quantifiers are like disjunctions, and universal quantifiers are like </p>
<p>conjunctions. （存在量词类似于析取，普遍量词类似于合取）</p>
<p>a)P (−2) ∨ P (−1) ∨ P (0) ∨ P (1) ∨ P (2) </p>
<p>b) P (−2) ∧ P (−1) ∧ P (0) ∧ P (1) ∧ P (2) </p>
<p>c) ¬P (−2) ∨ ¬P (−1) ∨ ¬P (0) ∨ ¬P (1) ∨ ¬P (2) </p>
<p>d) ¬P (−2) ∧ ¬P (−1) ∧ ¬P (0) ∧ ¬P (1) ∧ ¬P (2) </p>
<p>e)This is just the negation of part (a): ¬ ( P (−2) ∨ P (−1) ∨ P (0) ∨ P (1) ∨ P (2)) </p>
<p>f)This is just the negation of part (b): ¬ ( P (−2) ∧ P (−1) ∧ P (0) ∧ P (1) ∧ P (2)) </p>
<ul>
<li><strong>Express each of these system speciﬁcations using predicates, quantiﬁers, and logical connectives</strong></li>
</ul>
<p>a) At least one mail message, among the nonempty set of messages, can be saved if there is a disk with more than 10 kilobytes of free space.</p>
<p>&#x3D;&gt; (∃x F(x, 10)) →∃x S(x), where F(x, y) is “Disk x has more than y kilobytes of free space,” and S(x) is “Mail message x can be saved” </p>
<p> b) Whenever there is an active alert, all queued messages are transmitted. </p>
<p>&#x3D;&gt; (∃x A(x)) →∀x(Q(x) → T (x)), where A(x) is “Alert x is active,” Q(x) is “Message x is queued,” and T (x)is “Message x is transmitted”</p>
<p>c) The diagnostic monitor tracks the status of all systems except the main console. </p>
<p>&#x3D;&gt;∀x((x &#x3D; main console) → T (x)) , where T (x)is “The diagnostic monitor tracks the status of system x” </p>
<p>d) Each participant on the conference call whom the host of the call did not put on a special list was billed.</p>
<p>&#x3D;&gt;∀x(¬L(x) → B(x)), where L(x) is “The host of the conference call put participant x on a special list” and B(x)is “Participant x was billed” </p>
<ul>
<li><strong>Translate these speciﬁcations into English where F(p)is “Printer p is out of service,” B(p) is “Printer p is busy,” L(j) is “Print job j is lost,” and Q(j) is “Print job j is queued.”</strong></li>
</ul>
<p>a) ∃p(F(p)∧B(p))→∃jL(j) </p>
<p>&#x3D;&gt;If there is a printer that is both out of service and busy, then some job has been lost. </p>
<p>b) ∀pB(p) →∃jQ(j)</p>
<p>&#x3D;&gt; If every printer is busy, then there is a job in the queue.</p>
<p> c) ∃j(Q(j)∧L(j)) →∃pF(p) </p>
<p>&#x3D;&gt;If there is a job that is both queued and lost, then some printer is out of service.</p>
<p>d) (∀pB(p)∧∀jQ(j)) →∃jL(j) </p>
<p>&#x3D;&gt;) If every printer is busy and every job is queued, then some job is lost. </p>
<ul>
<li><p><strong>Translate to Logic</strong></p>
<p>Express each of these system specififications using predicate, quantififiers, and logical connectives.</p>
<p>(a) Every user has access to an electronic mailbox.</p>
<p><strong>Solution:</strong></p>
<p>Let the domain be users and mailboxes. Let User(<em>x</em>) be “<em>x</em> is a user”, let Mailbox(<em>y</em>) be “<em>y</em> is a mailbox”,</p>
<p>and let Access(<em>x, y</em>) be “<em>x</em> has access to <em>y</em>”.</p>
<p><strong>∀  x (User(x) → ( ∃ y (Mailbox(<em>y</em>)  ∧ Access(x, y))))</strong></p>
<p>(b) The system mailbox can be accessed by everyone in the group if the fifile system is locked.</p>
<p><strong>Solution:</strong></p>
<p>Let the domain be users and mailboxes. Let Access(<em>x, y</em>) be “<em>x</em> has access to <em>y</em>”. Let GroupMember(<em>x</em>)</p>
<p>be “<em>x</em> is a member of the group.” Let FileSystemLocked be the proposition “the fifile system is locked.” Let</p>
<p>SystemMailbox be the constant that is the system mailbox.</p>
<p><strong>FileSystemLocked <em>→ ∀ x</em> (GroupMember(<em>x</em>) <em>→</em> Access(<em>x,</em> SystemMailbox))</strong></p>
<p>(c) The fifirewall is in a diagnostic state only if the proxy server is in a diagnostic state.</p>
<p><strong>Solution:</strong></p>
<p>Let the domain be all applications. Let Firewall(<em>x</em>) be “<em>x</em> is the fifirewall”, and let ProxyServer(<em>x</em>) be “<em>x</em> is</p>
<p>the proxy server.” Let Diagnostic(<em>x</em>) be “<em>x</em> is in a diagnostic state”.</p>
<p><em>∀</em> <em>x</em> <em>∀  y</em> ((Firewall(<em>x</em>) <em>∧</em> Diagnostic(<em>x</em>)) <em>→</em> (ProxyServer(<em>y</em>) <em>→</em> Diagnostic(<em>y</em>))</p>
<p>(d) At least one router is functioning normally if the throughput is between 100kbps and 500 kbps and the</p>
<p>proxy server is not in diagnostic mode.</p>
<p><strong>Solution:</strong></p>
<p>Let the domain be all applications and routers. Let Router(<em>x</em>) be “<em>x</em> is a router”, and let ProxyServer(<em>x</em>)</p>
<p>be “<em>x</em> is the proxy server.” Let Diagnostic(<em>x</em>) be “<em>x</em> is in a diagnostic state”. Let ThroughputNormal be</p>
<p>“the throughput is between 100kbps and 500 kbps”. Let Functioning(<em>y</em>) be “y is functioning normally”.</p>
<p><strong><em>∀</em> <em>x</em> (ThroughputNormal <em>∧</em> (ProxyServer(<em>x</em>) <em>∧ ¬</em>Diagnostic(<em>x</em>))) <em>→</em> (<em>∃</em> <em>y</em> Router(<em>y</em>) <em>∧</em> Functioning(<em>y</em>))</strong></p>
</li>
<li><p>Translate these system specififications into English where <em>F</em>(<em>p</em>) is “Printer <em>p</em> is out of service”, <em>B</em>(<em>p</em>) is “Printer <em>p</em></p>
<p>is busy”, <em>L</em>(<em>j</em>) is “Print job <em>j</em> is lost,” and <em>Q</em>(<em>j</em>) is “Print job <em>j</em> is queued”. Let the domain be all printers together</p>
<p>with all print jobs.</p>
<p>(a) <em>∃</em> <em>p</em> (<em>F</em>(<em>p</em>) <em>∧</em> <em>B</em>(<em>p</em>)) <em>→ ∃</em> <em>j L</em>(<em>j</em>) </p>
<p>1<strong>Solution:</strong></p>
<p>If at least one printer is busy and out of service, then at least one job is lost.</p>
<p>(b) (<em>∀</em> <em>p B</em>(<em>p</em>)) <em>→</em> (<em>∃</em> <em>j Q</em>(<em>j</em>))</p>
<p><strong>Solution:</strong></p>
<p>If all printers are busy, then there is a queued job.</p>
<p>(c) <em>∃</em> <em>j</em> (<em>Q</em>(<em>j</em>) <em>∧</em> <em>L</em>(<em>j</em>)) <em>→ ∃</em> <em>p F</em>(<em>p</em>)</p>
<p><strong>Solution:</strong></p>
<p>If there is a queued job that is lost, then a printer is out of service.</p>
<p>(d) (<em>∀</em> <em>p B</em>(<em>p</em>) <em>∧ ∀</em> <em>j Q</em>(<em>j</em>)) <em>→ ∃</em> <em>j L</em>(<em>j</em>)</p>
<p><strong>Solution:</strong></p>
<p>If all printers are busy and all jobs are queued, then there is some lost job.</p>
</li>
<li><p><strong>Express each of these system specififications using predicates, quantififiers, and logical connectives.</strong></p>
<p><strong>a) Every user has access to an electronic mailbox.</strong></p>
<p><strong>Solution</strong>: We can limit the domain to all users of the system, and introduce the <em>E</em> predicate:</p>
<p><em>E</em>(<em>x, e</em>) :&#x3D; user <em>x</em> has access to electronic mailbox <em>e</em></p>
<p>Therefore, we’re quantifying over two domains in the <em>E</em> predicate, the domain of system users and the domain of</p>
<p>electronic mailboxes. This requires that we quantify over both domains:</p>
<p>​                                                                       <em>∀</em> <em>x</em> <em>∃</em> <em>e M</em>(<em>x, e</em>)</p>
<p><strong>b) The system mailbox can be accessed by everyone in the group if the fifile system is locked.</strong></p>
<p><strong>Solution</strong>: You may be tempted to create a predicate quantifying over all fifile systems here, but we’re referring to</p>
<p>a single fifile system, in the defifinite sense. It’s the fifile system state that is uncertain, and which therefore needs to</p>
<p>be quantifified over. The states it can have are: locked, unlocked, . . . (possible further states of which we have no</p>
<p>knowledge). So, we introduce the predicate</p>
<blockquote>
<p><em>F</em>(<em>s</em>) :&#x3D; the fifile system is in state <em>s</em></p>
<p>For users in the group, we have the predicate</p>
<p><em>G</em>(<em>x</em>) :&#x3D; user <em>x</em> is in the group</p>
<p>and for system mailbox access, we have</p>
<p><em>SM</em>(<em>x</em>) :&#x3D; user <em>x</em> can access the system mailbox</p>
</blockquote>
<p>Now to write the actual statement. We want to ensure that the user <em>x</em> is in the group, and we want the condition</p>
<p>that the fifile system is locked to hold before we assert that users in the group can access the system mailbox. This</p>
<p>leads us to</p>
<p>​                                                           <em>∀**x G</em>(<em>x</em>) <em>∧</em> <em>F</em>(locked) <em>→</em> <em>SM</em>(<em>x</em>)</p>
<p>Notice that “locked” is a constant, representing the “locked” state of the fifilesystem (indeed, there is no propositional</p>
<p>variable named “locked” we’ve quantifified over! Any variable we introduce must be quantifified).</p>
<p><strong>c) The fifirewall is in a diagnostic state only if the proxy server is in a diagnostic state.</strong></p>
<p><strong>Solution</strong>: The tricky part here is that the fifirewall has any number of states, of which we know nothing, and several</p>
<p>of them could be considered “diagnostic” states. Likewise with the proxy server. Again, we’re referring to the</p>
<p>fifirewall and the proxy each in the defifinite sense, so they should not be quantifified over with variables. Instead, let’s  quantify over the domain of fifirewall and proxy states, and let’s introduce a predicate to identify diagnostic states:</p>
<blockquote>
<p><em>D</em>(<em>x</em>) :&#x3D; state <em>x</em> is a diagnostic state</p>
<p>and let’s introduce the predicates <em>P</em> and <em>F</em>: </p>
<p><em>F</em>(<em>x</em>) :&#x3D; the fifirewall is in state <em>x</em> </p>
<p><em>P</em>(<em>x</em>) :&#x3D; the proxy is in state <em>x</em></p>
</blockquote>
<p>From this, I was immediately led to write</p>
<p>​                                                                       <em>∀</em> <em>x D</em>(<em>x</em>) <em>∧</em> (<em>F</em>(<em>x</em>) <em>→</em> <em>P</em>(<em>x</em>))</p>
<p>but this is wrong. Why? Because the original statement allows the fifirewall and the proxy server to be in distinct</p>
<p>diagnostic states, and the implication should still hold. The use of the same variable means that the proxy server is</p>
<p>in a diagnostic state if fifirewall is in that exact same diagnostic state. In other words, I succumbed to the mistake</p>
<p>described in the fifinal part of question 2, above. We need distinct variables for these states, and they must both be</p>
<p>diagnostic states:</p>
<p>​                                                               <em>∀</em> <em>x</em> <em>∀</em> <em>y D</em>(<em>x</em>) <em>∧</em> <em>D</em>(<em>y</em>) <em>∧</em> (<em>F</em>(<em>x</em>) <em>→</em> <em>P</em>(<em>y</em>))</p>
<p><strong>d) At least one router is functioning normally if the throughput is between 100 kbps and 500 kbps and the proxy service</strong></p>
<p>is not in diagnostic mode.</p>
<p><strong>Solution</strong>: Again, the proxy service can have a number of modes, and we create a predicate to assert that the proxy</p>
<p>service is in mode <em>m</em>: </p>
<blockquote>
<p><em>P</em>(<em>m</em>) :&#x3D; the proxy server is in mode <em>m</em></p>
<p>The remaining predicates we need are straightforward:</p>
<p><em>R</em>(<em>r</em>) :&#x3D; router <em>r</em> is functioning normally</p>
<p><em>T</em>(<em>m, n</em>) :&#x3D; the throughput is between <em>m</em> kbps and <em>n</em> kbps</p>
<p><em>D</em>(<em>m</em>) :&#x3D; <em>m</em> is the diagnostic mode</p>
</blockquote>
<p>Since we are quantifying on at least one router that is functioning normally, the use of <em>∃</em> suffiffiffices over the domain of</p>
<p>routers. Similarly to the previous question, then, the fifinal proposition is</p>
<p>​                                                     <em>∀</em> <em>m</em> <em>∃</em> <em>r D</em>(<em>m</em>) <em>∧</em> [(<em>T</em>(100*,* 500) <em>∧ ¬</em> <em>P</em>(<em>m</em>)) <em>→</em> <em>R</em>(<em>r</em>)]</p>
</li>
</ul>
<h3 id="一些英译中"><a href="#一些英译中" class="headerlink" title="一些英译中"></a>一些英译中</h3><p>compound proposition :复合命题</p>
<p>negation of statements: 陈述句的否定</p>
<p>De Morgan’s laws :德摩根定律</p>
<p>truth tables：真值表</p>
<p> absorption laws：吸收律</p>
<p>tautology：重言式，永真式</p>
<p>logical operator：逻辑运算符</p>
<h3 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h3><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h5><ul>
<li>命题，是指具有唯一真值的陈述句</li>
<li>疑问句、祈使句、感叹句，因为无法判断真假，所以都不是命题</li>
<li>真用1或T来表示，假用0或F来表示，因为命题只有这两种真值，所以这种逻辑成为二值逻辑</li>
</ul>
<h5 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h5><ul>
<li>1+101&#x3D;110  在二进制下为真，在十进制下为假，真值不唯一，所以不是命题</li>
<li>别的星球上有生物  虽然现在不确定，但是这个问题是有客观答案的 ，并不以你我的意志而转移，所以是命题</li>
<li>全体立正！ 祈使句不是命题</li>
<li>天气多好啊！ 感叹句不是命题</li>
</ul>
<p><strong>注意</strong>：一个陈述句暂时不能确定真值，但到了一定时间就可以确定，与一个陈述句的真值不能唯一确定是不一样的</p>
<ul>
<li>x&gt;3  　x的取值范围不同，本句话的真假是不一样的，所以不是命题</li>
<li>2190年人类将移居火星   虽然现在无法确定，但是到了2190年就可以唯一确定本句话的真假，所以是命题</li>
</ul>
<h5 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h5><ol>
<li>原子命题：一个陈述句再也不能分解成更为简单的语句，则由它构成的命题成为原子命题</li>
<li>复合命题：由原子命题，命题联结词和圆括号组成</li>
</ol>
<h3 id="命题联结词"><a href="#命题联结词" class="headerlink" title="命题联结词"></a>命题联结词</h3><ol>
<li><p>否定联结词： ┐</p>
<p>┐p和p的真假是相反的</p>
</li>
<li><p>合取联结词：∧</p>
<p>p∧Q读作“P与Q”或者“P且Q”  </p>
<p>当且仅当P和Q同为真，命题P∧Q的真值才为真</p>
</li>
<li><p>析取联结词：∨</p>
<p>P∨Q读作“P或Q”</p>
<p>只要P、Q中有一个为真，命题P∨Q就为真</p>
</li>
<li><p>条件(蕴含)联结词：→</p>
<p>P→Q读作P条件Q，或者“若P则Q” “P仅当Q” “P是Q的充分条件”</p>
<p>只有当P的真值为真而Q的真值为假时，命题P→Q的真值为假，其余都为真</p>
<p>例子：</p>
<p>①只要天下雨，我就回家</p>
<p>②只有天下雨，我才回家</p>
<p>③除非天下雨，否则我不回家</p>
<p>④仅当天下雨，我才回家</p>
<p>解析：①强调的是如果天下雨了，那我就回家，②③④强调的是如果我回家了，那一定是天下雨了。 所以①可符号化为P→Q ，②③④可符号化为Q→P</p>
</li>
<li><p>双条件联结词：↔</p>
<p>P↔Q读作“P当且仅当Q”，只有两者同时为真或同时为假时，P↔Q才为真</p>
</li>
<li><p>异或（双条件非）联结词：⊕</p>
<p>当且仅当P和Q的真值不相同时，P⊕Q为T</p>
</li>
<li><p>与非联结词：↑</p>
<p>A↑B &#x3D;  ┐(A∧B)</p>
</li>
<li><p>或非联结词：↓</p>
<p>A↓B &#x3D;  ┐(A∨B)</p>
</li>
</ol>
<h3 id="命题公式"><a href="#命题公式" class="headerlink" title="命题公式"></a>命题公式</h3><p>命题公式由原子命题，命题联结词，圆括号构成，但是并不是由这三类符号组成的的任何符号串都能成为命题公式 ，合理的命题公式叫做合式公式</p>
<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>合式公式是由下列规则生成的公式：</p>
<ol>
<li>单个原子公式是合式公式</li>
<li>若A是一个合式公式，那么（ ┐A）也是一个合式公式</li>
<li>若A、B是合式公式，则（A^B）、（A∨B）、（A→B）和（A↔B）都是合式公式</li>
<li>只有有限次的使用1，2和3生成的公式才是合式公式</li>
</ol>
<h5 id="约定："><a href="#约定：" class="headerlink" title="约定："></a>约定：</h5><ol>
<li><p>联结词的优先级从高到低是： ┐、∧、∨、→、↔</p>
</li>
<li><p>相同的联结词按从左到右的次序计算时，圆括号可以省略</p>
</li>
<li><p>最外层的圆括号也可以省略</p>
</li>
</ol>
<h3 id="命题的翻译和符号化"><a href="#命题的翻译和符号化" class="headerlink" title="命题的翻译和符号化"></a>命题的翻译和符号化</h3><h5 id="将自然语言符号化"><a href="#将自然语言符号化" class="headerlink" title="将自然语言符号化"></a>将自然语言符号化</h5><ol>
<li><p>小王边走边唱</p>
<p>P：小王走路  Q：小王唱歌  </p>
<p>&#x3D;&gt; P^Q </p>
</li>
<li><p>如果今天不下雨并且不刮风，我就去书店</p>
<p>P：今天下雨（不能设位今天不下雨，因为“今天不下雨”不是原子命题）</p>
<p>Q：今天刮风</p>
<p>R：我去书店 </p>
<p>&#x3D;&gt;（┐P∧ ┐Q）→R</p>
</li>
<li><p>小刚要么在学习，要么在玩游戏</p>
<p>P：小刚在学习</p>
<p>Q：小刚在玩游戏</p>
<p>&#x3D;&gt; (P∧ ┐Q)∨(┐P∧ Q)  </p>
<p>即：小刚在学习且没有玩游戏，或者小刚在玩游戏且没有学习</p>
</li>
<li><p>除非a能被2整除，否则a不能被4整除</p>
<p>P：a能被2整除</p>
<p>Q：a能被4整除</p>
<p>&#x3D;&gt;  ┐P →  ┐Q   即：a如果不能被2整除，则a不能被4整除</p>
<p>或者Q→P   即：如果a能被4整除，那么a一定可以被2整除</p>
</li>
<li><p>如果天不下雨，我们就去打篮球，除非班上有会</p>
<p>P：天下雨</p>
<p>Q：我们去打篮球</p>
<p>R：今天班上有会</p>
<p>&#x3D;&gt;（┐P∧ ┐R）→Q   即：我们打篮球的条件必须是天不下雨且班上没有会</p>
<p>或者：┐R→(┐P→Q）即：如果没有会，并且没有下雨，我们就去打篮球</p>
</li>
<li><p>离散数学无用且枯燥无味是不对的</p>
<p>P：离散数学是有用的<br>Q：离散数学是枯燥无味的</p>
<p>¬ ( ¬ P ∧ Q ) </p>
</li>
<li><p>如果校长和小王都不去，则小李去</p>
<p>P：小张去<br>Q：小王去<br>R：小李去</p>
<p>( ¬ P ∧ ¬ Q ) → R </p>
</li>
<li><p>p，q不能同时取,即只能取一个</p>
<p>(P∧ ┐Q)∨(┐P∧ Q) </p>
</li>
<li><p>若P去, 则Q不能去</p>
<p>P →  ┐Q</p>
</li>
<li><p>C和D要么都有，要么都没有</p>
</li>
</ol>
<p>   (C∧D)∨(┐C∧ ┐D)</p>
<ol start="11">
<li><p>股票P和Q中必然有一种或两种要抛出</p>
<p>P∨Q</p>
</li>
</ol>
<h3 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h3><p>含有n个原子命题的命题公式所对应的真值共有2^n中情况</p>
<h3 id="等价"><a href="#等价" class="headerlink" title="等价"></a>等价</h3><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>给定两个命题公式，若对于其中任意一组指派而言，A和B的真值都相同，则称A和B是等价的</p>
<p>可以通过等值关系进行化简得到两个式子等值，也可以通过真值表来判断等值</p>
<h5 id="基本等值式"><a href="#基本等值式" class="headerlink" title="基本等值式"></a>基本等值式</h5><ol>
<li><p>﹁ ( ﹁ G ) &#x3D; G<br>（双重否定律）</p>
</li>
<li><p>G ∧ G &#x3D; G   G ∨ G &#x3D; G  <strong>(a*a&#x3D;a  a+a&#x3D;a)</strong><br>（幂等律）</p>
</li>
<li><p>G ∨ H &#x3D; H ∨ G   <strong>a+b&#x3D;b+a</strong><br>G ∧ H &#x3D; H ∧ G  ab&#x3D;ba<br>（交换律）</p>
</li>
<li><p>G ∨ ( H ∨ S ) &#x3D; ( G ∨ H ) ∨ S  <strong>a+(b+c)&#x3D;(a+b)+c</strong><br>G ∧ ( H ∧ S ) &#x3D; ( G ∧ H ) ∧ S  *<em>a</em>(b <em>c)&#x3D;(a * b)<em>c</em></em><br>（结合律）</p>
</li>
<li><p>G ∨ ( H ∧ S ) &#x3D; ( G ∨ H ) ∧ ( G ∨ S )   a+bc&#x3D;(a+b)(a+c)<br>G ∧ ( H ∨ S ) &#x3D; ( G ∧ H ) ∨ ( G ∧ S )  <strong>a(b+c)&#x3D;ab+ac</strong><br>（分配律）</p>
</li>
<li><p>﹁ ( G ∧ H ) &#x3D; ﹁ G ∨ ﹁ H </p>
<p>﹁ ( G ∨ H ) &#x3D; ﹁ G ∧ ﹁ H </p>
<p> （去掉括号后合取变析取，析取变合取）<br>（德摩根律）</p>
</li>
<li><p>G ∨ ( G ∧ H ) &#x3D; G  <strong>a+ab&#x3D;a</strong></p>
<p>G ∧ ( G ∨ H ) &#x3D; G  <em><em>a</em>(a+b)&#x3D;a</em>*<br>（吸收律）</p>
</li>
<li><p>G ∨ 1 &#x3D; 1<br>G ∧ 0 &#x3D; 0<br>（零律）</p>
</li>
<li><p>G ∧ 1 &#x3D; G</p>
<p>G ∨ 0 &#x3D; G</p>
<p>（同一律）</p>
</li>
<li><p>G ∧﹁ G &#x3D; 0<br>G V ﹁ G &#x3D; 1<br>（否定律）</p>
</li>
<li><p>G → H &#x3D; ﹁ G ∨ H<br>（条件转化律）</p>
</li>
<li><p>G ↔ H &#x3D; ( G → H ) ∧ ( H → G ) &#x3D; ( ﹁ G ∨ H ) ∧ ( ﹁ H ∨ G )<br>（双条件传化律）</p>
</li>
<li><p>G → H &#x3D; ﹁ H → ﹁ G<br>（假言易位）</p>
</li>
<li><p>G ↔ H &#x3D; ﹁ G ↔ ﹁ H<br>（等价否定等式）</p>
</li>
</ol>
<h5 id="等价置换定理"><a href="#等价置换定理" class="headerlink" title="等价置换定理"></a>等价置换定理</h5><p>如果X是合式公式A的一部分，且X本身也是一个合式公式，则称X为合式公式A的子公式</p>
<p>设X是合式公式A的子公式，若X&#x3D;Y。如果将A中用的X用Y来置换，所得到的公式B与公式A等价。即A&#x3D;B</p>
<h3 id="重言式-永真式-与蕴含式-永假式"><a href="#重言式-永真式-与蕴含式-永假式" class="headerlink" title="重言式(永真式)与蕴含式(永假式)"></a>重言式(永真式)与蕴含式(永假式)</h3><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>对于某个命题公式，如果其在分量的任何指派的指派下的真值均为T，则称该命题公式为<strong>重言式</strong>或<strong>永真式</strong>。</p>
<p>对于某个命题公式，如果其在分量的任何指派的指派下的真值均为F，则称该命题公式为<strong>矛盾式</strong>或<strong>永假式</strong>。</p>
<p>如果某个命题不是矛盾式，则称该命题为<strong>可满足式</strong></p>
<p><strong>蕴含式</strong>：当且仅当P→Q是重言式时，我们称“P蕴含Q“，并记作P&#x3D;&gt;Q</p>
<p>要证明P&#x3D;&gt;Q,只需证明P→Q,或者证明﹁Q→﹁P</p>
<h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p>范式是析取范式与合取范式的总称。</p>
<h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><ul>
<li>命题变元或命题变元的否定称为<strong>文字</strong>。 P，﹁P，Q，﹁Q</li>
<li><em>有限个</em>文字的析取称为<strong>简单析取式</strong>（或<strong>子句</strong>）。 P(退化的析取式，只有一个文字），﹁P（退化的析取式）， P ∨ ﹁Q（2个文字）</li>
<li><em>有限个</em>文字的合取称为<strong>简单合取式</strong>（或<strong>短语</strong>）。 P，﹁P，P ∧ ﹁Q </li>
<li>单个的文字既是简单析取式，也是简单合取式</li>
<li>P与﹁P称为<strong>互补对</strong></li>
<li><em>有限个</em>简单合取式（短语）的析取式称为<strong>析取范式</strong>  如  ( G ∧ H ) ∨ ( G ∧ S )，又如 P ∨ ﹁Q ,P ,﹁P。<strong>内部合取，外部析取</strong></li>
<li><em>有限个</em>简单析取式（短语）的合取式称为<strong>合取范式</strong>，如（P∨ H ) ∧ ( ﹁H ∨Q）,又如 P ∧ ﹁Q ,P ,﹁P 。<strong>内部析取，外部合取</strong></li>
</ul>
<p><strong>注意1：p∧q∧r既是析取范式，也是合取范式</strong>。</p>
<p><strong>原因</strong>：因为这个式子是有限个文字的合取，所以他是合取范式，也是简单合取式。而根据析取范式的定义是有限个简单合取式的析取式，这个有限个可以取1个，即一个简单合取式也是析取式</p>
<h5 id="注意2："><a href="#注意2：" class="headerlink" title="注意2："></a>注意2：</h5><p>析取范式、合取范式仅含联结词集{﹁，∧，∨}，且否定联结词仅出现在命题变元之前</p>
<h5 id="范式存在定理"><a href="#范式存在定理" class="headerlink" title="范式存在定理"></a>范式存在定理</h5><p>对于任意公式，都存在与其等价的析取范式和合取范式，且范式不唯一</p>
<h5 id="转化方法："><a href="#转化方法：" class="headerlink" title="转化方法："></a>转化方法：</h5><ol>
<li><p>将公式中的↔，→ 用联结词﹁，∧，∨来取代（<strong>否定也是联结词</strong>）</p>
<ul>
<li><p>蕴含式：G → H &#x3D; ﹁ G ∨ H</p>
</li>
<li><p>双条件传化律：G ↔ H &#x3D; ( G → H ) ∧ ( H → G )</p>
</li>
</ul>
<p>利用蕴含式再次转化： &#x3D; ( ﹁ G ∨ H ) ∧ ( ﹁ H ∨ G )</p>
</li>
<li><p>将否定联结词内移(德摩根律)到各个命题变元的前端，并消去否定号（双重否定律）</p>
<ul>
<li><p>双重否定律：﹁(﹁ G)&#x3D;G</p>
</li>
<li><p>德摩根律：﹁ ( G ∧ H ) &#x3D; ﹁ G ∨ ﹁ H </p>
<p>​                  ﹁ ( G ∨  H ) &#x3D; ﹁ G ∧﹁ H </p>
<p>（去掉括号后析取变合取，合取变析取）</p>
</li>
</ul>
</li>
<li><p>利用分配律，将公式化成一些合取式的析取，或化成一些析取式的合取：</p>
<ul>
<li>分配律：G ∨ ( H ∧ S ) &#x3D; ( G ∨ H ) ∧ ( G ∨ S ) （合取范式）<br>          G ∧ ( H ∨ S ) &#x3D; ( G ∧ H ) ∨ ( G ∧ S ) （析取范式）</li>
</ul>
</li>
</ol>
<h5 id="例题：-1"><a href="#例题：-1" class="headerlink" title="例题："></a>例题：</h5><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323084335490.png" alt="image-20220323084335490"></p>
<h3 id="主范式"><a href="#主范式" class="headerlink" title="主范式"></a>主范式</h3><p>因为范式的不唯一，为了规范化，形成唯一的主析取范式和主合取范式</p>
<h5 id="化成主范式的步骤："><a href="#化成主范式的步骤：" class="headerlink" title="化成主范式的步骤："></a>化成主范式的步骤：</h5><ul>
<li><p>先求出析取范式（合取范式）</p>
</li>
<li><p>将不是极小项（极大项）的简单合取式进一步化</p>
</li>
<li><p>极大项（极小项）用名称mi（Mi)表示，并用角标从小到大排序</p>
</li>
</ul>
<h5 id="极小项和极大项"><a href="#极小项和极大项" class="headerlink" title="极小项和极大项"></a>极小项和极大项</h5><p><strong>定义：</strong></p>
<p>在含有n个命题变项的<strong>简单合取式</strong>中，若每个命题变元均以文字的形式出现且仅出现一次，成这样的简单合取式为<strong>极小项</strong>。</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323171729779.png" alt="image-20220323171729779"></p>
<p>要使其为真，只需要其中任何一项为真即可。</p>
<p>要使其为假，需要所有项都为假</p>
<p>在含有n个命题变项的<strong>简单析取式</strong>中，若每个命题变元均以文字的形式出现且仅出现一次，成这样的<strong>简单析取式</strong>为<strong>极大项</strong>。</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323171721234.png" alt="image-20220323171721234"></p>
<p>若使其为真，则需每个式子都为真</p>
<p>若使其为假，则只需其中的一个式子为假即可</p>
<p><strong>解释</strong>：①文字的形式：p,﹁p,q,﹁q这类的。②仅出现一次：p和﹁p只能有一个出现，即命题变元和其否定只能有一个出现。</p>
<p><strong>说明：</strong></p>
<ul>
<li>n个命题变元可以产生2^n个极小项和2^n个极大项</li>
</ul>
<ol>
<li>极小项（<strong>合取</strong>）：</li>
</ol>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220302221948240.png" alt="image-20220302221948240"></p>
<ul>
<li>没有两个极小项是等价的（即互不等值）</li>
<li>每个极小项只有一组<strong>真</strong>值，因此可用于给极小项编码，<strong>规律</strong>为：命题变元与1对应，其否定与0对应</li>
</ul>
<ol start="2">
<li>极大项（<strong>析取</strong>）：</li>
</ol>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220302222040684.png" alt="image-20220302222040684"></p>
<ul>
<li>没有两个极大项是相同的 </li>
<li>每个极大项只有一组<strong>假</strong>值，因此可用于给极大项编码，规律为：命题变元与0对应，命题变元的否定与1对应</li>
</ul>
<p>3.配凑法求主析取范式和主合取范式</p>
<ul>
<li><p>将析取换成加法，将合取换成乘法，如(p∧q)∨(┐p∧r)代换后变成pq+p’r</p>
</li>
<li><p>求主析取范式&#x3D;&gt;缺少的变元用**乘以x+x’**的形式补充</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pq = pq(r + r&#x27;) = pqr+pqr&#x27; (乘以缺失的变元)</span><br><span class="line">p&#x27;r = p&#x27;(q + q&#x27;)r = p&#x27;qr + p&#x27;q&#x27;r</span><br><span class="line">原式 = pqr + pqr&#x27; + p&#x27;qr + p&#x27;q&#x27;r  </span><br></pre></td></tr></table></figure>
</li>
<li><p>换成离散语言<img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323164327707.png" alt="image-20220323164327707"></p>
</li>
<li><p>求主合取范式&#x3D;&gt;将缺少的变元用**加上xx’**的形式补充</p>
<p>里面用到的公式：A+BC&#x3D;(A+B)(A+C)</p>
</li>
<li><pre><code>    pq + p&#39;r                       
 = (p+p&#39;r)(q+p&#39;r)
 = (p+p&#39;)(p+r)(q+r)(q+p&#39;)
 =(p+r)(q+r)(q+p&#39;)
 = (p&#39;+q +rr&#39;)(p+qq&#39;+r)(pp&#39;+q+r)     (补缺的变元)
 = (p&#39;+q+r)(p&#39;+q+r&#39;)(p+q+r)(p+q&#39;+r) (p+q+r)(p&#39;+q +r)   
</code></pre>
<p>换成离散语言：</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323164434009.png" alt="image-20220323164434009"></p>
</li>
</ul>
<p>4.将析取范式转化为合取范式</p>
<p>例题一：</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220323164512564.png" alt="image-20220323164512564"></p>
<p><strong>实质</strong>：如果将析取看成加法，合取看成乘法，非p用p’表示，则可化为：</p>
<p>(pq’)+(qr)   利用A+BC&#x3D;(A+B)(A+C)</p>
<p>&#x3D;(pq’+q)(pq’+r)</p>
<p>&#x3D;(q+p)(q+q’)(p+r)(q’+r)</p>
<p>例题二：</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326172328979.png" alt="image-20220326172328979"></p>
<p><strong>实质</strong>：如果将析取看成加法，合取看成乘法，非p用p’表示，则可化为：</p>
<p>cd+c’d’</p>
<p>&#x3D;(cd+c’)(cd+d’)</p>
<p>&#x3D;(c+c’)(d+c’)(c+d’)(d+d’)</p>
<p>&#x3D;(d+c’)(c+d’)</p>
<h3 id="主范式的用途"><a href="#主范式的用途" class="headerlink" title="主范式的用途"></a>主范式的用途</h3><h4 id="1-求公式的成真赋值和成假赋值"><a href="#1-求公式的成真赋值和成假赋值" class="headerlink" title="1.求公式的成真赋值和成假赋值"></a>1.求公式的成真赋值和成假赋值</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326173308683.png" alt="image-20220326173308683"></p>
<h4 id="2-判断公式的类型"><a href="#2-判断公式的类型" class="headerlink" title="2.判断公式的类型"></a>2.判断公式的类型</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326173448446.png" alt="image-20220326173448446"></p>
<p>A为非重言式：A的主析取范式中不含有全部的极小项</p>
<p>A为可满足式：A的主合取范式中不含有全部的极大项</p>
<h4 id="3-判断两个公式是否等值"><a href="#3-判断两个公式是否等值" class="headerlink" title="3.判断两个公式是否等值"></a>3.判断两个公式是否等值</h4><p>若两者的主析取范式或者主合取范式相同，则证明两者等值。</p>
<h4 id="4-解决实际问题"><a href="#4-解决实际问题" class="headerlink" title="4.解决实际问题"></a>4.解决实际问题</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326173842476.png" alt="image-20220326173842476"></p>
<p>❗解法：</p>
<p>1.将简单命题符号化</p>
<p>2.写出每句话的复合命题</p>
<p>3.写出由②中的复合命题组成的合取式</p>
<p>4.求出③中所得式子的主析取范式</p>
<p>5.找出主析取范式的成真赋值，即为解决方案</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326174225108.png" alt="image-20220326174225108"><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326180354192.png" alt="image-20220326180354192">       极小项的成真赋值就是运算的结果</p>
<h3 id="联结词的全功能集"><a href="#联结词的全功能集" class="headerlink" title="联结词的全功能集"></a>联结词的全功能集</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>任何命题公式都可以由仅含S中的联结词来表示，则S是联结词全功能集</p>
<p>说明：</p>
<p>若S1是全功能集，则S1中加入其他联结词后构成的S2也是全功能集</p>
<p>若S1不是全功能集，则S1中去掉一些联结词之后构成的S2也不是全功能集</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326180948677.png" alt="image-20220326180948677"></p>
<h4 id="复合联结词："><a href="#复合联结词：" class="headerlink" title="复合联结词："></a>复合联结词：</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326181140453.png" alt="image-20220326181140453"></p>
<p>由此可见，非，或，且联结词都可以用{↑}或者{↓}来表示，说明{↑}，{↓}都是联结词全功能集</p>
<p>注意：</p>
<p>{∨ ， ∧}不是全功能集，因此{∨ }，{∧ }也不是全功能集</p>
<h3 id="组合电路"><a href="#组合电路" class="headerlink" title="组合电路"></a>组合电路</h3><h4 id="逻辑门：与门，非门，或门"><a href="#逻辑门：与门，非门，或门" class="headerlink" title="逻辑门：与门，非门，或门"></a>逻辑门：与门，非门，或门</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326181608529.png" alt="image-20220326181608529">例题：楼梯的灯由两个开关控制，x,y为开关的状态，F为灯的状态，打开为1，关闭为0，请设计这样一个电路。</p>
<table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>F(x,y)</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
<p>由此可见，F的极小项是m0和m3（成真赋值），故根据真值表可以写出其主析取范式，进行化简之后，画出电路图</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326182456376.png" alt="image-20220326182456376"></p>
<h3 id="推理理论"><a href="#推理理论" class="headerlink" title="推理理论"></a>推理理论</h3><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><p>对于每组赋值，若满足下列两种情况：①条件为假 ②条件为真，结果为真。则称条件→结论的推理正确，否则推理不正确（即条件为真，结论为假）</p>
<h4 id="判断推理是否正确的方法"><a href="#判断推理是否正确的方法" class="headerlink" title="判断推理是否正确的方法"></a>判断推理是否正确的方法</h4><ul>
<li><p>真值表法</p>
<p>将所有变元可能的取值情况列成真值表，若对于每组赋值，都满足A→B为真，则证明推理正确</p>
</li>
<li><p>等值演算法</p>
<p>将A→B经过等值验算，如果其结果为1，则证明推理正确</p>
</li>
<li><p>主析取范式法</p>
<p>将A→B转化为主析取范式，若其包括了所有的极小项（2^n个），则说名推理正确</p>
</li>
<li><p>构造证明法</p>
</li>
</ul>
<h4 id="推理定律"><a href="#推理定律" class="headerlink" title="推理定律"></a>推理定律</h4><p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220326183553084.png" alt="image-20220326183553084"></p>
]]></content>
      <categories>
        <category>数学笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>链表第一次作业</title>
    <url>/2022/03/18/%E9%93%BE%E8%A1%A8%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<p>计导的第一次作业——链表（C++）</p>
<span id="more"></span>

<h2 id="问题-B-链表排序"><a href="#问题-B-链表排序" class="headerlink" title="问题 B: 链表排序"></a>问题 B: 链表排序</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>已知一个正整数组成的无序序列，个数未知，但至少有一个元素，你的任务是建立一个单链表，并使用该链表存储这个正整数序列，然后将这个链表进行排序，使得排序后的链表为递增序列。正整数的输入用-1作为结束标志，注意-1不算这个正整数序列中的元素（不要统计-1）。在排序的过程中，你可以自己选择排序算法（冒泡排序、选择排序等），但必须是通过修改结点的指针域来进行排序，而不是对结点的数据域进行修改。程序结束后要释放所有节点占据的空间。</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>一个元素个数未知的正整数序列，以输入“-1”结束，输入“-1”前至少输入一个正整数。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>经过排序后的链表，<strong>每个元素后有一个空格，注意最后一个元素后只有换行符。</strong><br>数据最多的测试用例节点数在1000这个数量级，所有整数可以用int型存储。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">49 38 65 97 76 13 27 49 -1</span><br></pre></td></tr></table></figure>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The new list is:13 27 38 49 49 65 76 97</span><br></pre></td></tr></table></figure>

<h3 id="我的代码："><a href="#我的代码：" class="headerlink" title="我的代码："></a>我的代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">	<span class="type">int</span> val;</span><br><span class="line">	ListNode* next;</span><br><span class="line">	<span class="built_in">ListNode</span>():<span class="built_in">val</span>(<span class="number">0</span>),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x):<span class="built_in">val</span>(x),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">	<span class="built_in">ListNode</span>(<span class="type">int</span> x,ListNode *next):<span class="built_in">val</span>(x),<span class="built_in">next</span>(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//链表排序</span></span><br><span class="line"><span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归终止条件:cut到每一部分只剩下1个结点或0个结点</span></span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	<span class="comment">//利用快慢指针找到链表的中点（slow)</span></span><br><span class="line">	ListNode* fast = head-&gt;next;</span><br><span class="line">	ListNode* slow = head;</span><br><span class="line">	<span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		fast = fast-&gt;next-&gt;next;</span><br><span class="line">		slow = slow-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//记录后一段的头结点</span></span><br><span class="line">	ListNode* nextHead = slow-&gt;next;</span><br><span class="line">	<span class="comment">//断开链表</span></span><br><span class="line">	slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//继续递归cut</span></span><br><span class="line">	ListNode* left = <span class="built_in">sortList</span>(head);</span><br><span class="line">	ListNode* right = <span class="built_in">sortList</span>(nextHead);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//合并</span></span><br><span class="line">	<span class="comment">//建立哑结点</span></span><br><span class="line">	ListNode* dummy = <span class="keyword">new</span> ListNode;</span><br><span class="line">	<span class="comment">//cur不断后移扩充链表</span></span><br><span class="line">	ListNode* cur = dummy;</span><br><span class="line">	<span class="comment">//利用双指针合并</span></span><br><span class="line">	<span class="keyword">while</span> (left &amp;&amp; right) &#123;</span><br><span class="line">		<span class="keyword">if</span> (left-&gt;val &lt; right-&gt;val) &#123;</span><br><span class="line">			cur-&gt;next = left;</span><br><span class="line">			left = left-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cur-&gt;next = right;</span><br><span class="line">			right = right-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	cur-&gt;next = left ? left : right;</span><br><span class="line">	<span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出链表的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The new list is:&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (head) &#123;</span><br><span class="line">		<span class="keyword">if</span> (head-&gt;next) &#123;</span><br><span class="line">			cout &lt;&lt; head-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		head = head-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//尾插法</span></span><br><span class="line">	ListNode* head = <span class="keyword">new</span> ListNode;</span><br><span class="line">	ListNode* tail = head;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	<span class="keyword">while</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line">		ListNode* temp = <span class="keyword">new</span> ListNode;</span><br><span class="line">		temp-&gt;val = x;</span><br><span class="line">		tail-&gt;next = temp;</span><br><span class="line">		tail = temp;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sortList</span>(head);</span><br><span class="line">	<span class="built_in">print</span>(head-&gt;next);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="number">5</span> <span class="number">-1</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h2 id="问题C"><a href="#问题C" class="headerlink" title="问题C"></a>问题C</h2><p>我也不知道我错哪里了，好吧通过讨论群里麦神的提示我知道了，</p>
<p>只需要把<code>while(str[0]  != &#39;-&#39;)</code>改成<code>while (str.compare(&quot;-1&quot;))</code> 就行了!🤦‍♀️枯了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">	<span class="type">char</span> val;</span><br><span class="line">	ListNode* next;</span><br><span class="line">	<span class="built_in">ListNode</span>():<span class="built_in">val</span>(<span class="number">0</span>),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x):<span class="built_in">val</span>(x),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">	<span class="built_in">ListNode</span>(<span class="type">int</span> x,ListNode *next):<span class="built_in">val</span>(x),<span class="built_in">next</span>(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//链表排序</span></span><br><span class="line"><span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归终止条件:cut到每一部分只剩下1个结点或0个结点</span></span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	<span class="comment">//利用快慢指针找到链表的中点（slow)</span></span><br><span class="line">	ListNode* fast = head-&gt;next;</span><br><span class="line">	ListNode* slow = head;</span><br><span class="line">	<span class="keyword">while</span> (fast != <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		fast = fast-&gt;next-&gt;next;</span><br><span class="line">		slow = slow-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//记录后一段的头结点</span></span><br><span class="line">	ListNode* nextHead = slow-&gt;next;</span><br><span class="line">	<span class="comment">//断开链表</span></span><br><span class="line">	slow-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//继续递归cut</span></span><br><span class="line">	ListNode* left = <span class="built_in">sortList</span>(head);</span><br><span class="line">	ListNode* right = <span class="built_in">sortList</span>(nextHead);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//合并</span></span><br><span class="line">	<span class="comment">//建立哑结点</span></span><br><span class="line">	ListNode* dummy = <span class="keyword">new</span> ListNode;</span><br><span class="line">	<span class="comment">//cur不断后移扩充链表</span></span><br><span class="line">	ListNode* cur = dummy;</span><br><span class="line">	<span class="comment">//利用双指针合并</span></span><br><span class="line">	<span class="keyword">while</span> (left &amp;&amp; right) &#123;</span><br><span class="line">		<span class="keyword">if</span> (left-&gt;val &lt; right-&gt;val) &#123;</span><br><span class="line">			cur-&gt;next = left;</span><br><span class="line">			left = left-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cur-&gt;next = right;</span><br><span class="line">			right = right-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	cur-&gt;next = left ? left : right;</span><br><span class="line">	<span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出链表的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(ListNode* head,<span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (ch != <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;There is no item in &quot;</span> &lt;&lt; ch &lt;&lt; <span class="string">&quot; list.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;There is no item in &quot;</span> &lt;&lt; ch &lt;&lt; <span class="string">&quot; list.&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The list &quot;</span>&lt;&lt;ch&lt;&lt;<span class="string">&quot; is: &quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (head) &#123;</span><br><span class="line">		<span class="keyword">if</span> (head-&gt;next) &#123;</span><br><span class="line">			cout &lt;&lt; head-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		head = head-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分割链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(ListNode* head,ListNode*A,ListNode*B,ListNode*C)</span> </span>&#123;</span><br><span class="line">	ListNode* temp = head;</span><br><span class="line">	ListNode* tempA = A;</span><br><span class="line">	ListNode* tempB = B;</span><br><span class="line">	ListNode* tempC = C;</span><br><span class="line">	<span class="keyword">while</span> (temp-&gt;next) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">isalpha</span>(temp-&gt;next-&gt;val)) &#123;</span><br><span class="line">			tempA-&gt;next = temp-&gt;next;</span><br><span class="line">			temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">			tempA = tempA-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(temp-&gt;next-&gt;val)) &#123;</span><br><span class="line">			tempB-&gt;next = temp-&gt;next;</span><br><span class="line">			temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">			tempB = tempB-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			tempC-&gt;next = temp-&gt;next;</span><br><span class="line">			temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">			tempC = tempC-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	tempA-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	tempB-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	tempC-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//尾插法</span></span><br><span class="line">	ListNode* head = <span class="keyword">new</span> ListNode;</span><br><span class="line">	ListNode* tail = head;</span><br><span class="line">	string str ;</span><br><span class="line">	cin &gt;&gt; str;</span><br><span class="line">	<span class="keyword">while</span> (str[<span class="number">0</span>]  != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">		ListNode* temp = <span class="keyword">new</span> ListNode;</span><br><span class="line">		temp-&gt;val = str[<span class="number">0</span>];</span><br><span class="line">		tail-&gt;next = temp;</span><br><span class="line">		tail = temp;</span><br><span class="line">		cin &gt;&gt; str;</span><br><span class="line">	&#125;</span><br><span class="line">	ListNode* A = <span class="keyword">new</span> ListNode;</span><br><span class="line">	ListNode* B = <span class="keyword">new</span> ListNode;</span><br><span class="line">	ListNode* C = <span class="keyword">new</span> ListNode;</span><br><span class="line">	<span class="built_in">cut</span>(head,A,B,C);</span><br><span class="line">	<span class="built_in">sortList</span>(A);</span><br><span class="line">	<span class="built_in">sortList</span>(B);</span><br><span class="line">	<span class="built_in">sortList</span>(C);</span><br><span class="line">	<span class="built_in">print</span>(A-&gt;next,<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">	<span class="built_in">print</span>(B-&gt;next,<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">	<span class="built_in">print</span>(C-&gt;next,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h3 id="问题D"><a href="#问题D" class="headerlink" title="问题D"></a>问题D</h3><p>我还是不知道自己错那了</p>
<p>嘿嘿，找出一个错误，是没有判断A比B短的情况，增加了之后变成90分了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">	<span class="type">int</span> val;</span><br><span class="line">	ListNode* next;</span><br><span class="line">	<span class="built_in">ListNode</span>() :<span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">ListNode</span>(<span class="type">int</span> x) :<span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode* next) :<span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">get</span><span class="params">(ListNode* head, ListNode* tail)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	<span class="keyword">while</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line">		ListNode* temp = <span class="keyword">new</span> ListNode;</span><br><span class="line">		count++;</span><br><span class="line">		temp-&gt;val = x;</span><br><span class="line">		tail-&gt;next = temp;</span><br><span class="line">		tail = temp;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(ListNode* h1, ListNode* h2)</span> </span>&#123;</span><br><span class="line">	ListNode* i = h1;</span><br><span class="line">	<span class="keyword">while</span> (i) &#123;</span><br><span class="line">		ListNode* j = h2;</span><br><span class="line">		ListNode* k = i;</span><br><span class="line">		<span class="keyword">while</span> (j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (k-&gt;val == j-&gt;val) &#123;</span><br><span class="line">				k = k-&gt;next;</span><br><span class="line">				j = j-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		i = i-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (j == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//尾插法</span></span><br><span class="line">	ListNode* head1 = <span class="keyword">new</span> ListNode;</span><br><span class="line">	ListNode* tail1 = head1;</span><br><span class="line">	ListNode* head2 = <span class="keyword">new</span> ListNode;</span><br><span class="line">	ListNode* tail2 = head2;</span><br><span class="line">	<span class="type">int</span> count1= <span class="built_in">get</span>(head1, tail1);</span><br><span class="line">	<span class="type">int</span> count2=<span class="built_in">get</span>(head2, tail2);</span><br><span class="line">	<span class="keyword">if</span> (count2 &gt; count1) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;ListB is not the sub sequence of ListA.&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> ret = <span class="built_in">cmp</span>(head1-&gt;next, head2-&gt;next);</span><br><span class="line">	<span class="keyword">if</span> (ret) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;ListB is the sub sequence of ListA.&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;ListB is not the sub sequence of ListA.&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="问题E"><a href="#问题E" class="headerlink" title="问题E"></a>问题E</h2><p>✌耶耶耶我一遍过了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">	<span class="type">int</span> val;</span><br><span class="line">	ListNode* next;</span><br><span class="line">	<span class="built_in">ListNode</span>() :<span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">ListNode</span>(<span class="type">int</span> x) :<span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode* next) :<span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(ListNode* head,<span class="type">int</span> s1,<span class="type">int</span> t1,<span class="type">int</span> s2,<span class="type">int</span> t2)</span></span>&#123;</span><br><span class="line">	ListNode* cur = head;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//记录几个重要节点</span></span><br><span class="line">	<span class="keyword">while</span> (count != s1 - <span class="number">1</span>) &#123;</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	ListNode* pre1 = cur;</span><br><span class="line">	ListNode* x1 = cur-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (count != t1) &#123;</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	ListNode* nex1 = cur;</span><br><span class="line">	<span class="keyword">while</span> (count != s2 - <span class="number">1</span>) &#123;</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	ListNode* pre2 = cur;</span><br><span class="line">	<span class="keyword">while</span> (count != t2) &#123;</span><br><span class="line">		cur = cur-&gt;next;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	ListNode* nex2 = cur;</span><br><span class="line">	ListNode* y2 = cur-&gt;next;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//交换节点</span></span><br><span class="line">    <span class="comment">//注意这里要分两种情况</span></span><br><span class="line">    <span class="comment">//1.两个区间挨在一起，如[1,2] [3,6],即左区间的右边就是右区间</span></span><br><span class="line">    <span class="comment">//2.两个区间没有挨在一起，如[1,2] [5,6]</span></span><br><span class="line">	</span><br><span class="line">    pre1-&gt;next = pre2-&gt;next;</span><br><span class="line">	<span class="keyword">if</span> (t1 + <span class="number">1</span> == s2) &#123;</span><br><span class="line">		nex2-&gt;next = x1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		nex2-&gt;next = nex1-&gt;next;</span><br><span class="line"></span><br><span class="line">		pre2-&gt;next = x1;</span><br><span class="line">	&#125;</span><br><span class="line">	nex1-&gt;next = y2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The new list is:&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (head) &#123;</span><br><span class="line">		<span class="keyword">if</span> (head-&gt;next) &#123;</span><br><span class="line">			cout &lt;&lt; head-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		head = head-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//尾插法</span></span><br><span class="line">	ListNode* head = <span class="keyword">new</span> ListNode;</span><br><span class="line">	ListNode* tail = head;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	<span class="keyword">while</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line">		ListNode* temp = <span class="keyword">new</span> ListNode;</span><br><span class="line">		temp-&gt;val = x;</span><br><span class="line">		tail-&gt;next = temp;</span><br><span class="line">		tail = temp;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> s1, t1, s2, t2;</span><br><span class="line">	cin &gt;&gt; s1 &gt;&gt; t1 &gt;&gt; s2 &gt;&gt; t2;</span><br><span class="line">	<span class="built_in">func</span>(head,s1,t1,s2,t2);</span><br><span class="line">	<span class="built_in">print</span>(head-&gt;next);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="问题F"><a href="#问题F" class="headerlink" title="问题F"></a>问题F</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">	<span class="type">int</span> val;</span><br><span class="line">	ListNode* next;</span><br><span class="line">	<span class="built_in">ListNode</span>() :<span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">ListNode</span>(<span class="type">int</span> x) :<span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode* next) :<span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get</span><span class="params">(ListNode* head, ListNode* tail)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	<span class="keyword">while</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line">		ListNode* temp = <span class="keyword">new</span> ListNode;</span><br><span class="line">		temp-&gt;val = x;</span><br><span class="line">		tail-&gt;next = temp;</span><br><span class="line">		tail = temp;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">	&#125;</span><br><span class="line">	tail-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(ListNode* h1, ListNode* h2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (h1-&gt;next == <span class="literal">nullptr</span> || h2-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ListNode* cur1 = h1;</span><br><span class="line">	ListNode* cur2 = h2;</span><br><span class="line">	<span class="keyword">while</span> (cur1-&gt;next &amp;&amp; cur2-&gt;next) &#123;</span><br><span class="line">		ListNode* nex2 = cur2-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (cur1-&gt;val&lt;nex2-&gt;val &amp;&amp; cur1-&gt;next-&gt;val&gt;nex2-&gt;val) &#123;</span><br><span class="line">			cur2-&gt;next = cur2-&gt;next-&gt;next;</span><br><span class="line">			nex2-&gt;next = cur1-&gt;next;</span><br><span class="line">			cur1-&gt;next = nex2;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		cur1 = cur1-&gt;next;</span><br><span class="line">         <span class="keyword">while</span> (cur2-&gt;next&amp;&amp;cur1-&gt;val == cur2-&gt;next-&gt;val)</span><br><span class="line">				cur2 = cur2-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cur2-&gt;next) &#123;</span><br><span class="line">		cur1-&gt;next = cur2-&gt;next;</span><br><span class="line">		cur2-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出链表的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(ListNode* head, <span class="type">char</span> ch)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;There is no item in &quot;</span> &lt;&lt; ch &lt;&lt; <span class="string">&quot; list.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;The list &quot;</span> &lt;&lt; ch &lt;&lt; <span class="string">&quot; is: &quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (head) &#123;</span><br><span class="line">		<span class="keyword">if</span> (head-&gt;next) &#123;</span><br><span class="line">			cout &lt;&lt; head-&gt;val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; head-&gt;val &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		head = head-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//尾插法</span></span><br><span class="line">	ListNode* head1 = <span class="keyword">new</span> ListNode;</span><br><span class="line">	ListNode* tail1 = head1;</span><br><span class="line">	ListNode* head2 = <span class="keyword">new</span> ListNode;</span><br><span class="line">	ListNode* tail2 = head2;</span><br><span class="line">	<span class="built_in">get</span>(head1, tail1);</span><br><span class="line">	<span class="built_in">get</span>(head2, tail2);</span><br><span class="line">	<span class="built_in">merge</span>(head1, head2);</span><br><span class="line">	<span class="built_in">print</span>(head1-&gt;next, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">	<span class="built_in">print</span>(head2-&gt;next, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>轮播图</title>
    <url>/2022/04/03/%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="网易云音乐的轮播图自制"><a href="#网易云音乐的轮播图自制" class="headerlink" title="网易云音乐的轮播图自制~"></a>网易云音乐的轮播图自制~</h2><span id="more"></span>

<h2 id="页面布局（HTML）"><a href="#页面布局（HTML）" class="headerlink" title="页面布局（HTML）"></a>页面布局（HTML）</h2><p><strong>首先需要一个大的div将所有元素装在里</strong></p>
<p><strong>左右按钮</strong></p>
<p>用a标签包裹</p>
<p><strong>轮播图片</strong></p>
<p>用ul包含n个li构成</p>
<p><strong>小圆圈</strong>(nav)</p>
<p>用ol包含n个li构成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ad&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左右按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;selected&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="样式-CSS"><a href="#样式-CSS" class="headerlink" title="样式(CSS)"></a>样式(CSS)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">      *&#123;</span><br><span class="line">          <span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line">          <span class="attribute">padding</span>:<span class="number">0px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.ad</span>&#123;</span><br><span class="line">          <span class="attribute">position</span>: relative;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">1090px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: pink;</span><br><span class="line">          <span class="comment">/* 相对定位可以通过margin: xx auto来水平居中 */</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span><br><span class="line">          <span class="comment">/* 因为左右箭头不能挤占照片的位置，所以应该为绝对定位（脱标） */</span></span><br><span class="line">          <span class="attribute">position</span>:absolute;</span><br><span class="line">          <span class="attribute">text-decoration</span>: none;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">          <span class="comment">/* 绝对定位的盒子的水平居中 */</span></span><br><span class="line">          <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">          <span class="attribute">margin-top</span>: -<span class="number">10px</span>;</span><br><span class="line">          <span class="comment">/* 让里面的符号水平居中垂直居中于小盒子中 */</span></span><br><span class="line">           <span class="attribute">text-align</span>: center;</span><br><span class="line">           <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">           <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.left</span>&#123;</span><br><span class="line">          <span class="comment">/* 设置圆角 */</span></span><br><span class="line">           <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">           <span class="comment">/* 靠左 */</span></span><br><span class="line">           <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.right</span>&#123;</span><br><span class="line">          <span class="comment">/* 设置圆角 */</span></span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">15px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">          <span class="comment">/* 靠右 */</span></span><br><span class="line">          <span class="attribute">left</span>:<span class="number">1070px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;</span><br><span class="line">         <span class="attribute">list-style-type</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.nav</span>&#123;</span><br><span class="line">          <span class="comment">/* 绝对定位*/</span></span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">bottom</span>:<span class="number">15px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">          <span class="attribute">width</span>:<span class="number">70px</span>;</span><br><span class="line">          <span class="comment">/* 水平居中 */</span></span><br><span class="line">          <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">          <span class="attribute">margin-left</span>:-<span class="number">35px</span>;</span><br><span class="line">          <span class="comment">/* 白色半透明 */</span></span><br><span class="line">          <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">4</span>);</span><br><span class="line">          <span class="comment">/* 圆角 */</span></span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.nav</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">          <span class="comment">/* 让所有的小圆点浮动起来，都在一排 */</span></span><br><span class="line">          <span class="attribute">float</span>: left;</span><br><span class="line">          <span class="attribute">width</span>:<span class="number">8px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">          <span class="comment">/* 变成圆形 */</span></span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">          <span class="comment">/* 间隔开 :上下左右外边距都是3px*/</span></span><br><span class="line">          <span class="attribute">margin</span>:<span class="number">3px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* 让选中的小圆点变成红色 */</span></span><br><span class="line">      <span class="selector-class">.nav</span> <span class="selector-class">.selected</span>&#123;</span><br><span class="line">          <span class="attribute">background-color</span>: red;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">ul</span>&#123;</span><br><span class="line">          <span class="comment">/* 让宽度装得下4个li */</span></span><br><span class="line">          <span class="attribute">width</span>: <span class="number">400%</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.pic</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">          <span class="comment">/* 让所有的li都在一行 */</span></span><br><span class="line">          <span class="attribute">float</span>: left;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">420px</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">1090px</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="核心（JS）"><a href="#核心（JS）" class="headerlink" title="核心（JS）"></a>核心（JS）</h2><h3 id="鼠标经过显示左右按钮"><a href="#鼠标经过显示左右按钮" class="headerlink" title="鼠标经过显示左右按钮"></a>鼠标经过显示左右按钮</h3><p>当鼠标经过轮播图时，左右按钮显示，并关闭自动播放的计时器。</p>
<p>当鼠标离开轮播图时，隐藏左右按钮，并开启自动播放的计时器。</p>
<h3 id="动态生成小圆圈"><a href="#动态生成小圆圈" class="headerlink" title="动态生成小圆圈"></a>动态生成小圆圈</h3><p>有几张图，就有几个小圆圈</p>
<p>即ul中多少个li，就在ol中生成相同个数的li</p>
<ol>
<li><p>统计ul中的li:ul.children.length，记作n(之后要用)</p>
</li>
<li><p>利用for循环，i从0到n-1，创建结点：createElement(“li”)，创建之后将li添加到ol中：ol.appendChild(li);</p>
</li>
</ol>
<h3 id="点击小圆圈的时候该小圆圈就会变成红色"><a href="#点击小圆圈的时候该小圆圈就会变成红色" class="headerlink" title="点击小圆圈的时候该小圆圈就会变成红色"></a>点击小圆圈的时候该小圆圈就会变成红色</h3><p>排他思想：干掉其他人，留下我自己</p>
<p>当点击当前小圆圈，先for循环将所有小圆圈的类名移出，然后给当前小圆圈绑定current的类名（用到了this指针）</p>
<p>放置位置：在前一步的动态插入li的时候就可以给每个li绑定一个单击响应函数</p>
<h3 id="点击小圆圈实现图片滑动效果"><a href="#点击小圆圈实现图片滑动效果" class="headerlink" title="点击小圆圈实现图片滑动效果"></a>点击小圆圈实现图片滑动效果</h3><p>要实现滑动，可以用动画函数，传入滑动的对象（ul）和滑动的距离。</p>
<p>放置位置：因为是在点击小圆圈后实现的，所以应该在小圆圈的单击相应函数中写</p>
<p>ul滚动距离：（-1）*小圆圈的索引号乘以图片的宽度</p>
<p>小圆圈的索引号：在动态添加li的时候就给li添加一个自定义属性index，<code>li.setAttribute(&quot;index&quot;, i);</code></p>
<p>因为只有绝对定位的对象才能用滑动动画函数，因此要给ul加绝对定位（移动的是ul，而不是li，因为如果是li在动，那剩下的li没办法安排)。</p>
<p>而既然给ul加了绝对定位，而在之前就已经给左右按钮加了绝对定位，要使左右按钮在ul上面，就要加大左右按钮的z-index，这里我设置成了z-index&#x3D;3</p>
<h3 id="点击左右按钮实现图片滑动效果"><a href="#点击左右按钮实现图片滑动效果" class="headerlink" title="点击左右按钮实现图片滑动效果"></a>点击左右按钮实现图片滑动效果</h3><p>声明一个变量num,点击右侧按钮，就自增一。</p>
<p>给左右按钮的点击也绑定监听的函数，放入动画函数，实现其滑动。ul的滑动距离就是num乘以图片的宽度</p>
<h3 id="无缝滚动"><a href="#无缝滚动" class="headerlink" title="无缝滚动"></a>无缝滚动</h3><p>把第一张图片复制一份放在最后一个li的后面（如果手动复制的话不方便后来添加图片，并且小圆点也会动态多生成一个），所以这里我们用<code>cloneNode()</code></p>
<p><code>cloneNode(),</code>加true是深克隆，会拷贝里面的子节点，如果是false就是浅克隆，不会拷贝里面的子节点</p>
<p>不管有没有到最后一张都执行的是：num++, animate滚动ul,距离是num乘以图片的宽度</p>
<p>如果到了最后一个，即n个(其实就是拷贝的第一个），则将ul不做动画的跳到最左侧，即left&#x3D;0,并把num改成0；</p>
<h3 id="点击右侧按钮时小圆点和右侧按钮一起变化"><a href="#点击右侧按钮时小圆点和右侧按钮一起变化" class="headerlink" title="点击右侧按钮时小圆点和右侧按钮一起变化"></a>点击右侧按钮时小圆点和右侧按钮一起变化</h3><p>再声明一个circle，每次点击右侧按钮自增1（不能用num,因为num因为图片克隆的原因会出现n的情况，而小圆点的索引只是[0,n-1]。</p>
<p>并且，当circle&#x3D;&#x3D;4的时候，应该将circle改成0</p>
<h3 id="统一变量"><a href="#统一变量" class="headerlink" title="统一变量"></a>统一变量</h3><p>circle:控制小圆点的current</p>
<p>num：控制左右按钮计数器</p>
<p>因为左右控制按钮时是通过num来控制的，但我们点击li来移动的时候并没有改变num，也没有改变current,则会导致在点击小圆点移动后再点击左右按钮时出现错误（因为左右按钮操控的时候是用num来控制是移动的距离，用circle来控制小圆点的current）。</p>
<p>所以需要在li的单击响应函数中，加入将this.index赋值给num和circle</p>
<h3 id="自动播放"><a href="#自动播放" class="headerlink" title="自动播放"></a>自动播放</h3><p>相当于点击右侧按钮，即使用right.click()【调用这个函数就相当于我们手动点击右侧按钮】</p>
<p>在全局中添加一个定时器，使得页面一加载就开始自动播放</p>
<p>鼠标放上的时候的监听函数增添：停止定时器timer</p>
<p>鼠标经过的时候的监听函数增添：开启定时器timer</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="keyword">var</span> ad = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> right = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;right&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> left = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;left&#x27;</span>);</span><br><span class="line">       <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ol&quot;</span>);</span><br><span class="line">       <span class="keyword">var</span> n = ul.<span class="property">children</span>.<span class="property">length</span>;     <span class="comment">//图片的个数</span></span><br><span class="line">       <span class="keyword">var</span> num = <span class="number">0</span>;                    <span class="comment">//左右按钮计数器</span></span><br><span class="line">       <span class="keyword">var</span> circle = <span class="number">0</span>;                   <span class="comment">//控制小圆圈的current</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//鼠标进入，出现左右符号，并停止自动播放，鼠标移出，左右符号消失,开启计时器</span></span><br><span class="line">       ad.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseenter&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           right.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">           left.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">           <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">           timer = <span class="literal">null</span>;</span><br><span class="line">       &#125;);</span><br><span class="line">       ad.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseleave&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           right.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">           left.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">           timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">               right.<span class="title function_">click</span>();</span><br><span class="line">           &#125;, <span class="number">1700</span>);</span><br><span class="line"></span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//根据图片的个数动态添加li</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">           ol.<span class="title function_">appendChild</span>(li);</span><br><span class="line">           <span class="comment">// 给小圆圈设置自定义属性添加索引号</span></span><br><span class="line">           li.<span class="title function_">setAttribute</span>(<span class="string">&quot;index&quot;</span>, i);</span><br><span class="line">           <span class="comment">//小圆圈的单击响应函数</span></span><br><span class="line">           li.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">               <span class="comment">//清空类名</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                   ol.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//给当前li添加类名（巧妙运用this指针）</span></span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&quot;current&quot;</span>;</span><br><span class="line">               <span class="comment">// 点击小圆圈移动ul</span></span><br><span class="line">               <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">               num = index;</span><br><span class="line">               circle = index;</span><br><span class="line">               <span class="keyword">var</span> step = (-<span class="number">1</span>) * (index * <span class="number">1090</span>);</span><br><span class="line">               <span class="title function_">animate</span>(ul, step);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//初始：把ol里的第一个li的className设置为current</span></span><br><span class="line">       ol.<span class="property">children</span>[<span class="number">0</span>].<span class="property">className</span> = <span class="string">&quot;current&quot;</span>;</span><br><span class="line">       <span class="comment">//克隆第一个li放在最后</span></span><br><span class="line">       <span class="keyword">var</span> first = ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">       ul.<span class="title function_">appendChild</span>(first);</span><br><span class="line">       <span class="comment">//右箭头点击</span></span><br><span class="line">       right.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (num == n) &#123;</span><br><span class="line">               ul.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span><br><span class="line">               num = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           num++;</span><br><span class="line">           <span class="comment">//小圆圈同步推进</span></span><br><span class="line">           circle++;</span><br><span class="line">           <span class="keyword">if</span> (circle == n) &#123;</span><br><span class="line">               circle = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">               ol.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ol.<span class="property">children</span>[circle].<span class="property">className</span> = <span class="string">&quot;current&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="title function_">animate</span>(ul, (-<span class="number">1</span>) * num * <span class="number">1090</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">        <span class="comment">//左箭头点击</span></span><br><span class="line">       left.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">               ul.<span class="property">style</span>.<span class="property">left</span> = (-<span class="number">1</span>) * <span class="number">1090</span> * n + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">               num = n;</span><br><span class="line">           &#125;</span><br><span class="line">           num--;</span><br><span class="line">           <span class="comment">//小圆圈同步推进</span></span><br><span class="line">           circle--;</span><br><span class="line">           <span class="keyword">if</span> (circle &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               circle = n - <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">               ol.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ol.<span class="property">children</span>[circle].<span class="property">className</span> = <span class="string">&quot;current&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="title function_">animate</span>(ul, (-<span class="number">1</span>) * num * <span class="number">1090</span>);</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 自动播放图片，相当于点击右侧按钮</span></span><br><span class="line">       <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           right.<span class="title function_">click</span>();</span><br><span class="line">       &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//滑动动画效果</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target</span>) &#123;</span><br><span class="line">           <span class="comment">//清除之前的定时器，防止多次点击</span></span><br><span class="line">           <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">           obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span><br><span class="line">               step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span><br><span class="line">               <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span><br><span class="line">                   <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">           &#125;, <span class="number">15</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CSS自学笔记</title>
    <url>/2022/04/02/CSS/</url>
    <content><![CDATA[<p>CSS中的一些重点知识总结</p>
<p>​                  ——选择器、行内元素和块级元素、定位</p>
<span id="more"></span>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>功能：实现对HTML中元素的一对一，一对多或者多对一的控制</p>
<h3 id="元素选择器（element）："><a href="#元素选择器（element）：" class="headerlink" title="元素选择器（element）："></a>元素选择器（element）：</h3><ul>
<li><p>语法：元素名称{属性：属性值;}</p>
</li>
<li><p>实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>缺点：使用元素选择器时会对所有元素进行选择，所以操作的时候会不方便</p>
</li>
</ul>
<h3 id="类选择器（class）："><a href="#类选择器（class）：" class="headerlink" title="类选择器（class）："></a>类选择器（class）：</h3><ul>
<li><p>语法：**.**class名{属性：属性值；}</p>
</li>
<li><p>说明：一个class名可以给很多元素定义（一对多），通过class名来控制你想控制的一类元素。</p>
</li>
<li><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt; &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.box</span>&#123;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul>
<li>语法：#id名{属性名：属性值}</li>
<li>说明：一个id名只能对应HTML中一个具体的元素（唯一性），在css中不常用，通常在JS中用（getElementById)</li>
</ul>
<h3 id="选择器（通配符选择器）"><a href="#选择器（通配符选择器）" class="headerlink" title="*选择器（通配符选择器）"></a>*选择器（通配符选择器）</h3><p>一般用于最开始清除所有元素的默认页边距和填充值</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h3><p>语法：选择符1，选择符2，选择符3..{属性：属性值}</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>&#123;</span><br><span class="line">   <span class="attribute">color</span>:<span class="number">#369</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="包含选择器（后代选择器）"><a href="#包含选择器（后代选择器）" class="headerlink" title="包含选择器（后代选择器）"></a>包含选择器（后代选择器）</h3><p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> <span class="selector-tag">p</span> <span class="selector-class">.box</span>&#123;</span><br><span class="line">   <span class="attribute">color</span>:<span class="number">#369</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用空格分开（没有逗号），选择的是span中的p标签中类名为box的元素</p>
<h2 id="块级元素和行内元素"><a href="#块级元素和行内元素" class="headerlink" title="块级元素和行内元素"></a>块级元素和行内元素</h2><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>自己一个人在浏览器中占据整行，即排斥与其他元素位于同一行，如果不设置宽度，默认是100%</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>div</td>
<td>最典型的块元素</td>
</tr>
<tr>
<td>p</td>
<td>表示段落</td>
</tr>
<tr>
<td>h1-h6</td>
<td>表示1-6级标题（默认加粗）</td>
</tr>
<tr>
<td>br</td>
<td>表示换行</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/view/7534.html">ol</a></td>
<td>有序列表</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/view/7534.html">ul</a></td>
<td>无序列表</td>
</tr>
</tbody></table>
<h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>可以与其他行内元素共占一行，只有当多个行内元素的总宽度大于浏览器的宽度的时候，才会换行显示。</p>
<table>
<thead>
<tr>
<th>行内元素</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://c.biancheng.net/view/7529.html">a</a></td>
<td>超链接</td>
</tr>
<tr>
<td>span</td>
<td>常用行级</td>
</tr>
<tr>
<td>b</td>
<td>加粗，不强调</td>
</tr>
<tr>
<td>em</td>
<td>斜体，强调</td>
</tr>
<tr>
<td>i</td>
<td>斜体，不强调</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/view/7528.html">img</a></td>
<td>图片</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/view/7574.html">input</a></td>
<td>输入框</td>
</tr>
<tr>
<td><a href="http://c.biancheng.net/view/7613.html">select</a></td>
<td>下拉列表</td>
</tr>
</tbody></table>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>通过css中的<strong>position</strong>属性来设置</p>
<table>
<thead>
<tr>
<th>值</th>
<th>语义</th>
</tr>
</thead>
<tbody><tr>
<td>static</td>
<td>静态定位</td>
</tr>
<tr>
<td>relative</td>
<td>相对定位</td>
</tr>
<tr>
<td>absolute</td>
<td>绝对定位</td>
</tr>
<tr>
<td>fixed</td>
<td>固定定位</td>
</tr>
</tbody></table>
<h3 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h3><p>边偏移用于对盒子的定位，可以设置<strong>top,bottom,left,right四个属性</strong>，分别代表<strong>距离父元素</strong>上下左右的边线的距离</p>
<h3 id="相对定位（relative）"><a href="#相对定位（relative）" class="headerlink" title="相对定位（relative）"></a>相对定位（relative）</h3><p>特点：</p>
<ul>
<li>相对定位是相对于他原来的位置来说的（自恋型），即以原来盒子的左上角建系，设置的边偏移都是以这个坐标系移动</li>
<li>相对定位相对自己移动了之后，原来的位置依旧保留，跟前的盒子不会挤占他的位置</li>
</ul>
<p>特点：</p>
<h3 id="绝对定位（absolute）"><a href="#绝对定位（absolute）" class="headerlink" title="绝对定位（absolute）"></a>绝对定位（absolute）</h3><p>注意：绝对定位是相对于他的父元素来说的。（拼爹型）</p>
<p>语法：<code>选择器&#123; position: absolute; &#125;</code></p>
<p>特点：</p>
<ul>
<li>如果<strong>没有父元素</strong>或者<strong>父元素没有定位</strong>（是个标准流或者是个浮动的盒子），则以document浏览器为准来定位</li>
<li>如果祖先元素有定位（绝对，相对，固定定位都行），则以最近一级的有定位的祖先元素为参考点移动位置</li>
<li>绝对定位不再占用原来的位置（脱标）。（比如轮播图中的左右箭头不占有位置，不会挤到下面的轮播图片）</li>
</ul>
<h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>典型案例：轮播图</p>
<p>首先一个大的div，包裹轮播图片，左右按钮和小圆点，用的是相对定位。而左右按键和下面的小圆点都是子元素，用的是绝对定位。</p>
<p>特点：</p>
<ul>
<li>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟</li>
<li>父级要定位，这样才能让子元素相对于父元素进行移动，而不是相对于浏览器移动。但不能也是绝对定位，因为如果也是绝对定位，那么父元素也不占有位置，他跟前的盒子就会补充他的位置，跑到他的下面去，造成结构混乱。所以只能是相对定位</li>
</ul>
<h3 id="固定定位（fixed）"><a href="#固定定位（fixed）" class="headerlink" title="固定定位（fixed）"></a>固定定位（fixed）</h3><p>作用：可以固定到浏览器可视区的一个固定位置，在页面滚动的时候元素的位置不会改变（比如看板娘，两侧固定的广告，返回顶部的按钮）</p>
<p>语法：<code>position：fixed</code></p>
<p>注意：</p>
<ul>
<li>他的位置是参照浏览器的<strong>可视窗口</strong></li>
<li>固定定位不占有原来的位置（脱标）</li>
<li>与父元素没有任何关系</li>
</ul>
<p>典型案例：返回顶部的按钮</p>
<p>这个按钮始终在版心的右侧，即<img src="/../img/CSS/image-20220403091930338.png" alt="image-20220403091930338"></p>
<p>算法：</p>
<p>首先让按钮向右走浏览器的一半，即<code>left:50%</code>,再向右走版心宽度的一半，因为left已经设置过了，所以继续移动可以设置外边距，即<code>margin-left:版心宽度的一半</code></p>
<h3 id="定位叠放次序"><a href="#定位叠放次序" class="headerlink" title="定位叠放次序"></a>定位叠放次序</h3><p>可能会出现层层重叠的情况，通过z-index来控制盒子的前后顺序（即盒子在z轴的位置）</p>
<ul>
<li>数值：负整数，0或正整数，数值越大，盒子越靠上</li>
<li>如果一系列盒子的位置和定位方式相同，没有设置z-index，则在最上面的是最后创建的那个</li>
<li>语法：选择器{z-index:2};</li>
<li>注意：①没有单位②只有定位的盒子才有这个属性，而标准流和浮动没有这个属性</li>
</ul>
<h3 id="实现居中"><a href="#实现居中" class="headerlink" title="实现居中"></a>实现居中</h3><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><p>没有加定位的盒子可以通过：margin ：0 auto来实现水平居中。</p>
<p>但是加了绝对定位的盒子通过上述方法无法实现水平居中。可以通过下面的方法实现：</p>
<ol>
<li>先向右移父元素宽度的一半：left：50%</li>
<li>再往左走自己宽度的一半：margin-left：（-1）*自己宽度的一半</li>
</ol>
<h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><p>加了绝对定位的盒子：</p>
<ol>
<li>先向下走父元素高度的一半：top:50%</li>
<li>再向上走自己高度的一半：top-margin:(-1)*自己高度的一半</li>
</ol>
<h3 id="定位特性"><a href="#定位特性" class="headerlink" title="定位特性"></a>定位特性</h3><ol>
<li><p>当给行内元素添加绝对定位或者固定定位的时候，就会自动把行内元素转化为块内元素，之后就可以不转变他的display的方式就来设置高度和宽度。</p>
</li>
<li><p>块级元素如果不给高度和宽度，没添加定位之前，宽度默认的是整个浏览器的宽度，添加相对和绝对定位后，默认的是内容的大小（包裹性）</p>
</li>
<li><p>如果一个元素添加浮动或者绝对定位，就会脱标，不再占用原来的位置，后面的元素就会补充占据他的位置，那么盒子就会压住补充的元素，但两者有一点不同。</p>
<p>没有添加浮动之前</p>
<p><img src="/../img/CSS/image-20220403095644730.png" alt="image-20220403095644730"></p>
<p>添加浮动之后</p>
<p><img src="/../img/CSS/image-20220403095836903.png" alt="image-20220403095836903"></p>
<p>说明盒子虽然会压住后来补充的span，但不会遮住span里面的文字</p>
<p>没有添加定位之前</p>
<p><img src="/../img/CSS/image-20220403095644730.png" alt="image-20220403095644730"></p>
<p>添加绝对定位之后</p>
<p><img src="/../img/CSS/image-20220403100110669.png" alt="image-20220403100110669"></p>
<p>盒子压住了span里面的文字</p>
</li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>链表刷题</title>
    <url>/2022/04/03/%E9%93%BE%E8%A1%A8%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<p>leetcode刷题，顺序：由易到难</p>
<span id="more"></span>

<h3 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h3><p>题解：</p>
<ol>
<li><p>一个前驱结点</p>
</li>
<li><p>比较l1和l2指向的val,谁更小谁就接在前驱结点的后面</p>
</li>
<li><p>图示：</p>
<p><img src="/../img/%E9%93%BE%E8%A1%A8%E5%88%B7%E9%A2%98/image-20220403103303215.png" alt="image-20220403103303215"></p>
</li>
<li><p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判空情况</span></span><br><span class="line">        <span class="keyword">if</span>(list1==<span class="literal">nullptr</span>)</span><br><span class="line">         <span class="keyword">return</span> list2;</span><br><span class="line">         <span class="keyword">if</span>(list2==<span class="literal">nullptr</span>)</span><br><span class="line">         <span class="keyword">return</span> list1;</span><br><span class="line">       </span><br><span class="line">        ListNode*dummy=<span class="keyword">new</span> ListNode;</span><br><span class="line">        ListNode*cur=dummy;</span><br><span class="line">        ListNode*l1=list1;</span><br><span class="line">        ListNode*l2=list2;</span><br><span class="line">        <span class="keyword">while</span>(l1&amp;&amp;l2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val&lt;=l2-&gt;val)&#123;</span><br><span class="line">                cur-&gt;next=l1;</span><br><span class="line">                l1=l1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(l1-&gt;val&gt;l2-&gt;val)&#123;</span><br><span class="line">                cur-&gt;next=l2;</span><br><span class="line">                l2=l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur-&gt;next;</span><br><span class="line">        &#125; </span><br><span class="line">        cur-&gt;next=l1==<span class="literal">nullptr</span>?l2:l1;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="删除排序链表中的重复元素"><a href="#删除排序链表中的重复元素" class="headerlink" title="删除排序链表中的重复元素"></a>删除排序链表中的重复元素</h3><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p>
<p>题解：</p>
<ol>
<li><p>一个指针就行了，双指针就麻烦了（捂脸）</p>
</li>
<li><p>如果cur-&gt;val等于cur-&gt;next-&gt;val，就让next等于next-&gt;next，直到退出循环，如果不相等，让cur后移</p>
</li>
<li><p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(head==<span class="literal">nullptr</span>||head-&gt;next==<span class="literal">nullptr</span>)</span><br><span class="line">				<span class="keyword">return</span> head;</span><br><span class="line">			ListNode*cur=head;</span><br><span class="line">			<span class="keyword">while</span>(cur) &#123;</span><br><span class="line">				<span class="keyword">while</span>(cur&amp;&amp;cur-&gt;next&amp;&amp;cur-&gt;val==cur-&gt;next-&gt;val) &#123;</span><br><span class="line">					cur-&gt;next=cur-&gt;next-&gt;next;</span><br><span class="line">				&#125;</span><br><span class="line">				cur=cur-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> head;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h3><p>方法一：哈希表：用unordered_set判断就行了</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(!head)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			unordered_set&lt;ListNode*&gt;set;</span><br><span class="line">			<span class="keyword">while</span>(head) &#123;</span><br><span class="line">				<span class="keyword">if</span>(set.<span class="built_in">count</span>(head)==<span class="number">0</span>) &#123;</span><br><span class="line">					set.<span class="built_in">insert</span>(head);</span><br><span class="line">					head=head-&gt;next;</span><br><span class="line">				&#125; <span class="keyword">else</span></span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>方法2：我又给忘了快慢指针了🤦‍♀️</p>
<p>快指针一次走两步，慢指针一次走一步。如果没有环，则快指针会会走到空指针，如果有环，则快指针每次都比满指针多走一步，有环的话快指针会追上满指针的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">			<span class="comment">//没有节点或者只有一个节点时无法成环</span></span><br><span class="line">			<span class="keyword">if</span>(!head||head-&gt;next==<span class="literal">nullptr</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//注意这里初始时快指针要比慢指针多走一步，因为如果两者起点相同，一进入循环就相等返回true了，如果满指针比快指针初始时多走一步，会在第二次循环的时候两者就相遇返回true了，所以</span></span><br><span class="line">			ListNode*fast=head-&gt;next;</span><br><span class="line">			ListNode*slow=head;</span><br><span class="line">			<span class="keyword">while</span>(fast!=<span class="literal">nullptr</span>&amp;&amp;fast-&gt;next!=<span class="literal">nullptr</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span>(slow==fast) &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				slow=slow-&gt;next;</span><br><span class="line">				fast=fast-&gt;next-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>文件操作小作业</title>
    <url>/2022/04/04/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<p>文件操作小作业解答，真就是敲代码两小时，测试一整天😓</p>
<span id="more"></span>

<h3 id="商品管理系统题目"><a href="#商品管理系统题目" class="headerlink" title="商品管理系统题目"></a>商品管理系统题目</h3><p><strong>练习目的</strong>：随机存取文件的建立、读取、记录删除和更新操作。</p>
<p><strong>问题描述：</strong>有一家商店，为了查看店里有些什么商品、数量有多少以及每件商品的价格如何，需要编制一份商品目录。每种商品都包括4种属性：商品ID、商品名、数量与价格。商品ID为0—99之间的整数，每种商品的ID号互不相同，所以这里默认只有100种商品；商品名只包含大小写字母与空格，长度不超过35个字符；商品数量的范围是0—99999；商品的价格为一个非负的浮点数。</p>
<p>你要帮助商店设计一个二进制文件，存储该商店的所有商品情况。下表为该商店商品清单的样例。</p>
<table>
<thead>
<tr>
<th>记录号（商品ID）</th>
<th>商品名</th>
<th>数量</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>Lamp</td>
<td>23</td>
<td>5.99</td>
</tr>
<tr>
<td>8</td>
<td>Screwdriver</td>
<td>9</td>
<td>7.99</td>
</tr>
<tr>
<td>10</td>
<td>Hammer</td>
<td>10</td>
<td>12.00</td>
</tr>
<tr>
<td>13</td>
<td>Bicycle</td>
<td>5</td>
<td>100.99</td>
</tr>
<tr>
<td>16</td>
<td>Optical mouse</td>
<td>21</td>
<td>11.50</td>
</tr>
<tr>
<td>25</td>
<td>keyboard</td>
<td>32</td>
<td>59.99</td>
</tr>
</tbody></table>
<p>要求：</p>
<p>1.设计一个结构，来表示一件商品。</p>
<p>2.创建名为“commodity.dat”的二进制文件，存储该商店商品信息，初始化为100条空记录，用商品ID作为记录号。</p>
<p>3.实现对“commodity.dat”中商品信息的初始化录入。</p>
<p>4.根据商品记录号，实现对“commodity.dat”中商品信息的更新，其中记录号不可以更新，其他三项信息均可更新。</p>
<p>5.根据商品记录号，实现对“commodity.dat”中商品信息的删除。</p>
<p>6.实现对“commodity.dat”中全部商品信息的输出。</p>
<p>7.上述2~6项中对文件的初始化、单条商品记录的删除和更新、文件信息的输出这些功能，都分别定义成单独的函数。</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我把容易出错的地方写了出来，就不附完整代码了，学术诚信哈~</p>
<h3 id="变量的设置"><a href="#变量的设置" class="headerlink" title="变量的设置"></a>变量的设置</h3><p>因为我想将（数组置零，将文件中的内容拷贝到数组中，移动文件指针）这一系列的操作封装成一个函数，因为每个操作前面都要用到，而在该函数内的操作可以让其他函数也受到影响，所以我将arr,brr，fp文件指针都设成了全局变量，会好操作一点。免得传参很麻烦。</p>
<h3 id="打开文件（在每次选择之后都要调用这个函数）"><a href="#打开文件（在每次选择之后都要调用这个函数）" class="headerlink" title="打开文件（在每次选择之后都要调用这个函数）"></a>打开文件（在每次选择之后都要调用这个函数）</h3><p>参数num：记录是选择的哪一个</p>
<ul>
<li>如果num&#x3D;&#x3D;1，即为创建一百条空记录<ol>
<li>如果没有commodity.dat文件，即rb+返回的是NULL，则以wb+的方式创建一个</li>
<li>如果有，那就没啥事了</li>
</ol>
</li>
<li>如果num！&#x3D;1,则是对商品信息进行管理<ol>
<li>如果commodity.dat文件，即rb+返回的是NULL，则强制退出</li>
<li>如果有，那就操作就行了</li>
</ol>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="type">void</span> <span class="title function_">open</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((fp = fopen(<span class="string">&quot;commodity.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fp = fopen(<span class="string">&quot;commodity.dat&quot;</span>, <span class="string">&quot;wb +&quot;</span>);</span><br><span class="line">            fp = fopen(<span class="string">&quot;commodity.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;无法打开文件。(请先创建文件再处理商品信息)&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">//退出程序</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h3><ul>
<li>结构体数组arr置零</li>
<li>rewind将指针指向开头</li>
<li>用fread将文件中的内容读入到arr中</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">prev</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//数组置零</span></span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">    <span class="comment">//文件指针回到开头</span></span><br><span class="line">    rewind(fp);</span><br><span class="line">    <span class="comment">//将文件中的内容读取到数组中去</span></span><br><span class="line">    fread(arr, <span class="keyword">sizeof</span>(product), <span class="number">100</span>, fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建一百条空记录"><a href="#创建一百条空记录" class="headerlink" title="创建一百条空记录"></a>创建一百条空记录</h3><ul>
<li><p>arr数组置零</p>
</li>
<li><p>for循环遍历将arr[i].id赋值，即初始化序号id</p>
</li>
<li><p>rewind将fp文件指针指向文件开头</p>
</li>
<li><p>fwrite将arr的内容写入文件</p>
</li>
<li><p>fwrite函数</p>
<blockquote>
<p>size_t <code> </code>fwrite<code>(</code>const<code> </code>void<code> </code>*ptr, <code>size_t  size, </code>size_t<code> </code>nmemb, <code>FILE</code> stream)</p>
<p>第一个参数是要写入数据的头指针</p>
<p>第二个参数是每一个写入元素的大小</p>
<p>第三个是写入这样的元素的个数</p>
<p>第四个是文件指针，即你要往哪里写</p>
<p>所以针对本题我们应该是，头指针也就是数组名，写入元素的大小是sizeof(product),写入的个数是100，文件指针就是fp</p>
</blockquote>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(FILE* fp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    rewind(fp);</span><br><span class="line">    fwrite(arr, <span class="keyword">sizeof</span>(product), <span class="number">100</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;100条空记录创建完毕\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="清屏操作"><a href="#清屏操作" class="headerlink" title="清屏操作"></a>清屏操作</h3><p><code>system(&quot;pause&quot;);</code>：可以让屏幕显示“请按任意键继续…”</p>
<p><code>system(&quot;cls&quot;);</code>：清屏</p>
<p>该函数用于两个功能之间切换的过渡</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">refresh</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输出所有已经录入的商品"><a href="#输出所有已经录入的商品" class="headerlink" title="输出所有已经录入的商品"></a>输出所有已经录入的商品</h3><p>注意点：</p>
<ul>
<li>这里就不能将文件中的信息读入arr中了，因为这样会让arr原来存储的内容丢失，所以这里用brr数组代替，然后遍历数组即可。</li>
<li>如何判断本id号有没有存储信息呢？我用的是strlen判断是否长度为0，如果长度为0，则说明没有存储信息。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">showAll</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(brr, <span class="number">0</span>, <span class="keyword">sizeof</span>(brr));</span><br><span class="line">    rewind(fp);</span><br><span class="line">    fread(brr, <span class="keyword">sizeof</span>(product), <span class="number">100</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;商品信息如下：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;记录号（商品ID）  商品名\t\t\t\t数量\t价格\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(brr[i].name) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-10d\t  %-35s\t%-4d\t%-4.2lf\n&quot;</span>,</span><br><span class="line">                brr[i].id, brr[i].name, brr[i].num, brr[i].price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输出指定id号的商品"><a href="#输出指定id号的商品" class="headerlink" title="输出指定id号的商品"></a>输出指定id号的商品</h3><p>这个没啥注意的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">showPart</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;记录号（商品ID）  商品名\t\t\t\t数量\t价格\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-10d\t  %-35s\t%-4d\t%-4.2lf\n&quot;</span>,</span><br><span class="line">        id, arr[id].name, arr[id].num, arr[id].price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增添商品信息"><a href="#增添商品信息" class="headerlink" title="增添商品信息"></a>增添商品信息</h3><ul>
<li>前置操作</li>
<li>用while（1）死循环，直到用户输入-1即可break退出循环</li>
<li>循环内部重点处理id的内容，由于用户有可能输入一串字母，或是不在1-100范围内的数字，所以这里我先以字符串的形式读入，在用atoi函数将其转化为整数，再进行判断。</li>
<li>fewind将文件指针指向开头</li>
<li>fwrite将arr写入文件中</li>
<li>输出商品的信息（showAll）</li>
<li>refresh刷新界面</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    prev();</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    A:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入商品信息[ID为-1代表输入结束]：\n商品ID:&quot;</span>);</span><br><span class="line">        <span class="type">char</span> ch[<span class="number">10000</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot; %s&quot;</span>, ch);</span><br><span class="line">        <span class="type">int</span> id = atoi(ch);</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (id &gt; <span class="number">100</span> || id &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ID的取值范围是1-100，请输入合法的ID值!\n\n&quot;</span>);</span><br><span class="line">            <span class="keyword">goto</span> A;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;商品名：&quot;</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>, arr[id].name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数量：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[id].num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;价格：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;arr[id].price);</span><br><span class="line">    &#125;</span><br><span class="line">    rewind(fp);</span><br><span class="line">    fwrite(arr, <span class="keyword">sizeof</span>(product), <span class="number">100</span>, fp);</span><br><span class="line">    <span class="comment">//输出刚刚记录的商品</span></span><br><span class="line">    showAll();</span><br><span class="line">    refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更新商品信息"><a href="#更新商品信息" class="headerlink" title="更新商品信息"></a>更新商品信息</h3><ul>
<li><p>前置操作</p>
</li>
<li><p>用while死循环，直到用户-1</p>
<ul>
<li><p>循环里要注意的：1.id号的读入方式（和add里面是一样的）2。当更新的时候，如果输入的是回车，就表示该项不更新，跳过.核心的代码就是下面这点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;商品名：&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="type">char</span> str[<span class="number">1000</span>];</span><br><span class="line">gets(str);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(str, <span class="string">&quot;\0&quot;</span>) == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">strcpy</span>(arr[id].name, str);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数量:&quot;</span>);</span><br><span class="line">gets(str);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(str, <span class="string">&quot;\0&quot;</span>) == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> arr[id].num = atoi(str);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;价格:&quot;</span>);</span><br><span class="line">gets(str);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(str, <span class="string">&quot;\0&quot;</span>) == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    arr[id].price = atof(str);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>fewind将文件指针指向开头</p>
</li>
<li><p>fwrite将arr写入文件中</p>
</li>
</ul>
<h3 id="删除商品记录"><a href="#删除商品记录" class="headerlink" title="删除商品记录"></a>删除商品记录</h3><ul>
<li><p>前置操作</p>
</li>
<li><p>用while死循环，直到用户-1</p>
<ul>
<li>循环里需要注意的是就是处理删除的那点，先将那一项的所有置零，用fseek函数将文件指针移到指定的那一项，再用fwrite将从指定一项开始覆盖掉后面的</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;ch);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(arr[id].name, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr[id].name));</span><br><span class="line">    arr[id].num = <span class="number">0</span>;</span><br><span class="line">    arr[id].price = <span class="number">0</span>;</span><br><span class="line">    fseek(fp, id * <span class="keyword">sizeof</span>(product), <span class="number">0</span>);</span><br><span class="line">    fwrite(&amp;arr[id], <span class="keyword">sizeof</span>(product), <span class="number">1</span>, fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;记录号为%d的商品成功删除\n&quot;</span>, id);</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HTML表单验证</title>
    <url>/2022/04/05/HTML%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<p>归纳了html中的表单相关知识（包含HTML5新增表单属性），并做了一个表单案例练手。</p>
<span id="more"></span>

<h2 id="表单的属性"><a href="#表单的属性" class="headerlink" title="表单的属性"></a>表单的属性</h2><h3 id="form属性1：action属性"><a href="#form属性1：action属性" class="headerlink" title="form属性1：action属性"></a>form属性1：action属性</h3><p><strong>用法：</strong>定义了提交表单要执行的操作。即用户点击提交按钮的时候，表单数据会发送到服务器上的哪个地址(URL)中。</p>
<p><strong>默认：</strong>如果没有写action属性，则会默认将action设置为当前页。</p>
<p><strong>示例：</strong>下面这个表单提交后会发送到”action_page.php”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fname&quot;</span>&gt;</span>First name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Bill&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lname&quot;</span>&gt;</span>Last name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Gates&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="form属性2：target属性"><a href="#form属性2：target属性" class="headerlink" title="form属性2：target属性"></a>form属性2：target属性</h3><p>用法：规定了表单在提交中地址的目标</p>
<p>默认：为_self，即响应在当前窗口中打开</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">_blank</td>
<td align="left">响应显示在新窗口或选项卡中。</td>
</tr>
<tr>
<td align="left">_self</td>
<td align="left">响应显示在当前窗口中。</td>
</tr>
<tr>
<td align="left">_parent</td>
<td align="left">响应显示在父框架中。</td>
</tr>
<tr>
<td align="left">_top</td>
<td align="left">响应显示在窗口的整个 body 中。</td>
</tr>
<tr>
<td align="left">framename</td>
<td align="left">响应显示在命名的 iframe 中。</td>
</tr>
</tbody></table>
<p>示例：下面的提交结果将在新的浏览器标签页中打开：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="form属性3：method属性"><a href="#form属性3：method属性" class="headerlink" title="form属性3：method属性"></a>form属性3：method属性</h3><p>用法：规定了提交表单时用到的HTTP方法（post&#x2F;get)</p>
<p>默认：get(不要用get发送敏感数据，比如密码)</p>
<p>示例：提交表单时用get</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="form属性4：autocomplete属性"><a href="#form属性4：autocomplete属性" class="headerlink" title="form属性4：autocomplete属性"></a>form属性4：autocomplete属性</h3><p>用法：输入文本框，输入一次，下一次再输入会自动提示，该属性规定了表单是否会自动完成的功能。这个属性input也有</p>
<p>示例：启用自动填写的表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action_page.php&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;on&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../img/HTML%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/image-20220405085012594.png" alt="image-20220405085012594"></p>
<h3 id="input属性1：placeholder属性"><a href="#input属性1：placeholder属性" class="headerlink" title="input属性1：placeholder属性"></a>input属性1：placeholder属性</h3><p>用法：注册界面的这个灰色的提示信息</p>
<p><img src="/../img/HTML%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/image-20220405084740890.png" alt="image-20220405084740890"></p>
<h3 id="input-属性2：-autofocus"><a href="#input-属性2：-autofocus" class="headerlink" title="input 属性2： autofocus"></a>input 属性2： autofocus</h3><h2 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h2><h3 id="form元素"><a href="#form元素" class="headerlink" title="form元素"></a>form元素</h3><p>用法：收集用户的输入</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"> .</span><br><span class="line">form elements</span><br><span class="line"> .</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>form元素可以是input 元素、复选框、单选按钮、提交按钮等等。</p>
<h3 id="input元素"><a href="#input元素" class="headerlink" title="input元素"></a>input元素</h3><p>input元素会根据不同的type属性变换各种形态</p>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">描述</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/button">button</a></td>
<td align="left">没有默认行为的按钮，上面显示 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-value">value</a> 属性的值，默认为空。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/radio">radio</a></td>
<td align="left">单选按钮，允许在多个拥有相同 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-name">name</a> 值的选项中选中其中一个。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/checkbox">checkbox</a></td>
<td align="left">复选框，可设为选中或未选中。默认选中：在该复选框中加入checked&#x3D;”checked”</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/color">color</a></td>
<td align="left">用于指定颜色的控件；在支持的浏览器中，激活时会打开取色器。</td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/HTML/HTML5">HTML5</a></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/date">date</a></td>
<td align="left">输入日期的控件（年、月、日，不包括时间）。在支持的浏览器激活时打开日期选择器或年月日的数字滚轮。</td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/HTML/HTML5">HTML5</a></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/datetime-local">datetime-local</a></td>
<td align="left">输入日期和时间的控件，不包括时区。在支持的浏览器激活时打开日期选择器或年月日的数字滚轮。</td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/HTML/HTML5">HTML5</a></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file">file</a></td>
<td align="left">让用户选择文件的控件。使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#attr-accept">accept</a> 属性规定控件能选择的文件类型。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/number">number</a></td>
<td align="left">用于输入数字的控件。如果支持的话，会显示滚动按钮并提供缺省验证（即只能输入数字）。拥有动态键盘的设备上会显示数字键盘。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/password">password</a></td>
<td align="left">单行的文本区域，其值会被遮盖。如果站点不安全，会警告用户。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/search">search</a></td>
<td align="left">用于搜索字符串的单行文字区域。输入文本中的换行会被自动去除。在支持的浏览器中可能有一个删除按钮，用于清除整个区域。</td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/HTML/HTML5">HTML5</a></td>
</tr>
<tr>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/submit">submit</a></td>
<td align="left">用于提交表单的按钮。更改里面的值只需更改value即可</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>示例1 选择文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../img/HTML%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/image-20220405093733724.png" alt="image-20220405093733724"></p>
<p>示例2 纯文本表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;这里有文本&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../img/HTML%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/image-20220405093908211.png" alt="image-20220405093908211"></p>
<p>示例3 提交表单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../img/HTML%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/image-20220405093954069.png" alt="image-20220405093954069"></p>
<h3 id="select元素（下拉列表）"><a href="#select元素（下拉列表）" class="headerlink" title="select元素（下拉列表）"></a>select元素（下拉列表）</h3><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/demo/demo_form.asp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;A-soul&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;贝拉&quot;</span>&gt;</span>贝拉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;嘉然&quot;</span>&gt;</span>嘉然<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;嘉然&quot;</span>&gt;</span>嘉然<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;乃琳&quot;</span>&gt;</span>乃琳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;珈乐&quot;</span>&gt;</span>珈乐<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/../img/HTML%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/image-20220405094850510.png" alt="image-20220405094850510"></p>
<p>option这个元素中定义了待选择的选项，默认会将首选项显示为被选选项，可以添加selected属性来定义被选选项，比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;嘉然&quot;</span> <span class="attr">selected</span> &gt;</span>嘉然<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="datalist元素（控件可选值）"><a href="#datalist元素（控件可选值）" class="headerlink" title="datalist元素（控件可选值）"></a>datalist元素（控件可选值）</h3><p>图片中的效果是怎么做出来的呢?</p>
<p><img src="/../img/HTML%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/image-20220405085632278.png" alt="image-20220405085632278"></p>
<p>使用了<code>datalist</code>的元素。datalist元素为input元素规定预定义选项的列表，用来定义input可能的值，datalist和他的选项如果不点击表单的话并不会被显示出来，仅仅是合法的输入值列表。用户会在他们输入数据的时候看到预定义选项的下拉列表</p>
<p>用法：在input元素中的list属性来绑定datalist的id值</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;myCar&quot;</span> <span class="attr">list</span>=<span class="string">&quot;cars&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;cars&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;BMW&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Ford&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Volvo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><p>作用：让表单更具人性化，即在label包裹的元素内点击文本，就会触发它绑定其他元素。</p>
<p>语法：label的for属性要和与其相绑定的元素的id属性相同</p>
<p>示例：<img src="../img/HTML表单验证/image-20220405110843394.png" alt="image-20220405110843394" style="zoom: 67%;" />像这个表单，要做到点击“男”和图片也能勾选单选按钮，则需要这样写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;man.jpg&quot;</span>&gt;</span> 男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;women.jpg&quot;</span>&gt;</span> 女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="textarea多行文本域"><a href="#textarea多行文本域" class="headerlink" title="textarea多行文本域"></a>textarea多行文本域</h3><p>作用：定义多行的文本输入框</p>
<p>语法：</p>
<ol>
<li>通过rows规定行数，cols规定列数.</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">在w3school，你可以找到你所需要的所有的网站建设教程。</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="../img/HTML表单验证/image-20220405112401543.png" alt="image-20220405112401543" style="zoom:67%;" />

<ol start="2">
<li>在css中通过width和height规定宽高</li>
</ol>
<h2 id="表单验证的两种方式"><a href="#表单验证的两种方式" class="headerlink" title="表单验证的两种方式"></a>表单验证的两种方式</h2><ol>
<li><p>form表单提交到后台</p>
</li>
<li><p>无刷新的Ajax提交</p>
</li>
</ol>
<h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h3><h3 id="总体"><a href="#总体" class="headerlink" title="总体"></a><strong>总体</strong></h3><p><img src="/../img/HTML%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/image-20220405104630818.png" alt="image-20220405104630818"></p>
<p>table标签定义HTML的表格，一个表格由table元素以及多个tr,td,th元素组成</p>
<p>tr:表格的行数 td:表格单元（列数） th:表头</p>
<p>首先是一个大的table标签包含所有内容，里面是tr的行标签，tr里面再包含td左右两个单元格</p>
<h3 id="局部"><a href="#局部" class="headerlink" title="局部"></a><strong>局部</strong></h3><p>性别：input单选框radio+小图片+人性化label</p>
<p>生日：input时间框date</p>
<p>所在地区：input文本框+value：北京思密达</p>
<p>婚姻状况：input单选框</p>
<p>学历：selected下拉选择框+option选项</p>
<p>喜欢的类型：input多选框checkbox</p>
<p>自我介绍：多行文本框textarea</p>
<p>免费注册：input提交框submit+value免费注册</p>
<p>我同意注册条款：input多选框+checked&#x3D;”checked”</p>
<p>我是会员立即登录：a标签</p>
<p>我承诺+承诺内容：h3标题   +ul中套三个li</p>
<h3 id="成品（纯html"><a href="#成品（纯html" class="headerlink" title="成品（纯html)"></a>成品（纯html)</h3><img src="../img/HTML表单验证/image-20220405113800799.png" alt="image-20220405113800799" style="zoom: 50%;" />

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单综合案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>青春不常在，抓紧谈恋爱<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;man.jpg&quot;</span>&gt;</span> 男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;women.jpg&quot;</span>&gt;</span> 女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>所在地区<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京思密达&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>婚姻状况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marriage&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hunyin&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;hunyin&quot;</span>&gt;</span>未婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marriage&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hunyin&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;hunyin&quot;</span>&gt;</span>离婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marriage&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hunyin&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;hunyin&quot;</span>&gt;</span>已婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>学历<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>幼儿园<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>中学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>研究生<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>博士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>神！<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>喜欢的类型<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>甜妹</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>辣妹</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>御姐</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>自我介绍<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span>你不嫁，我不嫁，养老院里蹦恰恰<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>我同意注册条款</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是会员，立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我承诺🙋‍♀️<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年满18岁<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>抱着严肃的态度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>真诚寻找另一半<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完结撒花★★</p>
]]></content>
  </entry>
  <entry>
    <title>前端学习路线</title>
    <url>/2022/04/05/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<p>内容转载自B站技术胖up主，我只是为了方便自己自查，侵删。</p>
<span id="more"></span>

<p>| up主视频说明：<a href="https://www.bilibili.com/video/BV1ub4y1h7ZY">https://www.bilibili.com/video/BV1ub4y1h7ZY</a></p>
<h2 id="前端学习路线思维导图"><a href="#前端学习路线思维导图" class="headerlink" title="前端学习路线思维导图"></a>前端学习路线思维导图</h2><p><img src="/../img/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/web_atlas.jpg" alt="web_atlas"></p>
<h2 id="网络知识"><a href="#网络知识" class="headerlink" title="网络知识"></a>网络知识</h2><p>（Internet）</p>
<ul>
<li><ol>
<li>网络工作原理</li>
</ol>
</li>
<li>计算机网络原理：<a href="https://www.bilibili.com/video/BV1xJ41137Q3">https://www.bilibili.com/video/BV1xJ41137Q3</a></li>
<li><ol start="2">
<li>什么是HTTP</li>
</ol>
</li>
<li>HTTP协议详解：<a href="https://www.bilibili.com/video/BV1js411g7Fw">https://www.bilibili.com/video/BV1js411g7Fw</a></li>
<li><ol start="3">
<li>浏览器及工作方式</li>
</ol>
</li>
<li>浏览器是如何运作的？：<a href="https://www.bilibili.com/video/BV1x54y1B7RE">https://www.bilibili.com/video/BV1x54y1B7RE</a></li>
<li><ol start="4">
<li>DNS 及其工作原理</li>
</ol>
</li>
<li>DNS基本工作原理：<a href="https://www.bilibili.com/video/BV1GW411j7Ts">https://www.bilibili.com/video/BV1GW411j7Ts</a></li>
<li>直观DNS科普：<a href="https://www.bilibili.com/video/BV1F54y1R7BC">https://www.bilibili.com/video/BV1F54y1R7BC</a></li>
<li><ol start="5">
<li>域名相关知识</li>
</ol>
</li>
<li>域名解析完整讲解：<a href="https://www.bilibili.com/video/BV1zA411x7Pj">https://www.bilibili.com/video/BV1zA411x7Pj</a></li>
<li><ol start="6">
<li>云服务相关知识</li>
</ol>
</li>
<li>揭秘阿里云服务器：<a href="https://www.bilibili.com/video/BV1Rt411u7k4">https://www.bilibili.com/video/BV1Rt411u7k4</a></li>
</ul>
<h2 id="超文本标记语言"><a href="#超文本标记语言" class="headerlink" title="超文本标记语言"></a>超文本标记语言</h2><p>（HTML）</p>
<ul>
<li><ol>
<li>HTML基础知识学习</li>
</ol>
</li>
<li>HTML全套基础教程：<a href="https://www.bilibili.com/video/BV11t411K74Q">https://www.bilibili.com/video/BV11t411K74Q</a></li>
<li><ol start="2">
<li>HTML 编写规则 和语义化写法</li>
</ol>
</li>
<li>HTML 速成：<a href="https://www.bilibili.com/video/BV1vs411M7aT">https://www.bilibili.com/video/BV1vs411M7aT</a></li>
<li><ol start="3">
<li>表单和验证</li>
</ol>
</li>
<li>html5表单验证：<a href="https://www.bilibili.com/video/BV16K4y1Z7Gb">https://www.bilibili.com/video/BV16K4y1Z7Gb</a></li>
<li><ol start="4">
<li>公约和最佳实践方法</li>
</ol>
</li>
<li>前端代码规范秘籍：<a href="https://www.bilibili.com/video/BV19P4y147Jz">https://www.bilibili.com/video/BV19P4y147Jz</a></li>
<li><ol start="5">
<li>SEO 基础知识</li>
</ol>
</li>
<li>SEO优化学习教程：<a href="https://www.bilibili.com/video/BV1fE411J7ya">https://www.bilibili.com/video/BV1fE411J7ya</a></li>
</ul>
<h2 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h2><p>（CSS)</p>
<ul>
<li><ol>
<li>CSS 基础知识学习</li>
</ol>
</li>
<li>CSS3基础教程：<a href="https://www.bilibili.com/video/BV1Bx411u7cS">https://www.bilibili.com/video/BV1Bx411u7cS</a></li>
<li>CSS3全套教程：<a href="https://www.bilibili.com/video/BV1et411q74F">https://www.bilibili.com/video/BV1et411q74F</a></li>
<li><ol start="2">
<li>页面切图和布局实现</li>
</ol>
</li>
</ul>
<ul>
<li>浮动布局</li>
<li>浮动布局：<a href="https://www.bilibili.com/video/BV1Zs411j7Z3">https://www.bilibili.com/video/BV1Zs411j7Z3</a></li>
<li>定位布局</li>
<li>CSS定位布局：<a href="https://www.bilibili.com/video/BV1ni4y1g7tc">https://www.bilibili.com/video/BV1ni4y1g7tc</a></li>
<li>Display</li>
<li>display&amp;visibility：<a href="https://www.bilibili.com/video/BV1HJ411M7CM">https://www.bilibili.com/video/BV1HJ411M7CM</a></li>
<li>盒子模型</li>
<li>CSS盒子模型与定位：<a href="https://www.bilibili.com/video/BV1P7411G7BW">https://www.bilibili.com/video/BV1P7411G7BW</a></li>
<li>Grid 布局</li>
<li>如何用grid：<a href="https://www.bilibili.com/video/BV14C4y1W7oA">https://www.bilibili.com/video/BV14C4y1W7oA</a></li>
<li>Flex 布局</li>
<li>Flex伸缩布局：<a href="https://www.bilibili.com/video/BV1BJ41197XE">https://www.bilibili.com/video/BV1BJ41197XE</a></li>
</ul>
<ul>
<li><ol start="3">
<li>页面响应式布局设计</li>
</ol>
</li>
<li>六个案例学会响应式布局：<a href="https://www.bilibili.com/video/BV1ov411k7sm">https://www.bilibili.com/video/BV1ov411k7sm</a></li>
</ul>
<h2 id="浏览器脚本语言"><a href="#浏览器脚本语言" class="headerlink" title="浏览器脚本语言"></a>浏览器脚本语言</h2><p>(JavaScript)</p>
<ul>
<li><ol>
<li>JavaScript基础语法和知识</li>
</ol>
</li>
<li>JavaScript基础语法：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></li>
<li><ol start="2">
<li>使用JavaScript 操作 DOM元素</li>
</ol>
</li>
<li>JS必会的DOM BOM操作：<a href="https://www.bilibili.com/video/BV1k4411w7sV">https://www.bilibili.com/video/BV1k4411w7sV</a></li>
<li><ol start="3">
<li>Ajax 异步请求相关知识学习</li>
</ol>
</li>
<li>Ajax入门到精通：<a href="https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></li>
<li><ol start="4">
<li>ES6 以上版本 的JavaScript</li>
</ol>
</li>
<li>ES6-ES11新特性：<a href="https://www.bilibili.com/video/BV1uK411H7on">https://www.bilibili.com/video/BV1uK411H7on</a></li>
</ul>
<h2 id="版本控制管理系统"><a href="#版本控制管理系统" class="headerlink" title="版本控制管理系统"></a>版本控制管理系统</h2><p>Version Control System</p>
<ul>
<li><ol>
<li>Git的基本用法</li>
</ol>
</li>
<li>Git最新教程：<a href="https://www.bilibili.com/video/BV1FE411P7B3">https://www.bilibili.com/video/BV1FE411P7B3</a></li>
<li><ol start="2">
<li>相关平台&#x2F;软件的使用</li>
</ol>
</li>
</ul>
<ul>
<li>GitHub</li>
<li>十分钟学会Github：<a href="https://www.bilibili.com/video/BV1yo4y1d7UK">https://www.bilibili.com/video/BV1yo4y1d7UK</a></li>
<li>GitLab</li>
<li>gitlab使用说明：<a href="https://www.bilibili.com/video/BV11E411x7Uv">https://www.bilibili.com/video/BV11E411x7Uv</a></li>
<li>Gitee</li>
<li>这个看中文网址就可以了，目前B站还没有很好的视频介绍</li>
</ul>
<h2 id="网络安全相关知识"><a href="#网络安全相关知识" class="headerlink" title="网络安全相关知识"></a>网络安全相关知识</h2><p>Web Security Knowledge</p>
<ul>
<li><ol>
<li>HTTPS 原理和使用</li>
</ol>
</li>
<li>你连HTTPS原理都不懂：<a href="https://www.bilibili.com/video/BV1Up4y1i7PG">https://www.bilibili.com/video/BV1Up4y1i7PG</a></li>
<li><ol start="2">
<li>CORS 跨域请求和安全知识</li>
</ol>
</li>
<li>什么是CORS：<a href="https://www.bilibili.com/video/BV1Kt411E76z">https://www.bilibili.com/video/BV1Kt411E76z</a></li>
<li><ol start="3">
<li>内容安全策略</li>
</ol>
</li>
<li>网络渗透：<a href="https://www.bilibili.com/video/BV1kh411W7Vv">https://www.bilibili.com/video/BV1kh411W7Vv</a></li>
<li><ol start="4">
<li>OWASP 安全风险知识</li>
</ol>
</li>
<li>OWASP  TOP10：<a href="https://www.bilibili.com/video/BV1ey4y1V7Jj">https://www.bilibili.com/video/BV1ey4y1V7Jj</a></li>
</ul>
<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><p>Package Managers</p>
<ul>
<li><ol>
<li>npm</li>
</ol>
</li>
<li>包管理工具：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li>
<li><ol start="2">
<li>yarn</li>
</ol>
</li>
<li>Yarn入门：<a href="https://www.imooc.com/learn/766">https://www.imooc.com/learn/766</a>  (B站没有，推荐这个免费)</li>
</ul>
<h2 id="CSS-预处理-语言"><a href="#CSS-预处理-语言" class="headerlink" title="CSS 预处理 语言"></a>CSS 预处理 语言</h2><p>CSS Preprocessors</p>
<ul>
<li><ol>
<li>Sass</li>
</ol>
</li>
<li>SCSS从入门到实战：<a href="https://www.bilibili.com/video/BV1Zg4y1v75U">https://www.bilibili.com/video/BV1Zg4y1v75U</a></li>
<li><ol start="2">
<li>PostCSS</li>
</ol>
</li>
<li>B站没太好的视频，建议买书《深入PostCSS Web设计》</li>
<li><ol start="3">
<li>Less</li>
</ol>
</li>
<li>前端less教程：<a href="https://www.bilibili.com/video/BV1YW411T7vd">https://www.bilibili.com/video/BV1YW411T7vd</a></li>
</ul>
<h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><p>Build Tools</p>
<ul>
<li><ol>
<li>任务执行命令<br>[Task Runners]</li>
</ol>
</li>
</ul>
<ul>
<li>npm scripts</li>
<li>npm包管理应用：<a href="https://www.bilibili.com/video/BV1Dv411W7XP">https://www.bilibili.com/video/BV1Dv411W7XP</a></li>
<li>Gulp</li>
<li>Gulp入门：<a href="https://www.bilibili.com/video/BV1yA411s72G">https://www.bilibili.com/video/BV1yA411s72G</a></li>
</ul>
<ul>
<li><ol start="2">
<li>打包工具</li>
</ol>
</li>
</ul>
<ul>
<li>Webpack</li>
<li>Webpack从入门到精通：<a href="https://www.bilibili.com/video/BV1e7411j7T5">https://www.bilibili.com/video/BV1e7411j7T5</a></li>
<li>Parcel</li>
<li>Parcel初体验：<a href="https://www.bilibili.com/video/BV1Pa4y147Kf">https://www.bilibili.com/video/BV1Pa4y147Kf</a></li>
</ul>
<ul>
<li><ol start="3">
<li>代码格式化工具</li>
</ol>
</li>
</ul>
<ul>
<li>Prettier</li>
<li>Prettier和ESLint使用：<a href="https://www.bilibili.com/video/BV183411r7YK">https://www.bilibili.com/video/BV183411r7YK</a></li>
<li>ESLint</li>
<li>ESLint基础入门：<a href="https://space.bilibili.com/390120104/search/video?keyword=ESLint">https://space.bilibili.com/390120104/search/video?keyword=ESLint</a></li>
</ul>
<h2 id="三大前端框架"><a href="#三大前端框架" class="headerlink" title="三大前端框架"></a>三大前端框架</h2><p>Web Framework</p>
<ul>
<li>React.js</li>
<li>React基础视频：<a href="https://www.bilibili.com/video/BV1g4411i7po">https://www.bilibili.com/video/BV1g4411i7po</a></li>
<li>React全家桶：<a href="https://www.bilibili.com/video/BV1wy4y1D7JT">https://www.bilibili.com/video/BV1wy4y1D7JT</a></li>
<li>React实战博客：<a href="https://www.bilibili.com/video/BV1CJ411377B">https://www.bilibili.com/video/BV1CJ411377B</a></li>
<li>React商城实战：<a href="https://www.bilibili.com/video/BV1i5411c7xp">https://www.bilibili.com/video/BV1i5411c7xp</a></li>
<li>Vue.js</li>
<li>Vue2全家桶：<a href="https://www.jspang.com/detailed?id=57">https://www.jspang.com/detailed?id=57</a></li>
<li>Vue3全家桶：<a href="https://www.jspang.com/detailed?id=67">https://www.jspang.com/detailed?id=67</a></li>
<li>vuejs从入门到精通：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH">https://www.bilibili.com/video/BV1Zy4y1K7SH</a></li>
<li>Angular</li>
<li>Angular基础：<a href="https://www.bilibili.com/video/BV1Wx411R7qt">https://www.bilibili.com/video/BV1Wx411R7qt</a></li>
</ul>
<h2 id="Web-组件化编程"><a href="#Web-组件化编程" class="headerlink" title="Web 组件化编程"></a>Web 组件化编程</h2><p>Web Components</p>
<ul>
<li>HTML Templates</li>
<li>Custom Elements</li>
<li>Shadow DOM</li>
<li>概要: 此部分内容没有找到合适视频</li>
</ul>
<h2 id="CSS-相关框架"><a href="#CSS-相关框架" class="headerlink" title="CSS 相关框架"></a>CSS 相关框架</h2><p>CSS Frameworks</p>
<ul>
<li>BootStrap</li>
<li>一周学会BootStrap：<a href="https://www.bilibili.com/video/BV1Lx411v73k">https://www.bilibili.com/video/BV1Lx411v73k</a></li>
<li>Material UI</li>
<li>Material  UI入门教程：<a href="https://www.bilibili.com/video/BV12J411s75b">https://www.bilibili.com/video/BV12J411s75b</a></li>
<li>Materialize CSS</li>
<li>Materialize CSS Crash Course：<a href="https://www.bilibili.com/video/BV1gx411h7Y5">https://www.bilibili.com/video/BV1gx411h7Y5</a></li>
<li>ReactStrap</li>
</ul>
<h2 id="JavaScript-语法糖"><a href="#JavaScript-语法糖" class="headerlink" title="JavaScript 语法糖"></a>JavaScript 语法糖</h2><p>Type Checkers</p>
<ul>
<li>TypeScript</li>
<li>TypeScript从入门到精通：<a href="https://www.bilibili.com/video/BV1qV41167VD">https://www.bilibili.com/video/BV1qV41167VD</a></li>
<li>Flow</li>
</ul>
<h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><p>Server Side  Rendering （SSR）</p>
<ul>
<li>React.js</li>
</ul>
<ul>
<li>Next.js</li>
<li>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></li>
<li>GatsbyJS</li>
<li>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）</li>
</ul>
<ul>
<li>Vue.js</li>
</ul>
<ul>
<li>Nuxt.js</li>
<li>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a></li>
</ul>
<ul>
<li>Angular</li>
</ul>
<ul>
<li>Universal</li>
</ul>
<h2 id="图形化编程"><a href="#图形化编程" class="headerlink" title="图形化编程"></a>图形化编程</h2><p>GraphQL</p>
<ul>
<li>Cocos Creator</li>
<li>Cocos 图形游戏开发：<a href="https://www.bilibili.com/video/BV1sA411Y7x4">https://www.bilibili.com/video/BV1sA411Y7x4</a></li>
<li>Three.js </li>
<li>Three.js基础教程-英文：<a href="https://www.bilibili.com/video/BV1ks411W78i">https://www.bilibili.com/video/BV1ks411W78i</a></li>
<li>Three.js教程：<a href="https://www.bilibili.com/video/BV1va4y1p7QB">https://www.bilibili.com/video/BV1va4y1p7QB</a></li>
</ul>
<h2 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h2><p>Static Site Generators</p>
<ul>
<li>Next.js</li>
<li>Next.js入门教程：<a href="https://www.bilibili.com/video/BV13441117KK">https://www.bilibili.com/video/BV13441117KK</a></li>
<li>GatsbyJS</li>
<li>GatsbyJS 实战：<a href="https://www.bilibili.com/video/BV1i4411T7AR">https://www.bilibili.com/video/BV1i4411T7AR</a> （英文）</li>
<li>Nuxt.js</li>
<li>Nuxt.js入门：<a href="https://www.bilibili.com/video/BV1Xt41117Kg">https://www.bilibili.com/video/BV1Xt41117Kg</a></li>
<li>Vuepress</li>
<li>Vuepress入门到精通：<a href="https://www.bilibili.com/video/BV1vb411m7NY">https://www.bilibili.com/video/BV1vb411m7NY</a></li>
<li>Hugo</li>
<li>10分钟搭建个人网站：<a href="https://www.bilibili.com/video/BV1x64y117PX">https://www.bilibili.com/video/BV1x64y117PX</a></li>
</ul>
<h2 id="移动App开发"><a href="#移动App开发" class="headerlink" title="移动App开发"></a>移动App开发</h2><p>Mobile Applications</p>
<ul>
<li>React  Native</li>
<li>ReactNatvie基础：<a href="https://www.bilibili.com/video/BV1Eg4y16735">https://www.bilibili.com/video/BV1Eg4y16735</a></li>
<li>ReactNatvie实战：<a href="https://www.bilibili.com/video/BV15K411s75p">https://www.bilibili.com/video/BV15K411s75p</a></li>
<li>UniApp</li>
<li>Uni-App从入门到实战：<a href="https://www.bilibili.com/video/BV1BJ411W7pX">https://www.bilibili.com/video/BV1BJ411W7pX</a></li>
<li>Uni-App美团外卖：<a href="https://www.bilibili.com/video/BV1Zt4y117RR">https://www.bilibili.com/video/BV1Zt4y117RR</a></li>
<li>Flutter</li>
<li>Flutter基础：<a href="https://www.bilibili.com/video/BV15t411U7yf">https://www.bilibili.com/video/BV15t411U7yf</a></li>
<li>Flutter实战：<a href="https://www.bilibili.com/video/BV1kt411B7mu">https://www.bilibili.com/video/BV1kt411B7mu</a></li>
<li>Ionic</li>
<li>Ionic入门：<a href="https://www.bilibili.com/video/BV1Ub41117q5">https://www.bilibili.com/video/BV1Ub41117q5</a></li>
</ul>
<h2 id="桌面应用开发"><a href="#桌面应用开发" class="headerlink" title="桌面应用开发"></a>桌面应用开发</h2><p>Desktop Applications</p>
<ul>
<li>Electron</li>
<li>Electron入门：<a href="https://www.bilibili.com/video/BV1QB4y1F722">https://www.bilibili.com/video/BV1QB4y1F722</a></li>
<li>Electron基础：<a href="https://www.bilibili.com/video/BV177411s7Lt">https://www.bilibili.com/video/BV177411s7Lt</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ES6自学笔记</title>
    <url>/2022/04/07/ES6%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="let关键字"><a href="#let关键字" class="headerlink" title="let关键字"></a>let关键字</h2><h3 id="let的特性"><a href="#let的特性" class="headerlink" title="let的特性"></a>let的特性</h3><p>let用来声明变量，与var的不同之处有：</p>
<ol>
<li><p>var声明变量的时候可以重复声明，后来的会覆盖掉之前声明的，而let声明变量不能重复声明，即不能像下面这样。</p>
<p>好处：防止变量污染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;马铃薯&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;土豆&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>var声明的变量的作用域是全局，而let声明的变量是块级的,在代码块之外是无法使用的</p>
<p>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hh</span><br></pre></td></tr></table></figure>
</li>
<li><p>var有变量提升，而let不存在变量提升</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song);</span><br><span class="line"><span class="keyword">var</span> song = <span class="string">&quot;恋爱循环&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>var 这样并不会报错，而是会输出一个undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song);</span><br><span class="line"><span class="keyword">let</span> song = <span class="string">&quot;恋爱循环&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>let这样会报错，不允许在变量声明之前使用变量</p>
</li>
<li><p>let不影响作用域链（这个还不是很懂，之后再学一下）</p>
</li>
</ol>
<h3 id="let的经典案例"><a href="#let的经典案例" class="headerlink" title="let的经典案例"></a>let的经典案例</h3><p>前一天这里翻过车，不知道为什么，今天看视频的时候老师就讲了，好幸运</p>
<p>需求：点击div的时候，相应的盒子会变成粉色。</p>
<p>老师给的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;div.<span class="property">length</span>;i++)&#123;</span><br><span class="line">     div[i].<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;pink&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>这里用的是this,我当时把this改成了div[i]就不对了。错误原因：因为单击响应函数是异步任务，当点击之后才会执行，而for循环是一开始就执行的，所以在点击的时候i已经自增到4了，div[i]就越界了，所以是undefined。</p>
<p>原因：因为i是用var声明的，是全局变量，每一次for循环都会改变i的值。</p>
<p>改法：将var i &#x3D;0 ;改成let i &#x3D; 0;让他的作用域只在块中有用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;div.<span class="property">length</span>;i++)&#123;</span><br><span class="line">     div[i].<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         div[i].<span class="property">style</span>.<span class="property">background</span>=<span class="string">&quot;pink&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h2><p>const声明的是常量，他的值不能修改。</p>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul>
<li>声明的时候一定要初始化</li>
<li>声明常量时一般用大写</li>
<li>他的作用域时块级作用域</li>
</ul>
<h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><p>解构赋值是指：按照一定模式从数组和对象中提取你所需要的值，赋值给你重新创建的变量。</p>
<h3 id="从数组中解构"><a href="#从数组中解构" class="headerlink" title="从数组中解构"></a>从数组中解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">F3</span> = [<span class="string">&#x27;甄嬛&#x27;</span>, <span class="string">&#x27;沈眉庄&#x27;</span>, <span class="string">&#x27;安陵容&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [zhen, shen, an] = <span class="variable constant_">F3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhen);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(shen);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(an);</span><br></pre></td></tr></table></figure>

<h3 id="从对象中解构"><a href="#从对象中解构" class="headerlink" title="从对象中解构"></a>从对象中解构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">19</span>,</span><br><span class="line">    <span class="attr">xiaopin</span>: <span class="string">&quot;你好&quot;</span>,</span><br><span class="line">    <span class="attr">yanchu</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我会演小品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; a, xiaopin, yanchu &#125; = obj;</span><br><span class="line"><span class="title function_">yanchu</span>();</span><br><span class="line"><span class="comment">//如果这想j也可以这么写</span></span><br><span class="line"><span class="keyword">let</span>&#123;yanchu&#125;=obj;</span><br><span class="line"><span class="title function_">yanchu</span>();</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>注意这里承接对象里的值的新建变量必须和对象里的命名相同，要不会报错</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>碎碎念</title>
    <url>/2022/04/09/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
    <content><![CDATA[<p>自学了两个月的前端，这几天感觉有点无聊了，暂退一段时间，慢慢沉淀一下</p>
]]></content>
  </entry>
</search>
