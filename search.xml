<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS学习笔记（自用）</title>
    <url>/2022/03/05/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<p>小白自学的时候做的笔记，以供之后回来查阅，估计会有很多表述不准确甚至出错的地方，随着学习的加深会慢慢修正补充知识的。</p>
<p>​                                                     ——2022.03.05</p>
<h2 id="JS的常用书写方式"><a href="#JS的常用书写方式" class="headerlink" title="JS的常用书写方式"></a>JS的常用书写方式</h2><ol>
<li><h3 id="内嵌式"><a href="#内嵌式" class="headerlink" title="内嵌式"></a>内嵌式</h3><ul>
<li><p>在HTML的<code>&lt;body&gt;</code>标签中放入<code>&lt;script type=&quot;text/javascipt&quot;&gt; &lt;/script&gt;</code>标签对中，并在<code>&lt;script&gt;</code>标签对里书写代码</p>
</li>
<li><p>如果要将JS代码写在<code>&lt;head&gt;</code>中，就需要用window.onload&#x3D;function(){  }包裹起来</p>
</li>
</ul>
</li>
<li><h3 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h3><p>在HTML的<code>&lt;body&gt;</code>标签中放入<code>&lt;script src=&quot;相对路径&quot;&gt;&lt;/script&gt;</code></p>
</li>
</ol>
<h2 id="JS输出语句"><a href="#JS输出语句" class="headerlink" title="JS输出语句"></a>JS输出语句</h2><ol>
<li>弹窗输出 <code>alert();</code> 弹窗处alert中的内容</li>
<li>弹窗确认 <code>confirm(); </code> 弹窗出confirm中的内容，弹窗上有“确认”和“取消”两个按钮</li>
<li>网页内容区输出：<code>document.write()</code>  直接输出在网页页面上</li>
<li>控制台输出：<code>console.log()</code> 输出在控制台</li>
</ol>
<h2 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h2><ul>
<li>基本数据类型（参数赋值的时候，传数值） ：String字符串，Number数值，Brglnt大型数值，Boolean布尔值，Null空值，Undefined 未定义，Symbol</li>
<li>引用数据类型（参数赋值的时候，传地址）：Object对象（只有这一种）</li>
</ul>
<h2 id="JS的字符串拼接"><a href="#JS的字符串拼接" class="headerlink" title="JS的字符串拼接"></a>JS的字符串拼接</h2><p>JS中字符串可以拼接，用“+”就可以拼接，</p>
<h3 id="拼接语法："><a href="#拼接语法：" class="headerlink" title="拼接语法："></a>拼接语法：</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">字符串 + 任意数据类型 = 拼接后的新字符串；</span><br></pre></td></tr></table></figure>

<h3 id="拼接规则："><a href="#拼接规则：" class="headerlink" title="拼接规则："></a>拼接规则：</h3><p>拼接前，会把与字符串相加的数据类型转化为字符串，然后再拼接成一个新的字符串。</p>
<h3 id="代码举例："><a href="#代码举例：" class="headerlink" title="代码举例："></a>代码举例：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">											   输出结果</span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;长安&quot;</span>+<span class="string">&quot;归故里&quot;</span>;  <span class="comment">//字符串+字符串类型    长安归故里</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;长安&quot;</span>+<span class="number">666</span>;  <span class="comment">//字符串+数值类型          长安666           </span></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&quot;长安&quot;</span>+<span class="literal">true</span>; <span class="comment">//字符串+布尔类型          长安true</span></span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">&quot;长安&quot;</span>+<span class="literal">null</span>; <span class="comment">//字符串+空类型            长安null</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;芷若&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> str5 = <span class="string">&quot;长安&quot;</span>+obj;  <span class="comment">//字符串+object类型     长安[object Object] </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是一种复合的数据类型，在对象中可以保存多个不同的数据类型的属性</p>
<h3 id="对象的分类"><a href="#对象的分类" class="headerlink" title="对象的分类"></a>对象的分类</h3><ol>
<li><p>内置对象：<br>由ES标准中定义的对象，比如：Object、Math、Date、Function等。</p>
</li>
<li><p>宿主对象：</p>
<p>由JS的运行环境（浏览器）提供的对象，比如：BOM，DOM</p>
</li>
<li><p>自定义对象：</p>
<p>由开发人员自己创建出来的对象</p>
</li>
</ol>
<p>注意：通过new关键字创建出来的对象实例，都是对象类型</p>
<h3 id="对象的创建方法"><a href="#对象的创建方法" class="headerlink" title="对象的创建方法"></a>对象的创建方法</h3><ol>
<li><p>使用<strong>内置</strong>的构造函数创建对象（工厂模式）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">student.<span class="property">name</span> = <span class="string">&quot;芷若&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>弊端：使用的构造函数都是Object，所以创建的对象都是Object这个类型，导致无法区分多种不同类型的对象</p>
</li>
<li><p>使用对象字面量创建对象</p>
<p>字面量：为变量赋值时的常数量</p>
<p>对象字面量：封闭在花括号对{}中的对象的零个或多个“属性名：值”的列表。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多个“属性名：值”</span></span><br><span class="line"><span class="keyword">var</span> student =&#123;</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;芷若&quot;</span>;</span><br><span class="line">      <span class="attr">age</span>:<span class="number">19</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//零个</span></span><br><span class="line"><span class="keyword">var</span> student = &#123;&#125;;</span><br></pre></td></tr></table></figure>


</li>
<li><p>利用构造函数创建对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先自己创建一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sing</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再用自建的构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;双笙&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;林俊杰&quot;</span>,<span class="number">20</span>);</span><br><span class="line">person1.<span class="title function_">sing</span>(); </span><br><span class="line">person2.<span class="title function_">sing</span>();</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="对象的赋值和修改"><a href="#对象的赋值和修改" class="headerlink" title="对象的赋值和修改"></a>对象的赋值和修改</h3><ul>
<li>这是基本数据类型：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name1 = <span class="string">&quot;长安&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> name2 = name1;</span><br><span class="line">name2 = <span class="string">&quot;故里&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1); <span class="comment">//输出结果：长安</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name2); <span class="comment">//输出结果：故里</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这是object类型（对象）：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj1.<span class="property">name</span>=<span class="string">&quot;长安&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.<span class="property">name</span> = <span class="string">&quot;故里&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1); <span class="comment">//输出结果：故里</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name2); <span class="comment">//输出结果：故里</span></span><br></pre></td></tr></table></figure>

<p>object类型赋值后竟然会改变本体。这里的object就相当于C语言中的一个指针指向的内容，而将obj1赋值给obj2就相当于让obj2也指向了这块内容，所以修改obj2所指向的内容后，自然也就修改了obj1</p>
<p>JS中的对象和C++中的对象相似之处：</p>
<ol>
<li><p>作用都是封装信息，比如一个student类中可以封装学生的姓名，年龄。成绩</p>
</li>
<li><p>C++中的对象有成员函数和成员变量。JS中的对象也是如此，不过叫的是特征（属性）和行为（方法）</p>
</li>
</ol>
<h4 id="获取对象中的属性："><a href="#获取对象中的属性：" class="headerlink" title="获取对象中的属性："></a>获取对象中的属性：</h4><p><strong>方式1</strong>：<code>对象.属性名</code></p>
<h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><h3 id="三个基本包装类："><a href="#三个基本包装类：" class="headerlink" title="三个基本包装类："></a>三个基本包装类：</h3><ul>
<li><p>String():将基本数据类型的字符串，转换为String对象</p>
</li>
<li><p>Number():将基本数据类型的数字，转化为Number对象</p>
</li>
<li><p>Boolean():将基本数据类型的布尔值，转化为Boolean对象</p>
</li>
</ul>
<h3 id="转换方法："><a href="#转换方法：" class="headerlink" title="转换方法："></a>转换方法：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;qianguyihao&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;qianguyihao&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>str2，num, bool的类型都是object</p>
<p>将基本数据类型转化为对象后，就可以绑定属性和方法了</p>
<h3 id="String-对象常用方法"><a href="#String-对象常用方法" class="headerlink" title="String()对象常用方法"></a>String()对象常用方法</h3><ol>
<li><p>indexOf()&#x2F;lastIndexOf():获取字符串中指定内容（字符或字符串）的索引</p>
<ul>
<li><p>语法一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">索引值 = str.<span class="title function_">indexOf</span>(查询的字符或者字符串)</span><br></pre></td></tr></table></figure>

<p>indexOf() 是从前向后查找，lastIndexOf()是从后向前查找，如果找到了，返回第一次出现的索引，如果没有找到，返回-1</p>
</li>
<li><p>语法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">索引值 = str.indexOf(查询的字符串，起始的下标位置)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>charAt(index)获取指定位置的字符</p>
<p>str.charAt(index)和str[index]等价</p>
</li>
</ol>
<h3 id="Number-对象常用方法"><a href="#Number-对象常用方法" class="headerlink" title="Number()对象常用方法"></a>Number()对象常用方法</h3><ol>
<li><p>Number.isInteger()判断是否为整数</p>
<p>语法：<code>布尔值 = Number。isInteger(数字);</code></p>
</li>
<li><p>toFixed()小数点后面保留几位</p>
<p>语法：<code>字符串 = myNum.toFixed(num);</code></p>
<p>解释：将对象myNum的小数点后面保留num位小数（四舍五入），不会改变原数字，返回的是字符串</p>
</li>
</ol>
<h3 id="Math-对象的方法"><a href="#Math-对象的方法" class="headerlink" title="Math()对象的方法"></a>Math()对象的方法</h3><p><strong>注意：调用Math对象的方法时，不需要创建对象，即不需要通过new来调用，直接使用即可</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = -<span class="number">0.6</span>;</span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(num));        <span class="comment">//取绝对值</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(num));      <span class="comment">//向下取整，向小取</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(num));       <span class="comment">//向上取整，向大取</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(num));      <span class="comment">//四舍五入取整（正数四舍五入，负数五舍六入）</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>());        <span class="comment">//生成0-1之间的随机数</span></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组中可以存放<strong>任意对象</strong>的数据，比如：字符串，数字，布尔值，甚至是对象</p>
<h3 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h3><ol>
<li><p>和C语言一样的创建方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = []; <span class="comment">//创建一个空的数组</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">//创建并初始化数组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>特有：用构造函数创建数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = =<span class="keyword">new</span> <span class="title class_">Arrat</span>(参数);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果参数为空，则表示创建一个空数组，如果参数是一个数值，表示创建的数组的长度，如果有多个参数，表示数组中的元素</p>
</li>
<li><p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">// 参数为空</span></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">4</span>); <span class="comment">// 参数为一个数值</span></span><br><span class="line"><span class="keyword">var</span> arr4 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>); <span class="comment">// 参数为多个数值</span></span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr2 = [];</span><br><span class="line">arr3 = [<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>];</span><br><span class="line">arr4 = [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>];</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>函数也是一个对象</li>
<li>使用typeof 检查一个函数对象时，会返回一个function</li>
</ul>
<h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><ol>
<li><p>利用函数关键字自定义函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数明(形参<span class="number">1</span>，形参<span class="number">2.</span>..形参n)&#123;</span><br><span class="line">    语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>利用函数表达式（匿名函数）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">function</span>(<span class="params">形参<span class="number">1</span>，形参<span class="number">2</span>,...形参n</span>)&#123;</span><br><span class="line">     语句;</span><br><span class="line">&#125;; <span class="comment">//注意这里有个分号，表示赋值语句结束</span></span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun2 = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是匿名函数中的代码&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里调用的时候有两种等价的写法</span></span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line"><span class="keyword">var</span> v = <span class="keyword">new</span> <span class="title class_">Vehicle</span>; <span class="comment">//不推荐这样写</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>fun2是变量名，不是函数名</li>
<li>函数表达式实际就是将匿名函数赋值给一个变量</li>
</ul>
</li>
</ol>
<h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><ol>
<li><p>普通函数的调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数名.call();</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是函数体里面的内容1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是函数体里面的内容2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>(); <span class="comment">// 调用函数</span></span><br><span class="line"></span><br><span class="line">fn2.<span class="title function_">call</span>(); <span class="comment">// 调用函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过对象的方式调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个类</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;圣米歇尔山&quot;</span>, <span class="comment">//注意这里是逗号</span></span><br><span class="line">  <span class="attr">draw</span>: <span class="keyword">function</span>&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;圣米歇尔山在哪里捏？&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用对象的函数</span></span><br><span class="line">obj.<span class="title function_">draw</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>立即执行函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;为什么立即执行函数这么多括号？！！&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">&#125;)(<span class="number">123</span>, <span class="number">456</span>);</span><br></pre></td></tr></table></figure>

<p>注意：立即执行函数在定义之后就会自动调用，这种函数通常只执行一次，因为没有变量保存它，执行完就找不到了（昙花一现）</p>
</li>
<li><p>用构造函数来调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, gender, hobby</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hobby</span> = hobby;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;basketball&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;dancing&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>构造函数：专门来生成对象的函数，它提供模板，描述对象的基本结构，一个构造函数可以通过new来生成多个对象，这些对象都有相同的结构。</p>
</li>
<li><p>绑定事件函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//2.绑定事件</span></span></span><br><span class="line"><span class="language-javascript">            btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击按钮后，弹出了我&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给点击这个操作绑定了事件（弹窗）</p>
</li>
</ol>
<h3 id="函数的传参"><a href="#函数的传参" class="headerlink" title="函数的传参"></a>函数的传参</h3><p>JS允许传入任意个参数而不影响调用，因此，传入的参数比定义的参数多没有问题（即使函数内部不需要这些参数），传入的参数比定义的少也没有问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">abs</span>(<span class="number">19</span>,<span class="string">&#x27;nalabala&#x27;</span>); <span class="comment">//返回19</span></span><br><span class="line"><span class="title function_">abs</span>(-<span class="number">9</span>,<span class="string">&#x27;haha&#x27;</span>,<span class="string">&#x27;hehe&#x27;</span>,<span class="literal">null</span>); <span class="comment">//返回9</span></span><br><span class="line"><span class="title function_">abs</span>();  <span class="comment">//返回NaN</span></span><br></pre></td></tr></table></figure>



<h3 id="调用函数和获取函数的区别"><a href="#调用函数和获取函数的区别" class="headerlink" title="调用函数和获取函数的区别"></a>调用函数和获取函数的区别</h3><p>获取方法与调用方法</p>
<p>C语言中只能调用方法，不能获取方法，而JS可以，如下例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;smyhvae&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sayName</span>);  <span class="comment">//没加括号，就是获取方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">sayName</span>());  <span class="comment">//加了括号，就是调用方法。即：执行函数内容，并执行函数体的内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code> console.log(obj.sayName);</code>执行结果：  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ƒ () &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;smyhvae&#x27;</span>);     <span class="comment">//直接把方法整s</span></span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p><code>console.log(obj.sayName()); </code>执行结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">smyhvae <span class="comment">//首先调用函数，执行函数内容</span></span><br><span class="line"><span class="literal">undefined</span>   <span class="comment">//又因为该方法没有返回值，所以输出undefined</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li><code>fun()</code>：调用函数。调用之后，还获取了函数的返回值</li>
<li><code>fun</code>：获取函数。相当于直接获取了整个函数对象</li>
</ul>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p><strong>构造函数</strong>主要用来初始化对象，即为对象成员赋初值，总是与new一起使用，在ES6之前由于没有<strong>类</strong>的概念，所以常把对象的一些公共属性和方法抽取出来。然后封装到构造函数中。</p>
<h4 id="构造函数和普通函数"><a href="#构造函数和普通函数" class="headerlink" title="构造函数和普通函数"></a>构造函数和普通函数</h4><ol>
<li>构造函数的创建方法和普通函数没有区别，都是<code>function 函数名()&#123;  &#125;</code>，不同的是构造函数习惯首字母大写</li>
<li>两者的调用方式不同。普通函数直接调用，而构造函数需要用new关键字来调用</li>
<li>二者this的指向不同。普通函数调用时，如果普通调用，this指向的是window，如果以方法的形式调用，this是调用方法的那个对象。 当以构造函数的形式调用时，this是新创建的实例化对象</li>
<li>返回值：普通函数可以有返回值，也可以没有返回值，但是构造函数没有返回值（不用写return），“new一个构造函数的流程” 会解释为什么不需要返回值</li>
</ol>
<h4 id="书写规范："><a href="#书写规范：" class="headerlink" title="书写规范："></a>书写规范：</h4><ol>
<li><p>使用构造函数创建某一类对象的时候，<strong>首字母要大写</strong>（与普通函数区别开）</p>
</li>
<li><p>构造函数内部使用了<strong>this</strong>关键字，代表了要生成的对象实例</p>
</li>
<li><p>构造函数生成对象的时候，必须要用new指令</p>
<p>举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先自己创建一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sing</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再用自建的构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;双笙&quot;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;林俊杰&quot;</span>,<span class="number">20</span>);</span><br><span class="line">person1.<span class="title function_">sing</span>(); </span><br><span class="line">person2.<span class="title function_">sing</span>();</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="New一个构造函数的流程"><a href="#New一个构造函数的流程" class="headerlink" title="New一个构造函数的流程"></a>New一个构造函数的流程</h4><ol>
<li>开辟内存空间，在内存中创建新的空对象</li>
<li>让this指向这个新的空对象</li>
<li>执行构造函数里的代码，为这个新对象添加属性和方法</li>
<li>返回这个新对象（所以构造函数里面不需要return）</li>
</ol>
<h4 id="实例成员和动态成员"><a href="#实例成员和动态成员" class="headerlink" title="实例成员和动态成员"></a>实例成员和动态成员</h4><p><strong>成员</strong>:成员包括构造函数中的属性和方法</p>
<p>JS的构造函数中可以添加一些成员。添加方法有两种：①在构造函数本身上添加②在构造函数内部的this上添加</p>
<p><strong>实例成员</strong>：构造函数中用this添加的成员，实例成员只能通过实例化对象来访问。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用this来添加实例成员，下面的name,age,sing都是实例成员</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sing</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例成员只能通过实例化对象访问</span></span><br><span class="line"><span class="comment">//正确访问方法：</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;双笙&quot;</span>,<span class="number">18</span>);</span><br><span class="line">person1.<span class="title function_">sing</span>(); </span><br><span class="line"><span class="comment">//错误访问方法（不可以通过构造函数来访问实例成员）</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="title function_">sing</span>();</span><br></pre></td></tr></table></figure>

<p><strong>静态成员</strong>：在构造函数本身上面添加的成员，只能通过构造函数来访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;双笙&quot;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在构造函数本身上面添加成员</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property">sex</span> = <span class="string">&quot;女&quot;</span>;</span><br><span class="line"><span class="comment">//正确访问方法：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property">sex</span>);</span><br><span class="line"><span class="comment">//错误访问方法：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">sex</span>);</span><br></pre></td></tr></table></figure>

<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>概念：一个函数A作为另一个函数B的： 1.参数 2.返回值时，我们称函数B为高阶函数。简单来说，高阶函数是 <strong>对其他函数进行操作</strong> 的函数</p>
<p><strong>类型1</strong>：把其他函数作为参数（这个例子我现在还不太理解）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">    callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn1</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是最后执行的函数&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>试着理解一下吧：</p>
<ol>
<li><code>callback &amp;&amp; callback();</code></li>
</ol>
<ul>
<li><p>callback是回调的意思（call back,回我电话），指当执行栈中的同步任务执行完毕后再执行回调的内容</p>
</li>
<li><p>callback也可以作为函数A的形参，所对应的实参一般是另一个函数B。即执行完了函数A的所有同步任务之后，会执行函数B</p>
</li>
<li><p>callback &amp;&amp; callback();要理解这句话，首先要理解&amp;&amp;逻辑与，先执行左边，如果左边为真，就会执行右边，如果左边为假，就不执行右边。所以A&amp;&amp;B就等价为<code>if(A) &#123;  B &#125;</code> ，因此<code>callback&amp;&amp;callback.call()</code> 就是 <code>if(callback) callback.call()</code>，即如果调用的时候传入了callback所对应的实参，就执行回调函数这个操作，如果没有传入所对应的参数（JS中函数的参数可以缺省），就不执行回调函数这个操作。</p>
</li>
</ul>
<ol start="2">
<li></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fn1</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是最后执行的函数&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>   虽然很优雅的写法，但我第一眼没看出来这是干啥的…..，写成下面这个形式好理解一些<br><code>fn1(10, 20,   function () &#123;console.log(&#39;我是最后执行的函数&#39;);&#125;  );</code><br>   这其实是fn1函数的调用，第三个参数是一个函数，它是作为callback的实参传过去的。</p>
<ol start="3">
<li><p>执行步骤</p>
<p>调用函数，先执行 fn1中的内容：<code>console.log(a + b);</code>，执行完毕后执行回调函数中的内容： <code>console.log(&#39;我是最后执行的函数&#39;);</code></p>
</li>
</ol>
<p><strong>类型二</strong>：把函数作为返回值（常结合闭包）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">//将函数作为返回值返回</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = <span class="title function_">fn1</span>(); <span class="comment">// 执行 fn1() 之后，会得到一个返回值。这个返回值是函数</span></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure>



<h2 id="作用域："><a href="#作用域：" class="headerlink" title="作用域："></a>作用域：</h2><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><p>全局作用域和局部作用域</p>
<h3 id="访问关系："><a href="#访问关系：" class="headerlink" title="访问关系："></a>访问关系：</h3><ul>
<li>内部作用域可以访问到外部作用域的变量，但在外部作用域无法访问到内部作用域的变量</li>
<li>如果局部作用域和全局作用域的变量重名的话，在局部修改局部作用域的变量的值并不会改变全局作用域的变量的值。</li>
<li>JS的函数在查找变量时从自身函数定义开始，由”内“向”外“查找。如果内部函数定义了域外部函数重名的变量。则内部函数的变量将”屏蔽“外部函数的变量</li>
</ul>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p><strong>概念</strong>：指有权访问另一个函数作用域中变量的<strong>函数</strong>。 (closure)</p>
<p>由上面的定义我们知道，闭包是一种函数，如果A函数访问到了B函数内的变量，那么称函数B为闭包函数</p>
<h3 id="常规情况下："><a href="#常规情况下：" class="headerlink" title="常规情况下："></a>常规情况下：</h3><ul>
<li>函数内部可以访问全局变量和局部变量</li>
<li>函数外部只能访问全局变量，不能访问局部变量</li>
<li>当函数执行完毕后，本作用域内的局部变量会被销毁</li>
</ul>
<p>比如下面这样的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//打印报错：Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>

<p>原因：a是函数内的局部变量，外部无法访问。当调用完foo函数之后，a变量已经被销毁了，所以a无法访问。</p>
<h3 id="闭包函数中："><a href="#闭包函数中：" class="headerlink" title="闭包函数中："></a>闭包函数中：</h3><p>我靠，从这个例子我才发现原来JS中函数可以嵌套定义？！！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//在</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<p> 上面这个例子也可以这么写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">20</span>;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">     &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="title function_">fn1</span>();  <span class="comment">//fn1的返回值是一个函数</span></span><br><span class="line"><span class="title function_">foo</span>(); <span class="comment">//调用foo</span></span><br></pre></td></tr></table></figure>

<p> 输出结果：10</p>
<ul>
<li>函数fn2只能在fn1中调用，如果在fn1外面调用，将会报错</li>
<li>如果嵌套的内层函数使用了外层函数的变量或参数，即fn2中使用了fn1中的变量a，这个嵌套函数就形成了一个闭包，将fn1成为闭包函数</li>
<li>闭包能在它fn1执行完之后仍然能够访问fn1里的变量和参数</li>
</ul>
<h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><p>在上面那个例子中，本来fn1执行完毕后，它里面的变量a会立即销毁，但此时由于产生了闭包，fn1中的变量不会立即销毁，因为fn2函数还要继续调用变量a。</p>
<p>并且，在全局中通过foo()承接fn1的返回值,达到了在全局作用域中也可以访问局部作用域中的变量a</p>
<p>可见，<strong>闭包延伸了变量的作用范围</strong></p>
<h2 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h2><p>this的指向会根据函数调用方式的不同而改变。</p>
<ol>
<li><strong>普通函数，立即执行函数</strong>调用时，this的指向时window（全局）</li>
<li><strong>以方法的形式</strong>调用时，this指向调用方法的那个对象</li>
<li>以<strong>构造函数</strong>的形式调用时，this指向new出来的对象</li>
<li>以<strong>事件绑定函数</strong>的形式调用时，this指向绑定事件的对象</li>
<li>用<strong>call和apply</strong>调用时，this指向指定的那个对象</li>
</ol>
<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><h3 id="JS是单线程"><a href="#JS是单线程" class="headerlink" title="JS是单线程"></a>JS是单线程</h3><p>即同一个时间只能做一件事，比如某个DOM元素进行添加和删除的操作时，不能同时进行，应该先添加，之后再删除。</p>
<p>单线程意味着，所有任务都需要排队，即前一个任务结束，才会执行后一个任务，这样导致的问题是：JS执行的时间过长，页面渲染加载会有阻塞</p>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>知乎上一篇文章讲的很好，附上链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/326902537">10张图理解回调函数</a></p>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>前一个任务结束后再执行后一个任务，程序的执行顺序和任务的排列顺序是一致的。比如做饭的同步做法：烧水煮饭（10分钟之后），再去切菜，炒菜。</p>
<h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>在做这件事情同时，还可以去处理其他事情。比如做饭的异步做法：在烧水的同时，利用这10分钟，去切菜，炒菜。</p>
<p>比如下列代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果：1   2   3</p>
<p>因为 等待函数要等待2秒钟才执行，所以会先执行console.log(2);</p>
<p>可是如果把时间换成0，即：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果依旧是： 1 2 3，为了解决这个问题，我们需要了解</p>
<h3 id="JS的执行机制"><a href="#JS的执行机制" class="headerlink" title="JS的执行机制"></a>JS的执行机制</h3><ol>
<li>先执行执行栈中的同步任务</li>
<li>如果遇到异步任务，将其放入任务队列中，先不执行</li>
<li>当执行栈中的所有同步任务执行完毕后，系统会根据次序读取任务队列中的异步任务，依次执行</li>
</ol>
<h3 id="同步任务："><a href="#同步任务：" class="headerlink" title="同步任务："></a>同步任务：</h3><p>同步任务都在主线程上执行，形成一个执行线</p>
<h3 id="异步任务："><a href="#异步任务：" class="headerlink" title="异步任务："></a>异步任务：</h3><p>异步任务是指不进入主线程，而进入“任务队列”，只有主线程任务执行完毕后，“任务队列”才开始通知主线程请求执行任务，该任务才会进入主线程执行。</p>
<p>异步任务是通过回调函数实现的。有以下三个种类：</p>
<ol>
<li>普通事件，如onclick,resize等</li>
<li>资源加载，如load，error等</li>
<li>定时器，如setInterval,setTimeout等</li>
</ol>
<h2 id="JS和C语言的不同之处："><a href="#JS和C语言的不同之处：" class="headerlink" title="JS和C语言的不同之处："></a>JS和C语言的不同之处：</h2><ol>
<li><p>JS中声明变量用的是let或者var,它是一种弱类型语言（动态语言），不用声明变量的类型，并且变量的数据类型是可以变化的，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name =<span class="string">&quot;zhiruo&quot;</span>;</span><br><span class="line">name = <span class="number">123</span>; <span class="comment">//这里强制将字符串类型转化为了数值类型</span></span><br></pre></td></tr></table></figure>



<p>并且，JS中变量可以不用声明直接赋值  </p>
</li>
<li><p>JS中没有字符类型，只有字符串类型，并且字符串既可以用双引号引起来，也可以用单引号引起来</p>
</li>
<li><p>JS中字符串的长度用的是<code>str.length;</code>而C++中字符串的长度用的是<code>str.length()</code></p>
</li>
<li><p>+号</p>
</li>
</ol>
<p>在C语言中，+号就是加号，而在JS中”+“有可能是加号（数值相加），也有可能是连字符（字符串拼接），类似C++中的运算符重载。要区分清楚以下几种情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我&quot;</span> + <span class="string">&quot;爱&quot;</span> + <span class="string">&quot;你&quot;</span>);	<span class="comment">//连字符，把三个独立的汉字，连接在一起了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我+爱+你&quot;</span>);			<span class="comment">//原样输出</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>);				<span class="comment">//输出6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>+<span class="string">&#x27;3&#x27;</span>);	</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>-<span class="string">&#x27;3&#x27;</span>);	</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我爱你</span><br><span class="line">我+爱+你</span><br><span class="line">6</span><br><span class="line">53</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>如果加号两边都是Number类型，那么就是数字相加，否则，就是连字符相加</li>
<li>如果符号是减号，除号，乘号，取模运算符，计算机会帮忙进行隐式转换，即5-’3‘的运算结果是2</li>
</ul>
<ol start="5">
<li><p>JS中的函数可以嵌套定义,c语言不可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//fn1中嵌套定义了fn2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用fn2</span></span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>函数fn2只能在fn1中调用，如果在fn1外面调用，将会报错</li>
<li>如果嵌套的内层函数使用了外层函数的变量或参数，即fn2中使用了fn1中的变量a，这个嵌套函数就形成了一个闭包</li>
<li>闭包能在它fn1执行完之后仍然能够访问fn1里的变量和参数</li>
</ul>
</li>
<li><p>JS是<strong>基于对象（object-based）的语言</strong>。 但是，它又不是一种真正的面向对象编程语言，因为它的语法中没有C++中的class（类）（在es6以前）。在C++中，“类”就是对象的模板，对象就是“类”的实例。JS不是基于类的，二十基于构造函数和原型链的。</p>
<p>即：JS使用构造函数来作为对象的模板，构造函数就是专门生成实例对象的函数</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/25/hello-world/</url>
    <content><![CDATA[<p>这里芷若</p>
<p>无论做什么事都喜欢和自己较劲</p>
<p>身处这个快节奏的时代，强烈感觉自己的语言表达水平在不断的退化</p>
<p>趁着寒假有时间 也是学校的一个活动 自己便搭建了这个博客</p>
<p>以后不定期的会更新一些生活小记和学习笔记</p>
<p>欢迎你的到访~</p>
]]></content>
  </entry>
  <entry>
    <title>一些好用的网站</title>
    <url>/2022/02/28/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<ul>
<li><p>可以提高图片分辨率的网站：</p>
<p><a href="https://bigjpg.com/">https://bigjpg.com/</a></p>
</li>
<li><p>超喜欢的练习打字网站（小白的我从练习打字开始）</p>
<p><a href="https://www.typing.com/">https://www.typing.com/</a></p>
</li>
<li><p>网道，简洁舒适的编程教程（阮一峰前辈yyds)：</p>
<p><a href="https://wangdoc.com/">https://wangdoc.com/</a></p>
</li>
<li><p>北大学长整理的CS学习指南：</p>
<p><a href="https://csdiy.wiki/">https://csdiy.wiki/</a></p>
</li>
<li><p>STL超全工具书，方便查询：</p>
<p><a href="https://blog.csdn.net/weixin_45761327/article/details/107561697">https://blog.csdn.net/weixin_45761327/article/details/107561697</a></p>
</li>
<li><p>adobe全家桶（2020年的）：</p>
<p><a href="https://www.yuque.com/books/share/205ec53c-5013-4bdb-ad02-ac96cc761203/nnun78">https://www.yuque.com/books/share/205ec53c-5013-4bdb-ad02-ac96cc761203/nnun78</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>也茫然 还好有勇敢</title>
    <url>/2022/02/26/%E4%B9%9F%E8%8C%AB%E7%84%B6-%E8%BF%98%E5%A5%BD%E6%9C%89%E5%8B%87%E6%95%A2/</url>
    <content><![CDATA[<h3 id="壹"><a href="#壹" class="headerlink" title="壹"></a>壹</h3><p>　　一直都是一个只有三分钟热度的人</p>
<p>　　对所有好玩的事情都投以极大的热情，一刻也等待不了，但一旦细究其实现的方法和难度，便会败下阵来。</p>
<p>　　所以，这个博客的诞生对我来说简直就是一个奇迹。进入计算机专业，有时查找资料时无意访问到别人的博客，心生羡慕，便立即涌现出自己也制作一个的冲动，可自己上手，才发现原来绚丽的页面的搭建，不仅需要学习HTML，CSS，还需要学习JavaScript，命令行操作。</p>
<p>　　在蓝图的孵化器的项目中，趁着寒假的闲暇时间，我才慢慢的学习，搭建了这个博客，并自制了2048小游戏。当完成了之后回望自己的学习历程，不禁感慨万千，故写下这篇小记。　　</p>
<hr>
<h3 id="贰"><a href="#贰" class="headerlink" title="贰"></a>贰</h3><p>　　都说计算机专业是活到老学到老，可在高中都是老师手把手教授，什么做题方法、知识串联，老师都不厌其烦的进行讲解，做这次任务，才明白，我总要学会，自己去面对所有的难。</p>
<p>　　还没有进入大学时，总是想象着，课堂上教授的谈笑风生，一切的知识都是那么新奇而又有趣，可当我步入校园，才发现理论和现实的鸿沟。上课听的云里雾里，作业也不太会做，课后又得自己找教程再次学习，刚开始的时候，我特别不适应这样超负荷的生活，一想到自己捉襟见肘的生活，眼泪就止不住地往下掉（真是个爱哭鬼）。</p>
<p>　　两周下来，我有些开窍。我以前曾无比渴望在受伤难过时、孤独无依时，得到其他人的回应、理解和陪伴。于是一emo就打开聊天框寻求安慰。可朋友能给我一时的安慰和鼓励，但这毕竟都是有限的，大家都有自己的事情要做，怎么能整天麻烦别人。我总要面对没人帮忙、没人支持、没人嘘寒问暖的日子，最终解决问题还是要靠自己。每个人的生活，无论酸甜苦辣，都要自己去品尝。每个人的道路，无论顺遂还是曲折，都要自己去行走。</p>
<p>　　后来，我渐渐找到了平衡的方法，课前要先预习，这样上课就可以跟上老师的步伐，大学，真就是大不了自己学，累的时候就少说闲话、少想乱七八糟的事，困的时候就早睡不熬夜，心里感觉苦了，赶紧拿颗糖塞嘴里。我不断给自己打气说，小周小周冲冲冲。</p>
<p>　　我曾害怕面对一切艰难险阻，直到生活给了我一道道坎，才教会了我如何在挫折和痛苦中一步一步变强。　　</p>
<hr>
<h3 id="叁"><a href="#叁" class="headerlink" title="叁"></a>叁</h3><p>　　蓝图的第一个任务就是部署自己的网页，并自学HTML，CSS，JavaScript制作2048小游戏。前一周，我兴冲冲的打开HTML和CSS的教程，心想：不过如此嘛。可拧巴又好强的我不想只部署一个网站，我想把网站做成博客，把小游戏嵌到里面。可真正到了部署自己的博客的时候才发现，原来很多事情并不是在界面化的界面做的，而是要涉及到那个黑框框样子的命令行，里面复杂的指令和只要随便输错一点点就会乱七八糟弹出来一大堆不认识的英文，真是让我这个从未接触过命令行的小白头大。</p>
<p>　　在网上大海捞针般的搜索云开发和静态网站托管的知识，了解其中的机理和命令行的内容，我坐在电脑前就忘了时间。</p>
<p>　　开始是，出了错误但不知道错哪了，只能删除自己之前已经部署了大部分的网站，推到重来，有放不下的吧，毕竟是自己费了好大功夫才做好的，可如果不重来，依照现在自己这个水平也修不好它呀（有点对不起那些“胎死腹中”的网页哈哈哈）。</p>
<p>　　当时就想起了曾经在书上看到的一个故事：一个人上火车时不小心掉了一只新鞋，等火车开动了他才发现。这时，他毫不犹豫地把另一只鞋也从窗口扔了出去。其他乘客很不理解，他解释说，那双鞋不论多么昂贵，对他而言都已经失去作用了，而捡到这双鞋的人就不同了。所以，与其留一只对自己无用的鞋，倒不如选择放弃，或许会成全另一个人呢？</p>
<p>　　一次次的推倒重来，在不断的试错中，我的内心独白常常是：</p>
<p>　　“怎么又错了！这次又是哪里不对”</p>
<p>　　“为什么我本地预览出来都在好着呢，推送到终端就不行了”</p>
<p>　　”原来我找了二十分钟的错误是冒号后少了一个空格 ！“</p>
<p>　　可渐渐的，我的命令敲得越来越顺了，我的操作也越来越熟悉了，面对错误，我可以不用推到重来（因为我已经能大概看懂命令行的提示了），甚至英语都有所进步（命令行里都是英文，教程也好多都是英文）。</p>
<p>　　原来啊，只要努力坚持下去，真的有可能看到光明。</p>
<p>　　原来啊，如果我只想看到结果再出发，那我将永远不会知道结果在哪儿。</p>
<hr>
<h3 id="肆"><a href="#肆" class="headerlink" title="肆"></a><br>肆</h3><p>　　又又又坐在电脑前捣鼓了一下午，乱七八糟的命令行错误真是让人头大，搭建一个网站真的对我这种小白真的太不容易了。回忆下来，这两周我竟然捣鼓了这么多东西，先在云开发中先搭建了个博客，又因为不好访问把把博客迁移到了GitHub，顺便学会了搭梯子（感谢lyx的北大梯子🙆‍♀️），但因为GitHub网页每次更新不及时，我又买服务器，买域名，给域名备案，给服务器备案，申请SSL证书，买COS资源包，部署SSL证书，在云服务器用Linux命令行指示。这一路对我来说很艰难，虽然不属于算法题那种烧脑类型的，但里面涉及到的全都是我从未涉足的知识，终于终于，终于部署完成了！真的整个人都瘫在沙发上。天生拧巴的人终于和自己硬刚了一次。</p>
<p>　　最后，以一句我很喜欢的话结尾吧。</p>
<blockquote>
<p>我与我周旋久，宁作我。</p>
</blockquote>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>不期而遇的温暖</title>
    <url>/2022/02/28/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
    <content><![CDATA[<blockquote>
<p>人间的温情跨越无数岁月和命运的阴霾，将记忆烘烤得蓬松而馨香</p>
</blockquote>
<h3 id="2022-03-05"><a href="#2022-03-05" class="headerlink" title="2022-03-05"></a>2022-03-05</h3><p>　　最近发现几首很喜欢的韩文歌，浅吟低唱，很好听</p>
<p>　<strong>Leavin’ tomorrow</strong>　 </p>
<blockquote>
<p> 네게서 힘겨워하던나    谢谢你昨天晚上来梦里看我  </p>
</blockquote>
<p>​    男女和声的那一段真是灵魂撞击</p>
<p>　<strong>우리만의 시간</strong></p>
<blockquote>
<p>带点忧郁，白天听，晚上听会睡不着的</p>
</blockquote>
<p>　<strong>우르릉 쾅쾅쾅</strong></p>
<blockquote>
<p>为什么房子塌了也可以这么好听？！！</p>
</blockquote>
<p>　　今天在读GitHub的一个教程的时候发现一个小错误，给作者交了issue，觉得这么浩大的工程自己能帮一点忙，开心🤞</p>
<h3 id="2022-03-03"><a href="#2022-03-03" class="headerlink" title="2022-03-03"></a>2022-03-03</h3><p>　　今天终于搭建完毕网站，一些小美好正井然有序的发生着，不是吗？</p>
<h3 id="2022-03-02"><a href="#2022-03-02" class="headerlink" title="2022-03-02"></a>2022-03-02</h3><p>　　时隔两个月，宋浩老师我又来了，为什么你讲课这么有趣，这么搞笑啊，真是倍感亲切。</p>
<p>　　空降成功，感谢指挥部！🙆‍♀️</p>
<h3 id="2022-02-28"><a href="#2022-02-28" class="headerlink" title="2022-02-28"></a>2022-02-28</h3><p>　　今天去健身房骑完动感单车后去洗澡，浴室人很多，已经没有位置了，我这个社恐🙃尴尬的站在一旁等待，与之对比的是阿姨们自来熟的走进来，随便借个有人的位置就开始洗。</p>
<p>　　这时突然一个带着小女孩洗澡的阿姨向我招了招手，“小姑娘，到这里来先冲着”，哇，心里顿时暖暖的。</p>
<p>　　“给小姐姐让一下噢，先让她洗”。旁边的小女孩奶声奶气的说好，向我投来一个灿烂的微笑。我也回以灿烂的微笑。</p>
<p>　　洗了几分钟，旁边有人洗完了，阿姨眼疾手快，赶紧说：”小姑娘，这个人洗完了，快来！”。在这几分钟内，只是简单的几句话，却记在我心间，暖意涌上心头（这可能是社恐才能理解的哈哈哈）</p>
<p>　　《小王子》中写道：”星星发光是为了让每一个人有一天都能找到属于自己的星星。“</p>
<p>　　原来，我也在这个平常的夜晚，不经意的与温暖撞了个满怀啊🙆‍♀️</p>
<h3 id="2022-02-27"><a href="#2022-02-27" class="headerlink" title="2022-02-27"></a>2022-02-27</h3><p>　　香水小样到家了，是奶香味的，洗完澡轻喷在耳朵后，将自己埋在被窝里，仿佛整个人都被奶香包围吖，第二天起来还依旧有淡淡的香味呢🙆‍♀️</p>
]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>自制的2048小游戏</title>
    <url>/2022/02/27/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/</url>
    <content><![CDATA[<p>这是我制作的第一个小游戏🙆‍♀️</p>
<p>自学了HTML，CSS，和JS的一点皮毛🤦‍♀️</p>
<p>只能说一个这个有些稚嫩的成果，基本啥都没有，简单的界面和逻辑，唯一的优点是它确实能跑，缺点是“能跑”的补集😅</p>
<p>下面是我做的时候写的思维导图，希望对你有帮助：</p>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/2048-16462039259381.png" alt="2048"></p>
<p>里面用到的函数：</p>
<ol>
<li>更新当前视图</li>
</ol>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE.png" alt="更新视图"></p>
<ol start="2">
<li><p>移动本行（这里以向左移动为例）</p>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE(1).png" alt="更新视图(1)"></p>
</li>
<li><p>生成随机位置</p>
</li>
</ol>
<p><img src="/../img/%E6%88%91%E5%81%9A%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%942048/%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE(2).png" alt="更新视图(2)"></p>
<p>链接如下，要不点进去看看，哎喂看看我的配色也行啊！</p>
<p><a href="https://zhiruozzy.cn/Web/">2048小游戏</a></p>
<h3 id="下面是代码部分："><a href="#下面是代码部分：" class="headerlink" title="下面是代码部分："></a>下面是代码部分：</h3><h4 id="HTML部分："><a href="#HTML部分：" class="headerlink" title="HTML部分："></a>HTML部分：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://www.2048.org/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 游戏标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当herf链接会空时会刷新页面，也就达到了remake的目的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot; &quot;</span> <span class="attr">id</span>=<span class="string">&quot;newgamebutton&quot;</span>&gt;</span>新游戏<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;grade&quot;</span>&gt;</span>分数：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;score01&quot;</span>&gt;</span>999999999<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c00&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c03&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c13&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c30&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c31&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c32&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span> <span class="attr">id</span>=<span class="string">&quot;c33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gameover&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            游戏结束！<span class="tag">&lt;<span class="name">br</span>&gt;</span> 分数：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;score02&quot;</span>&gt;</span>999999999<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>再来一次<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">10px</span> auto;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置“2048”的字体 */</span></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">h1</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">45px</span>;</span><br><span class="line">	<span class="comment">/* 字体加粗 */</span></span><br><span class="line">	<span class="attribute">font-weight</span>: <span class="number">700px</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*设置游戏按钮 */</span></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-id">#newgamebutton</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">8px</span> auto;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">130px</span>;</span><br><span class="line">	<span class="comment">/* 背景颜色 */</span></span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#8f7a66</span>;</span><br><span class="line">	<span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">	<span class="comment">/* 字体颜色 */</span></span><br><span class="line">	<span class="attribute">color</span>: white;</span><br><span class="line">	<span class="comment">/* 字体垂直居中 */</span></span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="comment">/* 设置圆角 */</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="comment">/* 去除下划线 */</span></span><br><span class="line">	<span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 设置鼠标悬浮样式 */</span></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-id">#newgamebutton</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#9f8b77</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FAF8EF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grade</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#776E65</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.all</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#BBADA0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc0b3</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#776E65</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n2</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">237</span>, <span class="number">229</span>, <span class="number">218</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n4</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">235</span>, <span class="number">216</span>, <span class="number">191</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n8</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">242</span>, <span class="number">177</span>, <span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n16</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">147</span>, <span class="number">92</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n32</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">242</span>, <span class="number">116</span>, <span class="number">86</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n64</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">243</span>, <span class="number">81</span>, <span class="number">46</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n128</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">210</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n256</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">209</span>, <span class="number">81</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n512</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">204</span>, <span class="number">164</span>, <span class="number">11</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n1024</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">143</span>, <span class="number">75</span>, <span class="number">56</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n2048</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">142</span>, <span class="number">62</span>, <span class="number">31</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n4096</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">106</span>, <span class="number">52</span>, <span class="number">39</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.n8192</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">110</span>, <span class="number">107</span>, <span class="number">65</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gameover</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gameover</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gameover</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#8F7A66</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JS部分（核心）："><a href="#JS部分（核心）：" class="headerlink" title="JS部分（核心）："></a>JS部分（核心）：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> game = &#123;</span><br><span class="line">    <span class="attr">data</span>: [], <span class="comment">//存放数据</span></span><br><span class="line">    <span class="attr">score</span>: <span class="number">0</span>, <span class="comment">//分数</span></span><br><span class="line">    <span class="attr">status</span>: <span class="number">0</span>, <span class="comment">//当前状态，时刻的监听，时刻的需要改变      游戏运行中的状态，结束的状态</span></span><br><span class="line">    <span class="attr">gameover</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">gamerunning</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始游戏的方法</span></span><br><span class="line">    <span class="attr">start</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">score</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = [</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        ]</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable language_">this</span>.<span class="property">gamerunning</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">randomNum</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">randomNum</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">dataView</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 随机数的方法</span></span><br><span class="line">    <span class="attr">randomNum</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">var</span> r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">var</span> c = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> num = <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span> ? <span class="number">2</span> : <span class="number">4</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">data</span>[r][c] = num;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 更新的视图</span></span><br><span class="line">    <span class="attr">dataView</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; <span class="number">4</span>; c++) &#123;</span><br><span class="line">                <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;c&#x27;</span> + r + c);</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] != <span class="number">0</span>) &#123;</span><br><span class="line">                    div.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">data</span>[r][c];</span><br><span class="line">                    div.<span class="property">className</span> = <span class="string">&#x27;cell n&#x27;</span> + <span class="variable language_">this</span>.<span class="property">data</span>[r][c]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    div.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    div.<span class="property">className</span> = <span class="string">&#x27;cell&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;score01&#x27;</span>).<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">score</span>; <span class="comment">//设置游戏分数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监测游戏状态</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable language_">this</span>.<span class="property">gameover</span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;score02&#x27;</span>).<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">score</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;gameover&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;gameover&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 判断游戏是否结束的方法   游戏没结束返回false 结束返回true</span></span><br><span class="line">    <span class="attr">isgameover</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; <span class="number">4</span>; c++) &#123;</span><br><span class="line">                <span class="comment">// 没有结束，三种情况：：1.数组中还有0 2.左右相邻的有相同的  3.上下相邻有相同的</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="variable language_">this</span>.<span class="property">data</span>[r][c + <span class="number">1</span>]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (r &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="variable language_">this</span>.<span class="property">data</span>[r + <span class="number">1</span>][c]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//表示游戏已经结束</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左移动</span></span><br><span class="line">    <span class="attr">moveLeft</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> before = <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">data</span>) <span class="comment">//移动之前</span></span><br><span class="line">            <span class="comment">//处理移动的逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">moveLeftInRow</span>(r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> after = <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">data</span>) <span class="comment">//移动之后</span></span><br><span class="line">        <span class="keyword">if</span> (before != after) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">randomNum</span>()</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isgameover</span>()) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable language_">this</span>.<span class="property">gameover</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">dataView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">moveLeftInRow</span>: <span class="keyword">function</span>(<span class="params">r</span>) &#123; <span class="comment">//单独处理每一行的逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; <span class="number">3</span>; c++) &#123;</span><br><span class="line">            <span class="keyword">var</span> nextc = <span class="variable language_">this</span>.<span class="title function_">getNextInRow</span>(r, c);</span><br><span class="line">            <span class="keyword">if</span> (nextc != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][c] = <span class="variable language_">this</span>.<span class="property">data</span>[r][nextc];</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][nextc] = <span class="number">0</span>;</span><br><span class="line">                    c--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="variable language_">this</span>.<span class="property">data</span>[r][nextc]) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][c] *= <span class="number">2</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">score</span> += <span class="variable language_">this</span>.<span class="property">data</span>[r][c]</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][nextc] = <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getNextInRow</span>: <span class="keyword">function</span>(<span class="params">r, c</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = c + <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][i] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右移动</span></span><br><span class="line">    <span class="attr">moveRight</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> before = <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">data</span>) <span class="comment">//移动之前</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">3</span>; r &gt;= <span class="number">0</span>; r--) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">moveRightInRow</span>(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> after = <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">data</span>) <span class="comment">//移动之后</span></span><br><span class="line">        <span class="keyword">if</span> (before != after) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">randomNum</span>()</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isgameover</span>()) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable language_">this</span>.<span class="property">gameover</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">dataView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">moveRightInRow</span>: <span class="keyword">function</span>(<span class="params">r</span>) &#123; <span class="comment">//单独处理每一行的逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">3</span>; c &gt;= <span class="number">0</span>; c--) &#123;</span><br><span class="line">            <span class="keyword">var</span> nextc = <span class="variable language_">this</span>.<span class="title function_">getNextInRowa</span>(r, c);</span><br><span class="line">            <span class="keyword">if</span> (nextc != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][c] = <span class="variable language_">this</span>.<span class="property">data</span>[r][nextc];</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][nextc] = <span class="number">0</span>;</span><br><span class="line">                    c++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="variable language_">this</span>.<span class="property">data</span>[r][nextc]) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][c] *= <span class="number">2</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">score</span> += <span class="variable language_">this</span>.<span class="property">data</span>[r][c]</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][nextc] = <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getNextInRowa</span>: <span class="keyword">function</span>(<span class="params">r, c</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = c - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][i] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 上移动</span></span><br><span class="line">    <span class="attr">moveTop</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> before = <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">data</span>) <span class="comment">//移动之前</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">0</span>; c &lt; <span class="number">4</span>; c++) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">moveTopInRow</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> after = <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">data</span>) <span class="comment">//移动之后</span></span><br><span class="line">        <span class="keyword">if</span> (before != after) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">randomNum</span>()</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isgameover</span>()) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable language_">this</span>.<span class="property">gameover</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">dataView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">moveTopInRow</span>: <span class="keyword">function</span>(<span class="params">c</span>) &#123; <span class="comment">//单独处理每一列的逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">0</span>; r &lt; <span class="number">3</span>; r++) &#123;</span><br><span class="line">            <span class="keyword">var</span> nextr = <span class="variable language_">this</span>.<span class="title function_">getNextInRowaa</span>(r, c);</span><br><span class="line">            <span class="keyword">if</span> (nextr != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][c] = <span class="variable language_">this</span>.<span class="property">data</span>[nextr][c];</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[nextr][c] = <span class="number">0</span>;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="variable language_">this</span>.<span class="property">data</span>[nextr][c]) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][c] *= <span class="number">2</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">score</span> += <span class="variable language_">this</span>.<span class="property">data</span>[r][c]</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[nextr][c] = <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getNextInRowaa</span>: <span class="keyword">function</span>(<span class="params">r, c</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = r + <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[i][c] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 下移动</span></span><br><span class="line">    <span class="attr">moveButtom</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> before = <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">data</span>) <span class="comment">//移动之前</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> c = <span class="number">3</span>; c &gt;= <span class="number">0</span>; c--) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">moveButtomInRow</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> after = <span class="title class_">String</span>(<span class="variable language_">this</span>.<span class="property">data</span>) <span class="comment">//移动之后</span></span><br><span class="line">        <span class="keyword">if</span> (before != after) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">randomNum</span>()</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isgameover</span>()) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable language_">this</span>.<span class="property">gameover</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">dataView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">moveButtomInRow</span>: <span class="keyword">function</span>(<span class="params">c</span>) &#123; <span class="comment">//单独处理每一列的逻辑</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="number">3</span>; r &gt;= <span class="number">0</span>; r--) &#123;</span><br><span class="line">            <span class="keyword">var</span> nextr = <span class="variable language_">this</span>.<span class="title function_">getNextInRowaaa</span>(r, c);</span><br><span class="line">            <span class="keyword">if</span> (nextr != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][c] = <span class="variable language_">this</span>.<span class="property">data</span>[nextr][c];</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[nextr][c] = <span class="number">0</span>;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[r][c] == <span class="variable language_">this</span>.<span class="property">data</span>[nextr][c]) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[r][c] *= <span class="number">2</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">score</span> += <span class="variable language_">this</span>.<span class="property">data</span>[r][c]</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">data</span>[nextr][c] = <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getNextInRowaaa</span>: <span class="keyword">function</span>(<span class="params">r, c</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = r - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>[i][c] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">game.<span class="title function_">start</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">37</span>) &#123;</span><br><span class="line">        game.<span class="title function_">moveLeft</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">39</span>) &#123;</span><br><span class="line">        game.<span class="title function_">moveRight</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">38</span>) &#123;</span><br><span class="line">        game.<span class="title function_">moveTop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">keyCode</span> == <span class="number">40</span>) &#123;</span><br><span class="line">        game.<span class="title function_">moveButtom</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>自制</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>离散数学の笔记</title>
    <url>/2022/03/02/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h3><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h5><ul>
<li>命题，是指具有唯一真值的陈述句</li>
<li>疑问句、祈使句、感叹句，因为无法判断真假，所以都不是命题</li>
<li>真用1或T来表示，假用0或F来表示，因为命题只有这两种真值，所以这种逻辑成为二值逻辑</li>
</ul>
<h5 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h5><ul>
<li>1+101&#x3D;110  在二进制下为真，在十进制下为假，真值不唯一，所以不是命题</li>
<li>别的星球上有生物  虽然现在不确定，但是这个问题是有客观答案的 ，并不以你我的意志而转移，所以是命题</li>
<li>全体立正！ 祈使句不是命题</li>
<li>天气多好啊！ 感叹句不是命题</li>
</ul>
<p><strong>注意</strong>：一个陈述句暂时不能确定真值，但到了一定时间就可以确定，与一个陈述句的真值不能唯一确定是不一样的</p>
<ul>
<li>x&gt;3  　x的取值范围不同，本句话的真假是不一样的，所以不是命题</li>
<li>2190年人类将移居火星   虽然现在无法确定，但是到了2190年就可以唯一确定本句话的真假，所以是命题</li>
</ul>
<h5 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h5><ol>
<li>原子命题：一个陈述句再也不能分解成更为简单的语句，则由它构成的命题成为原子命题</li>
<li>复合命题：由原子命题，命题联结词和圆括号组成</li>
</ol>
<h3 id="命题联结词"><a href="#命题联结词" class="headerlink" title="命题联结词"></a>命题联结词</h3><ol>
<li><p>否定联结词： ┐</p>
<p>┐p和p的真假是相反的</p>
</li>
<li><p>合取联结词：∧</p>
<p>p∧Q读作“P与Q”或者“P且Q”  </p>
<p>当且仅当P和Q同为真，命题P∧Q的真值才为真</p>
</li>
<li><p>析取联结词：∨</p>
<p>P∨Q读作“P或Q”</p>
<p>只要P、Q中有一个为真，命题P∨Q就为真</p>
</li>
<li><p>条件(蕴含)联结词：→</p>
<p>P→Q读作P条件Q，或者“若P则Q” “P仅当Q” “P是Q的充分条件”</p>
<p>只有当P的真值为真而Q的真值为假时，命题P→Q的真值为假，其余都为真</p>
<p>例子：</p>
<p>①只要天下雨，我就回家</p>
<p>②只有天下雨，我才回家</p>
<p>③除非天下雨，否则我不回家</p>
<p>④仅当天下雨，我才回家</p>
<p>解析：①强调的是如果天下雨了，那我就回家，②③④强调的是如果我回家了，那一定是天下雨了。 所以①可符号化为P→Q ，②③④可符号化为Q→P</p>
</li>
<li><p>双条件联结词：↔</p>
<p>P↔Q读作“P当且仅当Q”，只有两者同时为真或同时为假时，P↔Q才为真</p>
</li>
<li><p>异或（双条件非）联结词：⊕</p>
<p>当且仅当P和Q的真值不相同时，P⊕Q为T</p>
</li>
<li><p>与非联结词：↑</p>
<p>P↑Q读作“P合取非Q” 或者“P与非Q”，当且仅当P和Q均为T时，P↑Q为F，否则P↑Q为T。</p>
</li>
<li><p>或非联结词：↓</p>
<p>P↓Q读作“P析取非Q”或者“P或非Q”，当且仅当P和Q均为F时，P↓Q为T，否则P↓Q为F</p>
</li>
</ol>
<h3 id="命题公式"><a href="#命题公式" class="headerlink" title="命题公式"></a>命题公式</h3><p>命题公式由原子命题，命题联结词，圆括号构成，但是并不是由这三类符号组成的的任何符号串都能成为命题公式 ，合理的命题公式叫做合式公式</p>
<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>合式公式是由下列规则生成的公式：</p>
<ol>
<li>单个原子公式是合式公式</li>
<li>若A是一个合式公式，那么（ ┐A）也是一个合式公式</li>
<li>若A、B是合式公式，则（A^B）、（A∨B）、（A→B）和（A↔B）都是合式公式</li>
<li>只有有限次的使用1，2和3生成的公式才是合式公式</li>
</ol>
<h5 id="约定："><a href="#约定：" class="headerlink" title="约定："></a>约定：</h5><ol>
<li><p>联结词的优先级从高到低是： ┐、∧、∨、→、↔</p>
</li>
<li><p>相同的联结词按从左到右的次序计算时，圆括号可以省略</p>
</li>
<li><p>最外层的圆括号也可以省略</p>
</li>
</ol>
<h3 id="命题的翻译和符号化"><a href="#命题的翻译和符号化" class="headerlink" title="命题的翻译和符号化"></a>命题的翻译和符号化</h3><h5 id="将自然语言符号化"><a href="#将自然语言符号化" class="headerlink" title="将自然语言符号化"></a>将自然语言符号化</h5><ol>
<li><p>小王边走边唱</p>
<p>P：小王走路  Q：小王唱歌  </p>
<p>&#x3D;&gt; P^Q </p>
</li>
<li><p>如果今天不下雨并且不刮风，我就去书店</p>
<p>P：今天下雨（不能设位今天不下雨，因为“今天不下雨”不是原子命题）</p>
<p>Q：今天刮风</p>
<p>R：我去书店 </p>
<p>&#x3D;&gt;（┐P∧ ┐Q）→R</p>
</li>
<li><p>小刚要么在学习，要么在玩游戏</p>
<p>P：小刚在学习</p>
<p>Q：小刚在玩游戏</p>
<p>&#x3D;&gt; (P∧ ┐Q)∨(┐P∧ Q)  </p>
<p>即：小刚在学习且没有玩游戏，或者小刚在玩游戏且没有学习</p>
</li>
<li><p>除非a能被2整除，否则a不能被4整除</p>
<p>P：a能被2整除</p>
<p>Q：a能被4整除</p>
<p>&#x3D;&gt;  ┐P →  ┐Q   即：a如果不能被2整除，则a不能被4整除</p>
<p>或者Q→P   即：如果a能被4整除，那么a一定可以被2整除</p>
</li>
<li><p>如果天不下雨，我们就去打篮球，除非班上有会</p>
<p>P：天下雨</p>
<p>Q：我们去打篮球</p>
<p>R：今天班上有会</p>
<p>&#x3D;&gt;（┐P∧ ┐R）→Q   即：我们打篮球的条件必须是天不下雨且班上没有会</p>
<p>或者：┐R→(┐P→Q）即：如果没有会，并且没有下雨，我们就去打篮球</p>
</li>
</ol>
<h3 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h3><p>含有n个原子命题的命题公式所对应的真值共有2^n中情况</p>
<h3 id="等价"><a href="#等价" class="headerlink" title="等价"></a>等价</h3><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>给定两个命题公式，若对于其中任意一组指派而言，A和B的真值都相同，则称A和B是等价的</p>
<h5 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h5><ol>
<li><p>﹁ ( ﹁ G ) &#x3D; G<br>（双重否定律）</p>
</li>
<li><p>G ∧ G &#x3D; G   G ∨ G &#x3D; G<br>（幂等律）</p>
</li>
<li><p>G ∨ H &#x3D; H ∨ G<br>G ∧ H &#x3D; H ∧ G<br>（交换律）</p>
</li>
<li><p>G ∨ ( H ∨ S ) &#x3D; ( G ∨ H ) ∨ S<br>G ∧ ( H ∧ S ) &#x3D; ( G ∧ H ) ∧ S<br>（结合律）</p>
</li>
<li><p>G ∨ ( H ∧ S ) &#x3D; ( G ∨ H ) ∧ ( G ∨ S )<br>G ∧ ( H ∨ S ) &#x3D; ( G ∧ H ) ∨ ( G ∧ S )<br>（分配律）</p>
</li>
<li><p>﹁ ( G ∧ H ) &#x3D; ﹁ G ∨ ﹁ H  （去掉括号后合取变析取，析取变合取）<br>（德摩根律）</p>
</li>
<li><p>G ∨ ( G ∧ H ) &#x3D; G</p>
<p>G ∧ ( G ∨ H ) &#x3D; G<br>（吸收律）</p>
</li>
<li><p>G ∨ 1 &#x3D; 1<br>G ∧ 0 &#x3D; 0<br>（零律）</p>
</li>
<li><p>G ∧ 1 &#x3D; G</p>
<p>G ∨ 0 &#x3D; G</p>
<p>（同一律）</p>
</li>
<li><p>G ∧﹁ G &#x3D; 0<br>G V ﹁ G &#x3D; 1<br>（否定律）</p>
</li>
<li><p>G → H &#x3D; ﹁ G ∨ H<br>（条件转化律）</p>
</li>
<li><p>G ↔ H &#x3D; ( G → H ) ∧ ( H → G ) &#x3D; ( ﹁ G ∨ H ) ∧ ( ﹁ H ∨ G )<br>（双条件传化律）</p>
</li>
<li><p>G → H &#x3D; ﹁ H → ﹁ G<br>（假言易位）</p>
</li>
<li><p>G ↔ H &#x3D; ﹁ G ↔ ﹁ H<br>（等价否定等式）</p>
</li>
</ol>
<h5 id="等价置换定理"><a href="#等价置换定理" class="headerlink" title="等价置换定理"></a>等价置换定理</h5><p>如果X是合式公式A的一部分，且X本身也是一个合式公式，则称X为合式公式A的子公式</p>
<p>设X是合式公式A的子公式，若X&#x3D;Y。如果将A中用的X用Y来置换，所得到的公式B与公式A等价。即A&#x3D;B</p>
<h3 id="重言式与蕴含式"><a href="#重言式与蕴含式" class="headerlink" title="重言式与蕴含式"></a>重言式与蕴含式</h3><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>对于某个命题公式，如果其在分量的任何指派的指派下的真值均为T，则称该命题公式为<strong>重言式</strong>或<strong>永真式</strong>。</p>
<p>对于某个命题公式，如果其在分量的任何指派的指派下的真值均为F，则称该命题公式为<strong>矛盾式</strong>或<strong>永假式</strong>。</p>
<p>如果某个命题不是矛盾式，则称该命题为<strong>可满足式</strong></p>
<p><strong>蕴含式</strong>：当且仅当P→Q是重言式时，我们称“P蕴含Q“，并记作P&#x3D;&gt;Q</p>
<p>要证明P&#x3D;&gt;Q,只需证明P→Q,或者证明﹁Q→﹁P</p>
<h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><ul>
<li>命题变元或命题变元的否定称为<strong>文字</strong>。 P，﹁P，Q，﹁Q</li>
<li><em>有限个</em>文字的析取称为<strong>简单析取式</strong>（或<strong>子句</strong>）。</li>
<li><em>有限个</em>文字的合取称为<strong>简单合取式</strong>（或<strong>短语</strong>）。</li>
<li>P与﹁P称为<strong>互补对</strong></li>
<li><em>有限个</em>简单合取式（短语）的析取式称为<strong>析取范式</strong>  如  ( G ∧ H ) ∨ ( G ∧ S )，又如 P ∧ ﹁Q ,P ,﹁P</li>
<li><em>有限个</em>简单析取式（短语）的合取式称为<strong>合取范式</strong>，如（P∨ H ) ∧ ( ﹁H ∨Q）,又如 P ∧ ﹁Q ,P ,﹁P</li>
</ul>
<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>析取范式、合取范式仅含联结词集{﹁，∧，∨}，且否定联结词仅出现在命题变元之前</p>
<h5 id="范式存在定理"><a href="#范式存在定理" class="headerlink" title="范式存在定理"></a>范式存在定理</h5><p>对于任意公式，都存在与其等价的析取范式和合取范式，且范式不唯一</p>
<h5 id="转化方法："><a href="#转化方法：" class="headerlink" title="转化方法："></a>转化方法：</h5><ol>
<li><p>将公式中的↔，→ 用联结词﹁，∧，∨来取代</p>
<ul>
<li><p>蕴含式：G → H &#x3D; ﹁ G ∨ H</p>
</li>
<li><p>双条件传化律：G ↔ H &#x3D; ( G → H ) ∧ ( H → G )</p>
</li>
</ul>
<p>利用蕴含式再次转化： &#x3D; ( ﹁ G ∨ H ) ∧ ( ﹁ H ∨ G )</p>
</li>
<li><p>将否定联结词移到各个命题变元的前端，并消去多余的否定号</p>
<ul>
<li><p>双重否定律：﹁(﹁ G)&#x3D;G</p>
</li>
<li><p>德摩根律：﹁ ( G ∧ H ) &#x3D; ﹁ G ∨ ﹁ H </p>
<p>​                  ﹁ ( G ∨  H ) &#x3D; ﹁ G ∧﹁ H </p>
<p>（去掉括号后析取变合取，合取变析取）</p>
</li>
</ul>
</li>
<li><p>利用分配律，将公式化成一些合取式的析取，或化成一些析取式的合取：</p>
<ul>
<li>分配律：G ∨ ( H ∧ S ) &#x3D; ( G ∨ H ) ∧ ( G ∨ S )<br>          G ∧ ( H ∨ S ) &#x3D; ( G ∧ H ) ∨ ( G ∧ S )</li>
</ul>
</li>
</ol>
<h5 id="主范式"><a href="#主范式" class="headerlink" title="主范式"></a>主范式</h5><p>因为范式的不唯一，为了规范化，形成唯一的主析取范式和主合取范式</p>
<h5 id="极小项和极大项"><a href="#极小项和极大项" class="headerlink" title="极小项和极大项"></a>极小项和极大项</h5><ol>
<li>极小项（<strong>析取</strong>）：</li>
</ol>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220302221948240.png" alt="image-20220302221948240"></p>
<ul>
<li>没有两个极小项是等价的</li>
<li>，每个极小项只有一组<strong>真</strong>值，因此可用于给极小项编码，规律为：命题变元与1对应，命题变元的否定与0对应</li>
</ul>
<ol start="2">
<li><p>极大项（<strong>合取</strong>）：</p>
<p><img src="/../img/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%81%AE%E7%AC%94%E8%AE%B0/image-20220302222040684.png" alt="image-20220302222040684"></p>
<ul>
<li>没有两个极大项是相同的 </li>
<li>每个极大项只有一组<strong>假</strong>值，因此可用于给极大项编码，规律为：命题变元与0对应，命题变元的否定与1对应</li>
</ul>
<ol start="3">
<li>例题：</li>
</ol>
<img src="../img/离散数学の笔记/image-20220302222555770.png" alt="image-20220302222555770" style="zoom:67%;" />

<ol start="4">
<li><p>极大项与极小项的性质</p>
<img src="../img/离散数学の笔记/image-20220302222904977.png" alt="image-20220302222904977" style="zoom: 80%;" /></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数学笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode题解</title>
    <url>/2021/03/06/leetcode%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="2022-03-06"><a href="#2022-03-06" class="headerlink" title="2022-03-06"></a>2022-03-06</h3><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26.删除有序数组中的重复项"></a>26.删除有序数组中的重复项</h3><p>给你一个<strong>升序排列</strong>的数组nums，需要你<strong>原地删除</strong>重复出现的元素，使每个元素<strong>只出现一次</strong>，返回删除后数组的新长度，元素的<strong>相对顺序应该保持一致</strong></p>
<p>题目分析：</p>
<ol>
<li><p>升序排列&#x3D;&gt;可以使用双指针</p>
</li>
<li><p>必须原地修改原数组&#x3D;&gt;不能使用额外的空间，函数传参的时候是引用的形式，所以在函数中直接修改数组就行</p>
</li>
<li><p>返回新长度&#x3D;&gt;程序只会遍历到新长度，所以不用管数组超出新长度后面的元素</p>
</li>
</ol>
<p>题解：</p>
<p>双指针，一个pre指针用于标志已经处理好的数组的位置，一个cur指针用于标志正在处理中的数组的位置</p>
<p>一开始两者都指向数组的开始</p>
<ul>
<li>如果nums[cur]&#x3D;&#x3D;nums[pre]，cur指针后移一位</li>
<li>如果nums[cur]!&#x3D;nums[pre]，让nums[pre+1]&#x3D;nums[cur]，然后让pre,cur都后移一位</li>
</ul>
<p>注意1：最后返回新长度是pre+1，不是pre。因为返回的是长度，而pre表示的是下标，下标是从0开始的。</p>
<p>注意2：要特别处理数组为空的情况，如果数组为空，应该返回0。</p>
<p>第一版代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">            <span class="type">int</span> pre=<span class="number">0</span>,cur=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(cur&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[cur]==nums[pre])</span><br><span class="line">                    cur++;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    nums[pre+<span class="number">1</span>]=nums[cur];</span><br><span class="line">                    cur++,pre++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pre+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以发现，在if..else判断语句中，都有cur++这一条，所以可以精简一下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">       <span class="keyword">while</span>(cur&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[cur]!=nums[pre])&#123;</span><br><span class="line">               nums[pre+<span class="number">1</span>]=nums[cur];</span><br><span class="line">               pre++;</span><br><span class="line">           &#125;</span><br><span class="line">          cur++;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
</search>
